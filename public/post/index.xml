<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Home</title>
    <link>https://sokinpui.github.io/Blog/post/</link>
    <description>Recent content in Posts on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 03 Aug 2023 22:23:12 +0800</lastBuildDate><atom:link href="https://sokinpui.github.io/Blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neovim plugins recommendation: Auto pair and multi cursor</title>
      <link>https://sokinpui.github.io/Blog/post/vim5-plugin-autopairs/</link>
      <pubDate>Thu, 03 Aug 2023 22:23:12 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim5-plugin-autopairs/</guid>
      <description>Auto pair plugin that work with multi cursor without any issue.</description>
      <content:encoded><![CDATA[<p>I use multi cursor plugin and auto pairs together, unfortunately I find my old two plugins don&rsquo;t integrate well. <a href="https://github.com/LunarWatcher/auto-pairs">This autopairs from LunarWatcher</a> often throw error: <code>E117: Unknown function: AutoPairsTryInit</code> when end editing with [multi cursor plugin]((<a href="https://github.com/mg979/vim-visual-multi)">https://github.com/mg979/vim-visual-multi)</a>. Although this plugin is already improved to be more compatible with <strong>vim-visual-multi</strong>. To be mentioned, this bug is fixed in this <a href="https://github.com/LunarWatcher/auto-pairs/issues/12#issue-780680284">issue</a>. I still find the bug occur.</p>
<h1 id="another-auto-pair-plugins">Another auto pair plugins</h1>
<p>I google a solution, and finally end up with this Neovim plugins <a href="https://github.com/windwp/nvim-autopairs">nvim-autopairs</a>. Surprisingly, it is feature richer than <a href="https://github.com/LunarWatcher/auto-pairs">this autopairs plugins</a>, unfortunately, it only support Neovim.</p>
<p>Other than basic function, you can extend its auto pairs rule by calling its rule method: (example from its repo)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">Rule</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;nvim-autopairs.rule&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">npairs.add_rules</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="n">Rule</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="p">,</span> <span class="s2">&#34;$&#34;</span><span class="p">,{</span><span class="s2">&#34;tex&#34;</span><span class="p">,</span> <span class="s2">&#34;latex&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- don&#39;t add a pair if the next character is %</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">with_pair</span><span class="p">(</span><span class="n">cond.not_after_regex</span><span class="p">(</span><span class="s2">&#34;%%&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- don&#39;t add a pair if  the previous character is xxx</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">with_pair</span><span class="p">(</span><span class="n">cond.not_before_regex</span><span class="p">(</span><span class="s2">&#34;xxx&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- don&#39;t move right when repeat character</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">with_move</span><span class="p">(</span><span class="n">cond.none</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- don&#39;t delete if the next character is xx</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">with_del</span><span class="p">(</span><span class="n">cond.not_after_regex</span><span class="p">(</span><span class="s2">&#34;xx&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- disable adding a newline when you press &lt;cr&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">with_cr</span><span class="p">(</span><span class="n">cond.none</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="c1">-- disable for .vim files, but it work for another filetypes</span>
</span></span><span class="line"><span class="cl">  <span class="n">Rule</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="s2">&#34;-vim&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>Their already have some common rule that provided by its <a href="https://github.com/windwp/nvim-autopairs/wiki/Custom-rules">wiki</a>. One of the very helpful rule is auto addspace on =.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">var| 
</span></span><span class="line"><span class="cl">insert =
</span></span><span class="line"><span class="cl">var = |
</span></span><span class="line"><span class="cl">insert = again
</span></span><span class="line"><span class="cl">var == |
</span></span></code></pre></div><p>Also the plugin provide api for you to disable it per filetype. If you writing shell script you don&rsquo;t auto addspace on =, you can diable it by:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">Rule</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;nvim-autopairs.rule&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">npairs.add_rules</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="n">Rule</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="s2">&#34;-sh&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="c1">--rule body</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>You can write your own rule to fullfill your need. Most importantly, it won&rsquo;t throw error if use with <strong>vim-visual-multi</strong>!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Setup markdown writing with Vim and Obsidian</title>
      <link>https://sokinpui.github.io/Blog/post/vim4-markdownwritingsetup/</link>
      <pubDate>Thu, 03 Aug 2023 09:26:43 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim4-markdownwritingsetup/</guid>
      <description>Combine Vim and Obsidian together</description>
      <content:encoded><![CDATA[<p>There are so many markdown editor exist already, most of them are really easy to use. But most of them provide feature more close to preview the markdown document, rather than editing or help writing. Like <a href="https://typora.io/">typora</a>, it trust to have to best markdown writing experience as it has great live preview and <strong>What You See Is What You Mean</strong>. I love its <strong>What You See Is What You Mean</strong>, since it must same as how the file render on browser, however, markdown file is so simple compare to tex, what you writing is close enough to what you see. Therefore, I regard <a href="https://typora.io/">typora</a> as a good markdown reader instead of good markdown writer.</p>
<p>Another application I want to discuss about, <a href="https://obsidian.md/">obsidian</a>, also provide great live preview, it has sidebar file explorer, extension support, making it look like vscode for markdown. However, in terms of markdown editing. obsidian is still far behind an serious editor like emacs, vscode or vim. I don&rsquo;t say obsidian is not good as them, it is the difference between their purpose, &ldquo;Markdown editor&rdquo; is just good for reading markdown file, &ldquo;Editor&rdquo; is just good at editing. This is the reason I would recommend using an editor as the backend of markdown writing. You don&rsquo;t have to use vim, you can pick your favourite editor. This blog provide ideas to speed up your markdown writing.</p>
<h1 id="fzf-and-markdown">fzf and markdown</h1>
<h2 id="navigate-obsidian-vault">Navigate obsidian vault</h2>
<p>It is common that we work on an directory instead of single file, often jump to another file, other than clicking your file explorer, you can use fzf to jump to another file. For example you can map a shortcut that will fzf search the root of your markdown directory. <strong>Obsidian</strong> has the concept of vault, it is same as directory, or git repo, You can convert your obsidian vault to git repo, they won&rsquo;t conflict.</p>
<p>Neovim has many fzf tools integrated well, I use <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a>, because I know it first, there are very little difference between those fzf.vim in terms of functionality, just pick one.</p>
<p>With lines of vimscript, jumping within your vault is easy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">function</span><span class="p">!</span> <span class="nx">s</span>:<span class="nx">fzfroot</span>#<span class="nx">find_git_root</span><span class="p">()</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">return</span> <span class="nx">system</span><span class="p">(</span><span class="s1">&#39;git rev-parse --show-toplevel 2&gt; /dev/null&#39;</span><span class="p">)</span>[:<span class="m">-2</span>]<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">endfunction</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">command</span><span class="p">!</span> <span class="nx">ProjectFiles</span> <span class="nx">execute</span> <span class="s1">&#39;Files&#39;</span> <span class="nx">fzfroot</span>#<span class="nx">find_git_root</span><span class="p">()</span><span class="err">
</span></span></span></code></pre></div><p>You can use command ProjectFiles to naigate your vault after convert it into git repo. You can of course map a key to <code>ProjectFiles</code>.</p>
<h2 id="insert-link-to-files">insert link to files</h2>
<p>When writing or note taking, we often link file together, if you care about protabilty, you may not want to use obsidian specific wiki link format, you may prefer markdown format more, so to insert file link within obsidian vault, <strong>fzf.vim</strong> can do so.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">l</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span><span class="s1">&#39;fd --type=file . $(git rev-parse --show-cdup 2&gt; /dev/null)&#39;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">f</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span><span class="s1">&#39;fd --type=file . $(git rev-parse --show-toplevel 2&gt; /dev/null)&#39;</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></div><p>The first line insert relative path to root of vault, the second line will insert full path to the file. you can autocomplete when you editing link <code>[]()</code>.</p>
<h1 id="snips">snips</h1>
<p>Snippets is just easier to set up on code editor than markdown editor, and integrate well with auto completion. I use <a href="https://github.com/SirVer/ultisnips">Ultisnips</a> I have decide merge to Luasnips, but their is only little preformance enhancment, so I stay in Ultisnips. You can check my autocomplete and snippets setup in <a href="/Blog/post/vim-4/">this blog</a></p>
<h1 id="concealment">Concealment</h1>
<p>You can concealment markdown syntax by add the following line in your <code>vimrc</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">conceallevel</span><span class="p">=</span><span class="m">2</span><span class="err">
</span></span></span></code></pre></div><p>Example:
<img loading="lazy" src="/Blog/post/vim4-markdownwritingsetup/conceal.gif" type="" alt="conceal1.git"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>XDG base configuration for Vim</title>
      <link>https://sokinpui.github.io/Blog/post/vim3-xdgforvim/</link>
      <pubDate>Thu, 03 Aug 2023 09:11:30 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim3-xdgforvim/</guid>
      <description>Simple hack to have XDG based configuration for Vim</description>
      <content:encoded><![CDATA[<p>I have seen some post and issue on Vim github that want XDG base configuration become one of the runtimpath of Vim(not Neovim), actually a simple hack can done so.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir <span class="nv">$HOME</span>/.config/vim
</span></span><span class="line"><span class="cl">mkdir <span class="nv">$HOME</span>/.vim
</span></span><span class="line"><span class="cl">mv <span class="nv">$HOME</span>/.vimrc <span class="nv">$HOME</span>/.vim/vimrc
</span></span><span class="line"><span class="cl">mv <span class="nv">$HOME</span>/.vim <span class="nv">$HOME</span>/.config/vim 
</span></span><span class="line"><span class="cl">ln -s <span class="nv">$HOME</span>/.config/vim <span class="nv">$HOME</span>/.vim
</span></span></code></pre></div><p>Do you know there your <code>vimrc</code> can located at either <code>$HOME/.vimrc</code> or <code>$HOME/.vim/vimrc</code>, so you can move your whole runtimpath to <code>$HOME/.config/vim</code>, then create a symbolic link <code>$HOME/.vim</code> point to <code>$HOME/.config/vim</code>.</p>
<p>Although I know XDG is more than just a directory, it may still be helpful for group all your configuration together.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Use git to version control your config</title>
      <link>https://sokinpui.github.io/Blog/post/vim2-gityourconfig/</link>
      <pubDate>Wed, 02 Aug 2023 22:49:02 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim2-gityourconfig/</guid>
      <description>Use git to try new feature easily and broken change</description>
      <content:encoded><![CDATA[<p>This blog is written for those how nothing about git. Just a quick start about what you can do with your command line tools <a href="https://git-scm.com/">git</a>.</p>
<h1 id="what-is-git">What is git</h1>
<p><img loading="lazy" src="/Blog/post/vim2-gityourconfig/2023-08-02.png" type="" alt="git"  />
This picture describe what is git, imagine your working direction of your project, when you want to try something new and don&rsquo;t want to break and manually merge new feature to your development, create a branch, like parallel universe, you can take another try in parallel universe, after that, you can merge those branch to your <strong>main</strong> branch or simply delete the branch. <em><strong>&ldquo;Branch is cheap&rdquo;</strong></em>.</p>
<h1 id="basic-usage">basic usage</h1>
<p>convert current directory into git repo, all subdirectory will be managed by git</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git init 
</span></span></code></pre></div><p>You can check which file is being changed</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git status
</span></span></code></pre></div><p>We say the chagne is state when you commit it, before commit, you have to add the change to git.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git add &lt;file1&gt; &lt;directory1&gt; &lt;directory2&gt; <span class="c1"># add changed directory and file to git index</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;commit message for this change &#34;</span>
</span></span></code></pre></div><p>Usually the commit will not longer than 50 words as to summarize the change you have make, if you have additonal information about this change, you can add notes to commit</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git notes add &lt;commit&gt;
</span></span></code></pre></div><p>To have a overview of commit, you can check git log</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git log &lt;commit&gt;
</span></span></code></pre></div><p>Once you commit the change, the branch add a node, like check point of game, you can reset the change by reset the commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset &lt;commit index&gt; <span class="c1"># reset the commit and unstate the change, working directory leave unchanged </span>
</span></span></code></pre></div><p>Use option <code>--hard</code> to apply revert the directory also</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git reset --hard &lt;commit index&gt; <span class="c1"># reset the commit and unstate the change, working directory change back to the state of that commit</span>
</span></span></code></pre></div><p><strong>Be careful the change between HEAD and the commit going to revert by <code>git reset</code> will be lost, extremely careful to use with the flag <code>--hard</code></strong></p>
<p>Create new branch to test new feature. This branch&rsquo;s working directory will same as the last state of current branch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git branch &lt;feature1&gt; <span class="c1"># create new branch</span>
</span></span></code></pre></div><p>Then main branch is called <strong>main</strong>. You can switch branch if there is not change unstated, otherwise, you have to commit the change first.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git switch &lt;branch name&gt; <span class="c1"># git branch name</span>
</span></span></code></pre></div><p>You can merge branch to other branch. You need to first checkout the branch you want to merge to.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git checkout &lt;branch merge to&gt;
</span></span></code></pre></div><p>Then you can merge two branches</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git merge &lt;branch going to be merged&gt;
</span></span></code></pre></div><p>Above git command is enough for version control your config, to get with git, it is best to try it, use it. If you afraid your config break, backup it before version control.</p>
<h1 id="usage">Usage</h1>
<p>Neovim community often post some config that is fully configured in lua instead of vimscript, however, you have to make a lot of change, if you want to keep vimscript config separately, try to create a branch call <strong>&ldquo;lua&rdquo;</strong> and you don&rsquo;t have to merge this branch if unnecessary.</p>
<p>I want to try an plugins call <a href="https://github.com/epwalsh/obsidian.nvim">obsidian.nvim</a>, which use <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a> as completion frontend, I use <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> at that time, so I try to use <strong>nvim-cmp</strong>, you can find more in <a href="../vim-4">this blog</a></p>
<p>If you want to try new plugins without breaking your current config, you can create a branch call <strong>experiment</strong>, before apply change to <strong>main</strong>, test it in <strong>experiment</strong> branch first, later you can merge the change to from <strong>experiment</strong> to <strong>main</strong>. The benefits of this approach is that if you don&rsquo;t want to fix the problem of new plugins now, you can still fallback to your stable, working config, fix the issue when you have free.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Another attribute to use Vim</title>
      <link>https://sokinpui.github.io/Blog/post/vim1-usingvimintro/</link>
      <pubDate>Wed, 02 Aug 2023 13:18:11 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim1-usingvimintro/</guid>
      <description>Ha? you want productivity? Vim is useful only when you edit you vim configuration!</description>
      <content:encoded><![CDATA[<p>Do you still remember why you choose one editor, because it get the job done? Or its extenability? Or its plugins ecosystem? My first editor is VSCode, introduced by CS50, back to those day, I regard VSCode is the only tools exist on earth that can write code. But I am scared by its UI, there is too much button, too many options. <em>In the future, I find VSCode is defintily one of the easiest get into and out of the box editor.</em> &ldquo;What does plugin means? What is auto pairs? What is completion?&rdquo; I don&rsquo;t understand those terms, I am too young to know manual exist and google for help.</p>
<p>The chance I know Vim is from university Unix talk, it is the first time I know one can navigation using hjkl instead of arrow key. I can&rsquo;t describe how excited I was, since I can&rsquo;t blindtype arrow key, everytime I press arrow I have to look at the keyboard and find them. Although I still use Vim now, I don&rsquo;t feel their is significant productivity increment, since Vim modal editing is avalible many where, I keep using vim simply because changing behaviour of the editor just feel more natural on Vim/Neovim.</p>
<h1 id="the-myth-of-productivity-about-using-vim">The myth of productivity about using Vim</h1>
<p>Many of user claims that full keyboard navigation is more efficient than mouse + keyboard hyper setup. I used to agree so, but the longer time I work with my computer, the more limitation I can feel of being full keyboard navigation. Actually it must be vary from people, one may live in terminal, another one may live in their browser. There is no same definition for productivity, we should not keep using full keyboard navigation as the biggest selling point of Vim. In my understanding, the reason Vim is over other editor only occur if you fully embrance its ecosystem, some Vim command, or some vimsciprt and lua plugin, that is petty but just make your experience different. When you familiar with your editor, you can easily make some change to fullfill you new requirement, this type of productivity is difficult to clone to other tools once you get into one deeply.</p>
<p>Since I use Vim mostly for writing, or note taking. I have install many plugins that can help writing code, yes they do increase my productivity, but only when I use Vim to configure Vim.( It is my personal fault ) Like one of the plugin <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> is only helpful when I navigate in lua config modual.( Of course it is my case ). However some do significantly increase my productivity. They are auto completion, I can&rsquo;t leave them when writing anymore. By the way, it can done with any modern editor, not Vim stand out here.</p>
<h1 id="the-truth-of-using-vim">The truth of using Vim</h1>
<p>Vim plugin is extremely useful when configure Vim, if I don&rsquo;t config, restructure config, plugin become less useful, but if I don&rsquo;t config Vim, Vim become less useful, If Vim is not useful, Why I still need to use Vim? Vim is actually time-sink, because you can explore so much function with vim. No matter plugins or built-in function, you have so much to tweak. So, why don&rsquo;t take any attribute to use Vim, Vim as toy, make fun with it, don&rsquo;t care about productivity!</p>
<p>Vim modal editing is about muscale memory, you have to put time to practice and try to work with this style of typing. I don&rsquo;t think reading many tutorial will help you learn Vim. Walking  though those long long Vim tutorial will only scare you. Instead, try to read the manual or google for help only when you need them.</p>
<p>As mentioned above, you don&rsquo;t have to build a prefect vim config to work, vanilla vim already quite good only lacking personalized config. Vim distro may obsolute you to use vim for the first time, because you have too many concept need to understand, without the context and background of using Vim, you may find difficult when try to udnerstand terms, or ignore some powerful features, Those Vim distro is more than just editing, they emphasize config and plugins packed together.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tips for merging from vim-plug to lazy.nvim</title>
      <link>https://sokinpui.github.io/Blog/post/vim-4/</link>
      <pubDate>Sat, 29 Jul 2023 23:58:37 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim-4/</guid>
      <description>Tips and issue I discovered during mergation. Hope to save someone&amp;#39;s time in the future.</description>
      <content:encoded><![CDATA[<p>Tips and issue I discovered during mergation. Hope to save someone&rsquo;s time in the future.</p>
<h1 id="why-lazynvim">Why lazy.nvim</h1>
<p>This is a long story, shall we start from another application <a href="https://obsidian.md/">obsidian</a>. I use <strong>obsidian</strong> for notes taking. I want some faster, non-repeative and easier note editing tools, and therefor I use some editor as my obsidian editing engine, in my case, Neovim Setup autocompletion and snippets in Neovim is always easier than same setup on obsidian. In Neovim, we have <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>, <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a> and <a href="https://github.com/ms-jpq/coq_nvim">coq_nvim</a> etc&hellip; And you have many snippets source. However, I cannot easily insert link to files as well as link to header in Vim. Although coc.nvim already provide some <a href="https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources#completion-sources">source</a>, lacking obsidian. Then I google for solution, I found <a href="https://github.com/epwalsh/obsidian.nvim">obsidian.nvim</a>, which say it provide link completion source for <strong>nvim-cmp</strong>
<img loading="lazy" src="/Blog/post/vim-4/obsidian-nvim.png" type="" alt="obsidian-nvim"  /></p>
<p>Then I have look at nvim-cmp, It separate autocompletion front end and back end, user have too integrate them manually. In terms of personalization, it provide more free. It terms of out-of-box, it is bad. If only insert link to relative file, <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> with some tweaks can do so.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="c">&#34;find the root git repo, in case of obsidian, it is the vault</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; insert relative path</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">l</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span>&#39;<span class="nx">fd</span> <span class="p">--</span><span class="nx">type</span><span class="p">=</span><span class="nx">file</span> .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    \ $<span class="p">(</span><span class="nx">git</span> <span class="nx">rev</span><span class="p">-</span><span class="nx">parse</span> <span class="p">--</span><span class="nx">show</span><span class="p">-</span><span class="nx">cdup</span> <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span><span class="nx">null</span><span class="p">)</span>&#39;<span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; insert full path</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">f</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span>&#39;<span class="nx">fd</span> <span class="p">--</span><span class="nx">type</span><span class="p">=</span><span class="nx">file</span> .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    \ $<span class="p">(</span><span class="nx">git</span> <span class="nx">rev</span><span class="p">-</span><span class="nx">parse</span> <span class="p">--</span><span class="nx">show</span><span class="p">-</span><span class="nx">toplevel</span> <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span><span class="nx">null</span><span class="p">)</span>&#39;<span class="p">)</span><span class="err">
</span></span></span></code></pre></div><p>But too much tweaks for insert header as smooth as obsidian.</p>
<p>So, I try nvim-cmp, I just find that many of Neovim specify plugins have to configurate in lua, it should be easier to manage those plugin with some Neovim plugin manager like <a href="https://github.com/folke/lazy.nvim">lavy.nvim</a>. (Many lua plugins provide snippets for installation and configuration at the same place, but require lazy.nvim or packer.nvim) Then, this is the beginning of this blog.</p>
<h1 id="issue">issue</h1>
<p>can&rsquo;t use pack anymore
require dependency if this is some plugins of plugins.</p>
<p>Lazy.nvim will and need to manage all your plugin, see the description from <strong>lazy.nvim</strong></p>
<blockquote>
<p>lazy.nvim does NOT use Neovim packages and even disables plugin loading completely (vim.go.loadplugins = false). It takes over the complete startup sequence for more flexibility and better performance.
In practice this means that step 10 of Neovim Initialization is done by Lazy:</p>
<p>All the plugins&rsquo; init() functions are executed
All plugins with lazy=false are loaded. This includes sourcing /plugin and /ftdetect files. (/after will not be sourced yet)
All files from /plugin and /ftdetect directories in you rtp are sourced (excluding /after)
All /after/plugin files are sourced (this includes /after from plugins)</p>
<p>Files from runtime directories are always sourced in alphabetical order.
So all the plugins installed with vim built-in plugins will not be loaded, or you have to add extra options when you calling:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span><span class="n">dir</span><span class="o">=</span><span class="s1">&#39;~/config/nvim/pack/*/start/Plugin&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="kc">true</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>when return the plugin table spec to <strong>lazy.nvim</strong>, if you use pack directory to manage personal scirpt or plugins like me, you have to consider move those plugins into your <code>$NVIMRUNTIMPATH</code> <code>~/.confg/nvim</code>. I merge them with simple bash script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">moveToRtp(){
</span></span><span class="line"><span class="cl">  for plugindir in $*; do
</span></span><span class="line"><span class="cl">    cd $plugindir
</span></span><span class="line"><span class="cl">    for file in $(find . -type f)
</span></span><span class="line"><span class="cl">      rtp=$(echo $(echo $file | sed &#34;s/\.\///&#34;) | sed &#34;s/\/.*$//&#34;)
</span></span><span class="line"><span class="cl">      cp file &#34;~/.config/nvim/$rtp&#34;
</span></span><span class="line"><span class="cl">    cd ..
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">moveToRtp Plugin1 Plugin2 Plugin3 ...
</span></span></code></pre></div><p>This simple script will can move plugins don&rsquo;t contain <code>/after/*</code>. I just merge <code>/after/*</code> manually.</p>
<h1 id="plugins-need-to-take-extra-care-durig-mergation">plugins need to take extra care durig mergation</h1>
<p>Some plugins configuration need special care when configure with <strong>lazy.nvim</strong>. Most of the case I found related to plugins&rsquo; compability with <em>lua</em>, I would recommend if the confiuration is already in vimscript, keep going with vimscript if you don&rsquo;t care performance loss(actually I don&rsquo;t know how much loss, maybe it is ignorable)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;some/plugin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">vim.cmd</span><span class="p">(</span><span class="s">[[
</span></span></span><span class="line"><span class="cl"><span class="s">            let g:plguinSettings = &#34;...&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">            noremap &lt;C-j&gt; &lt;Plug&gt;(plugin-do-something)
</span></span></span><span class="line"><span class="cl"><span class="s">        ]]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It should solve most of the problem and save time during mergation because you can avoid rewrite all configuration in lua when vim plugins usually provide vimscript api for configuration. Due to the difference between data structure of vimscript and lua, <code>vim.g.setttingAPI = &quot;...&quot;</code> may not always work.</p>
<h2 id="1-fernvimhttpsgithubcomlambdalisuefernvim">1. <a href="https://github.com/lambdalisue/fern.vim">fern.vim</a></h2>
<blockquote>
<p>Fern (furn) is a general purpose asynchronous tree viewer written in pure Vim script.
If you use fern with some <a href="https://github.com/lambdalisue/fern.vim/wiki/Plugins">external plugins</a>, you should remember add them as dependency of <strong>fern.vim</strong>:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;lambdalisue/fern.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;lambdalisue/fern-hijack.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;lambdalisue/fern-mapping-project-top.vim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;sokinpui/my-fern-preview.vim&#34;</span><span class="p">,</span>    
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Otherwise, you may see error like:
<img loading="lazy" src="/Blog/post/vim-4/fern-issue.png" type="" alt="fern-issue.png"  /></p>
<h2 id="2-fzfvimhttpsgithubcomjunegunnfzfvim">2. <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a></h2>
<p>If install <strong>fzf.vim</strong> with vim-plug, I don&rsquo;t have to install <a href="https://github.com/junegunn/fzf">fzf</a> if I have install fzf locally outside vim. However, you should do so in <strong>lazy.nvim</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;junegunn/fzf.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">build</span> <span class="o">=</span> <span class="s2">&#34;./install --all&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;junegunn/fzf&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Otherwise, error again:
<img loading="lazy" src="/Blog/post/vim-4/fzf.vim.png" type="" alt="fzf"  /></p>
<h2 id="3-visual-multihttpsgithubcommg979vim-visual-multi">3. <a href="https://github.com/mg979/vim-visual-multi">visual-multi</a></h2>
<p>It is a mulit cursor plugin for Vim. If you remap key like me, I remap <code>s</code> to <code>c</code> in multi-cursor mode. In lua, you should use</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;mg979/vim-visual-multi&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">branch</span> <span class="o">=</span> <span class="s2">&#34;master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">VM_custom_remaps</span> <span class="o">=</span> <span class="p">{</span> <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>instead of <code>let g:VM_custom_remaps = { 's' = 'c' }</code> in vimscript.</p>
<h2 id="4-auto-pairshttpsgithubcomjiangmiaoauto-pairs">4. <a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;LunarWatcher/auto-pairs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">AutoPairs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;[&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;]&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;{&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;}&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#39;&#39;] = &#39;&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#34;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;`&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;`&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&lt;!--&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;--&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;/*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;*/&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;```&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;```&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s2">&#34;&#39;&#39;&#39;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;&#39;&#39;&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Since offical version in vimscript is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">AutoPairs</span> <span class="p">=</span> {<span class="s1">&#39;(&#39;</span>:<span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="s1">&#39;[&#39;</span>:<span class="s1">&#39;]&#39;</span><span class="p">,</span> <span class="s1">&#39;{&#39;</span>:<span class="s1">&#39;}&#39;</span><span class="p">,</span><span class="s2">&#34;&#39;&#34;</span>:<span class="s2">&#34;&#39;&#34;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span>:<span class="s1">&#39;&#34;&#39;</span><span class="p">,</span> <span class="s2">&#34;`&#34;</span>:<span class="s2">&#34;`&#34;</span><span class="p">,</span> <span class="s1">&#39;&lt;!--&#39;</span>:<span class="s1">&#39;--&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;/*&#39;</span>:<span class="s1">&#39;*/&#39;</span><span class="p">,</span> <span class="s1">&#39;```&#39;</span>:<span class="s1">&#39;```&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;&#34;&#34;&#39;</span>:<span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">,</span> <span class="s2">&#34;&#39;&#39;&#39;&#34;</span>:<span class="s2">&#34;&#39;&#39;&#39;&#34;</span>}<span class="err">
</span></span></span></code></pre></div><h2 id="5-sandwich-vimhttpsgithubcommachakannvim-sandwich">5. <a href="https://github.com/machakann/vim-sandwich">sandwich-vim</a></h2>
<p>I don&rsquo;t know why <code>g:sandwich_no_default_key_mappings</code> cannnot set via <strong>Lazy.nvim</strong> with lua. I have to do so to take configuration work</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;machakann/vim-sandwich&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.cmd</span><span class="p">(</span><span class="s">[[
</span></span></span><span class="line"><span class="cl"><span class="s">let g:sandwich_no_default_key_mappings = 1
</span></span></span><span class="line"><span class="cl"><span class="s">&#34; my mapping
</span></span></span><span class="line"><span class="cl"><span class="s">...
</span></span></span><span class="line"><span class="cl"><span class="s">...
</span></span></span><span class="line"><span class="cl"><span class="s">]]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>and then in <code>init.lua</code>, I should call this block with.config</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">require(&#34;lazy&#34;).setup({
</span></span><span class="line"><span class="cl">    require(&#34;plugins.sandwich&#34;).config,
</span></span><span class="line"><span class="cl">},{})
</span></span></code></pre></div><h2 id="6-ultisnipshttpsgithubcomsirverultisnips-x-nvim-cmphttpsgithubcomhrsh7thnvim-cmp">6. <a href="https://github.com/SirVer/ultisnips">Ultisnips</a> x <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a></h2>
<p>The <code>tab</code> will sucks if you have setting wrong, this part is the most time-consumming part to debug, I nearly give up with nvim-cmp because of its bad properties.</p>
<p>In <strong>Ultisnips</strong>, you can change the key for expand and jump, since I don&rsquo;t like press <code>&lt;CR&gt;</code> to confirm completion selection, I use <code>&lt;C-j&gt;</code> to expand and jump forward in snips, <code>&lt;C-k&gt;</code> to jump backward.</p>
<p>At the beginning, I try follow plugin table spec for nvim-cmp:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SirVer/ultisnips&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;hrsh7th/nvim-cmp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-buffer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;FelipeLema/cmp-async-path&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-nvim-lsp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--&#39;hrsh7th/cmp-cmdline&#39;,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-calc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;onsails/lspkind-nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;quangnguyen30192/cmp-nvim-ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">-- optional call to setup (see customization section)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;cmp_nvim_ultisnips&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">                <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">after</span> <span class="o">=</span> <span class="s2">&#34;SirVer/ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">has_words_before</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">local</span> <span class="n">line</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_win_get_cursor</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="kr">return</span> <span class="n">col</span> <span class="o">~=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_get_lines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="kc">true</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span><span class="n">sub</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span><span class="n">match</span><span class="p">(</span><span class="s2">&#34;%s&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;cmp&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--local lspkind = require(&#39;lspkind&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">cmp.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">snippet</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">expand</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">vim.fn</span><span class="p">[</span><span class="s2">&#34;UltiSnips#Anon&#34;</span><span class="p">](</span><span class="n">args.body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;buffer&#39;</span> <span class="p">,</span> <span class="n">keyword_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;nvim_lsp&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;ultisnips&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">--{ name = &#39;cmdline&#39; },</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;async_path&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;calc&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">mapping</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">.</span><span class="n">preset.insert</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_next_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">elseif</span> <span class="n">has_words_before</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;S-Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_prev_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>Pay attention with this three line</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span></code></pre></div><p>No matter in lua or in vimscript</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsExpandTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpForwardTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpBackwardTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span><span class="err">
</span></span></span></code></pre></div><p>The tab will break, I don&rsquo;t know why, with above three lines, tab will act like:
<img loading="lazy" src="/Blog/post/vim-4/snips_jump.gif" type="" alt="snip_jump1"  /></p>
<p>However, if those three line is out of management of <strong>lazy.nvim</strong>, the tab just work!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SirVer/ultisnips&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;hrsh7th/nvim-cmp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-buffer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;FelipeLema/cmp-async-path&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-nvim-lsp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--&#39;hrsh7th/cmp-cmdline&#39;,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-calc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;onsails/lspkind-nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;quangnguyen30192/cmp-nvim-ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">-- optional call to setup (see customization section)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;cmp_nvim_ultisnips&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">                <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">after</span> <span class="o">=</span> <span class="s2">&#34;SirVer/ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">has_words_before</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">local</span> <span class="n">line</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_win_get_cursor</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="kr">return</span> <span class="n">col</span> <span class="o">~=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_get_lines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="kc">true</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span><span class="n">sub</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span><span class="n">match</span><span class="p">(</span><span class="s2">&#34;%s&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;cmp&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--local lspkind = require(&#39;lspkind&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">cmp.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">snippet</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">expand</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">vim.fn</span><span class="p">[</span><span class="s2">&#34;UltiSnips#Anon&#34;</span><span class="p">](</span><span class="n">args.body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;buffer&#39;</span> <span class="p">,</span> <span class="n">keyword_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;nvim_lsp&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;ultisnips&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">--{ name = &#39;cmdline&#39; },</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;async_path&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;calc&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">mapping</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">.</span><span class="n">preset.insert</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_next_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">elseif</span> <span class="n">has_words_before</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;S-Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_prev_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>Everythin just work!
<img loading="lazy" src="/Blog/post/vim-4/snipe_jump_right.gif" type="" alt="snip-jump2"  /></p>
<h1 id="benefits">benefits</h1>
<p>The plugins is more structured, so navigation and group plugins is easier than <strong>vim-plug</strong>, with some <strong>plugin</strong> like <strong>fzf.vim</strong>, I can easily jump to file I want, and separate plugin config into different files according to their purpose. Before using <strong>lazy.nvim</strong> all plugins config are store in the same file call <code>plugins.vim</code>, now modualize like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">├── config
</span></span><span class="line"><span class="cl">│   └── lualine.lua
</span></span><span class="line"><span class="cl">├── lazy-init.lua
</span></span><span class="line"><span class="cl">└── plugins
</span></span><span class="line"><span class="cl">    ├── autocompletion.lua
</span></span><span class="line"><span class="cl">    ├── cleverf.lua
</span></span><span class="line"><span class="cl">    ├── colorscheme.lua
</span></span><span class="line"><span class="cl">    ├── fern.lua
</span></span><span class="line"><span class="cl">    ├── fzf.lua
</span></span><span class="line"><span class="cl">    ├── lsp.lua
</span></span><span class="line"><span class="cl">    ├── markdown.lua
</span></span><span class="line"><span class="cl">    ├── multi_cursor.lua
</span></span><span class="line"><span class="cl">    ├── nerdfont.lua
</span></span><span class="line"><span class="cl">    ├── pairs.lua
</span></span><span class="line"><span class="cl">    ├── sandwich.lua
</span></span><span class="line"><span class="cl">    └── treesitter.lua
</span></span></code></pre></div><h1 id="finall-thoughts">Finall thoughts</h1>
<p>As most of plugin I used are written for both Vim and Neovim, most of them are still providing vimscript api to config, there are only some little surprise issue from prefect.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim Plugins introduction</title>
      <link>https://sokinpui.github.io/Blog/post/vim-3/</link>
      <pubDate>Sun, 23 Jul 2023 18:24:05 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim-3/</guid>
      <description>Desc Text.</description>
      <content:encoded><![CDATA[<p>Some Vim plugins may save your time. You can use any plugins manager, even the built-in <code>pack</code>.</p>
<h1 id="file-explorer-fernhttpsgithubcomlambdalisuefernvim">File explorer: <a href="https://github.com/lambdalisue/fern.vim">fern</a></h1>
<p>Not too helpful, but I find it is more eye-candy than built-in explorer <code>netrw</code>. Also, <strong>fern</strong> is an asynchronous tree viewer, so it should be smoother than <code>netrw</code> in theory. <strong>fern</strong> allow you change the icon to whatever you like.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">mark_symbol</span>                       <span class="p">=</span> <span class="s1">&#39;●&#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">renderer</span>#<span class="nx">default</span>#<span class="nx">collapsed_symbol</span> <span class="p">=</span> <span class="s1">&#39;▷ &#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">renderer</span>#<span class="nx">default</span>#<span class="nx">expanded_symbol</span>  <span class="p">=</span> <span class="s1">&#39;▼ &#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">renderer</span>#<span class="nx">default</span>#<span class="nx">leading</span>          <span class="p">=</span> <span class="s1">&#39; &#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">renderer</span>#<span class="nx">default</span>#<span class="nx">leaf_symbol</span>      <span class="p">=</span> <span class="s1">&#39; &#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fern</span>#<span class="nx">renderer</span>#<span class="nx">default</span>#<span class="nx">root_symbol</span>      <span class="p">=</span> <span class="s1">&#39;~ &#39;</span><span class="err">
</span></span></span></code></pre></div><p>Will look like this:
<img loading="lazy" src="/Blog/post/vim-3/fern-demo.png" type="" alt="fern-demo"  /></p>
<p><strong>Fern</strong> have some plugins extend its functionality, like this <a href="https://github.com/lambdalisue/fern-hijack.vim">fern plugin</a> replace <code>netrw</code> when you open directory using vim. <a href="https://github.com/yuki-yano/fern-preview.vim">preview file in float window</a>. <a href="https://github.com/lambdalisue/fern-hijack.vim">This plugin</a> allow you map key jump to the root of project (by default is ^). You can find more fern plugin <a href="https://github.com/topics/fern-vim-plugin">here</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;&lt;</span><span class="nx">expr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \ <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">my</span><span class="p">-</span><span class="nx">open</span><span class="p">-</span><span class="nx">expand</span><span class="p">-</span><span class="nx">collapse</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \ <span class="nx">fern</span>#<span class="nx">smart</span>#<span class="nx">leaf</span><span class="p">(</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \   <span class="s2">&#34;\&lt;Plug&gt;(fern-action-open:select)&#34;</span><span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \   <span class="s2">&#34;\&lt;Plug&gt;(fern-action-expand)&#34;</span><span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \   <span class="s2">&#34;\&lt;Plug&gt;(fern-action-collapse)&#34;</span><span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \ <span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">new</span><span class="p">-</span><span class="nx">and</span><span class="p">-</span><span class="nx">edit</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>      \ <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">new</span><span class="p">-</span><span class="nx">file</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>      \ <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">open</span>:<span class="nx">select</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">my</span><span class="p">-</span><span class="nx">open</span><span class="p">-</span><span class="nx">expand</span><span class="p">-</span><span class="nx">collapse</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">TAB</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">my</span><span class="p">-</span><span class="nx">open</span><span class="p">-</span><span class="nx">expand</span><span class="p">-</span><span class="nx">collapse</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">h</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">collapse</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">l</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">expand</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="m">2</span><span class="p">-</span><span class="nx">LeftMouse</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">my</span><span class="p">-</span><span class="nx">open</span><span class="p">-</span><span class="nx">expand</span><span class="p">-</span><span class="nx">collapse</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">o</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">new</span><span class="p">-</span><span class="nx">and</span><span class="p">-</span><span class="nx">edit</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">nd</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">new</span><span class="p">-</span><span class="nx">dir</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">D</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">remove</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">rn</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">rename</span><span class="p">)</span><span class="nx">l</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">s</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">open</span>:<span class="nx">split</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">v</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">open</span>:<span class="nx">vsplit</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">r</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">reload</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">nowait</span><span class="p">&gt;</span> . <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">hidden</span>:<span class="nx">toggle</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">nowait</span><span class="p">&gt;</span> <span class="p">&lt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">leave</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">nowait</span><span class="p">&gt;</span> <span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">enter</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34;enter project root, find the toppest directory contain .git</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> ^ <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">project</span><span class="p">-</span><span class="nx">top</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; preview file</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">&#34;nnoremap &lt;silent&gt; &lt;buffer&gt; p     &lt;Plug&gt;(fern-action-preview:toggle)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">p</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">preview</span>:<span class="nx">auto</span>:<span class="nx">toggle</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">d</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">preview</span>:<span class="nx">scroll</span>:<span class="nx">down</span>:<span class="nx">half</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">u</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">action</span><span class="p">-</span><span class="nx">preview</span>:<span class="nx">scroll</span>:<span class="nx">up</span>:<span class="nx">half</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34;smart [q]uit</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">quit</span><span class="p">-</span><span class="nx">or</span><span class="p">-</span><span class="nx">close</span><span class="p">-</span><span class="nx">preview</span><span class="p">)</span> <span class="nx">fern_preview</span>#<span class="nx">smart_preview</span><span class="p">(</span><span class="s2">&#34;\&lt;Plug&gt;(fern-action-preview:close)&#34;</span><span class="p">,</span> <span class="s2">&#34;:q\&lt;CR&gt;&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">buffer</span><span class="p">&gt;</span> <span class="nx">q</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">fern</span><span class="p">-</span><span class="nx">quit</span><span class="p">-</span><span class="nx">or</span><span class="p">-</span><span class="nx">close</span><span class="p">-</span><span class="nx">preview</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></div><h1 id="horizontal-motion-clever-fhttpsgithubcomrhysdclever-fvim">Horizontal motion: <a href="https://github.com/rhysd/clever-f.vim">clever-f</a></h1>
<p><strong>clever-f</strong> extend the Vim&rsquo;s f, F, t and T function, you can press <code>f</code> to jump instead <code>;</code>, similarly, use <code>F</code> to jump backward like <code>,</code>. <strong>clever-f</strong> allow you jump multi lines by default, super convenient when <code>dfn</code> cross line.</p>
<p>Since many symbol ({, (, &ldquo;, and so on) keys are hard to press. <strong>clever-f</strong> by default map f; to match any symbol, super clever!. <em>(I map to <!-- raw HTML omitted -->)</em>
<img loading="lazy" src="/Blog/post/vim-3/clever-f-symbol-jump.gif" type="" alt="symbol-jump-demo"  /></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">clever_f_smart_case</span>              <span class="p">=</span> <span class="m">1</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">clever_f_across_no_line</span>          <span class="p">=</span> <span class="m">0</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">clever_f_chars_match_any_signs</span>   <span class="p">=</span> <span class="s2">&#34;\&lt;TAB&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">clever_f_repeat_last_char_inputs</span> <span class="p">=</span> [ <span class="s2">&#34;\&lt;CR&gt;&#34;</span> ]<span class="err">
</span></span></span></code></pre></div><h1 id="multi-cursor-vim-visual-multihttpsgithubcommg979vim-visual-multi">multi cursor: <a href="https://github.com/mg979/vim-visual-multi">vim-visual-multi</a></h1>
<p><strong>vim-visual-multi</strong> bring this common feature from others editor to Vim. Sometimes it is convenient and more intuitive than <code>:s/pattern/changes/&lt;opt&gt;</code> or visual block mode.</p>
<p>Use a, A, i, O, to insert text like in Vim normal mode. Use x to delete selection. Use r to replace all text in selection like r in Vim visual mode. Press n/N to get next/previous occurrence. Press q to skip current and get next occurrence. Press Q to remove current cursor/selection.</p>
<p>By default, it start multi cursor by pressing <code>&lt;C-n&gt;</code>.(I map it to <code>&lt;leader&gt;n</code>) The most exciting of this plugins is, it has integrated with auto-completion like <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>!
<img loading="lazy" src="/Blog/post/vim-3/multi-cursor-demo.gif" type="" alt="multi-cursor-demo"  /></p>
<h1 id="fzf-x-vim-fzfvimhttpsgithubcomjunegunnfzfvim">fzf x vim: <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a></h1>
<p><strong>fzf.vim</strong> is the comand line tools <a href="https://github.com/junegunn/fzf">fzf</a> wrapper for vim. Fuzzy finder result will display in Vim float windows. Powerful tools to jumps and navigate project and files within Vim.
From official website, <strong>fzf.vim</strong> can fuzzy find all of them:</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>List</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:Files [PATH]</code></td>
<td>Files (runs <code>$FZF_DEFAULT_COMMAND</code> if defined)</td>
</tr>
<tr>
<td><code>:GFiles [OPTS]</code></td>
<td>Git files (<code>git ls-files</code>)</td>
</tr>
<tr>
<td><code>:GFiles?</code></td>
<td>Git files (<code>git status</code>)</td>
</tr>
<tr>
<td><code>:Buffers</code></td>
<td>Open buffers</td>
</tr>
<tr>
<td><code>:Colors</code></td>
<td>Color schemes</td>
</tr>
<tr>
<td><code>:Ag [PATTERN]</code></td>
<td>[ag][ag] search result (<code>ALT-A</code> to select all, <code>ALT-D</code> to deselect all)</td>
</tr>
<tr>
<td><code>:Rg [PATTERN]</code></td>
<td>[rg][rg] search result (<code>ALT-A</code> to select all, <code>ALT-D</code> to deselect all)</td>
</tr>
<tr>
<td><code>:RG [PATTERN]</code></td>
<td>[rg][rg] search result; relaunch ripgrep on every keystroke</td>
</tr>
<tr>
<td><code>:Lines [QUERY]</code></td>
<td>Lines in loaded buffers</td>
</tr>
<tr>
<td><code>:BLines [QUERY]</code></td>
<td>Lines in the current buffer</td>
</tr>
<tr>
<td><code>:Tags [QUERY]</code></td>
<td>Tags in the project (<code>ctags -R</code>)</td>
</tr>
<tr>
<td><code>:BTags [QUERY]</code></td>
<td>Tags in the current buffer</td>
</tr>
<tr>
<td><code>:Marks</code></td>
<td>Marks</td>
</tr>
<tr>
<td><code>:Jumps</code></td>
<td>Jumps</td>
</tr>
<tr>
<td><code>:Windows</code></td>
<td>Windows</td>
</tr>
<tr>
<td><code>:Locate PATTERN</code></td>
<td><code>locate</code> command output</td>
</tr>
<tr>
<td><code>:History</code></td>
<td><code>v:oldfiles</code> and open buffers</td>
</tr>
<tr>
<td><code>:History:</code></td>
<td>Command history</td>
</tr>
<tr>
<td><code>:History/</code></td>
<td>Search history</td>
</tr>
<tr>
<td><code>:Snippets</code></td>
<td>Snippets ([UltiSnips][us])</td>
</tr>
<tr>
<td><code>:Commits [LOG_OPTS]</code></td>
<td>Git commits (requires [fugitive.vim][f])</td>
</tr>
<tr>
<td><code>:BCommits [LOG_OPTS]</code></td>
<td>Git commits for the current buffer; visual-select lines to track changes in the range</td>
</tr>
<tr>
<td><code>:Commands</code></td>
<td>Commands</td>
</tr>
<tr>
<td><code>:Maps</code></td>
<td>Normal mode mappings</td>
</tr>
<tr>
<td><code>:Helptags</code></td>
<td>Help tags <!-- raw HTML omitted --><a href="#helptags">1</a><!-- raw HTML omitted --></td>
</tr>
<tr>
<td><code>:Filetypes</code></td>
<td>File types</td>
</tr>
</tbody>
</table>
<p>You can map any of above commands to your faviour key bindings.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">ff</span> :<span class="nx">Files</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">fb</span> :<span class="nx">Buffers</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">fs</span> :<span class="nx">Lines</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">fp</span> :<span class="nx">Rg</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">f</span><span class="sr">/ :History/</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">f</span>: :<span class="nx">History</span>:<span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">fh</span> :<span class="nx">Helptags</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">fa</span> :<span class="nx">Files</span> $<span class="nx">HOME</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span></code></pre></div><p>If you want to change the size of float window, you can change the value of <code>height</code> and <code>width</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fzf_preview_window</span> <span class="p">=</span> [<span class="s1">&#39;right,50%&#39;</span><span class="p">,</span> <span class="s1">&#39;ctrl-/&#39;</span>]<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fzf_layout</span>         <span class="p">=</span> {<span class="s1">&#39;window&#39;</span>: { <span class="s1">&#39;width&#39;</span>: <span class="m">0</span>.<span class="m">9</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span>: <span class="m">1</span> }}<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fzf_buffers_jump</span>   <span class="p">=</span> <span class="m">1</span><span class="err">
</span></span></span></code></pre></div><p>If you don&rsquo;t like float window but want a side peek, just modifiy the code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="c">&#34; use tmux float window</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fzf_layout</span> <span class="p">=</span> { <span class="s1">&#39;tmux&#39;</span>: <span class="s1">&#39;-p90%,100%&#39;</span> }<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; down, up, right, left</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fzf_layout</span> <span class="p">=</span> { <span class="s1">&#39;down&#39;</span>: <span class="s1">&#39;~40%&#39;</span> }<span class="err">
</span></span></span></code></pre></div><p>Find vim help manual with <strong>fzf.vim</strong>:
<img loading="lazy" src="/Blog/post/vim-3/fzf-demo.gif" type="" alt="fzf-demo"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Simple hacking and tips to reduce pain in Vim</title>
      <link>https://sokinpui.github.io/Blog/post/vim-2/</link>
      <pubDate>Sun, 23 Jul 2023 10:18:20 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim-2/</guid>
      <description>Simple vimscript that enhance user experience</description>
      <content:encoded><![CDATA[<p>Aims to less pain when using vim, if you find other plugins perform the same functionality, I would say use that plugin instead, because plugins usually provide broader function and easier for management compare to discrete vimscript.</p>
<h1 id="highlight-in-search">Highlight in search</h1>
<p>Want Highlight when searching? Dirty but workable solution can map search key into:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">nnoremap</span> <span class="sr">/ :set hlsearch&lt;cr&gt;/</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> ? :<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span>?<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="nx">n</span> :<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="nx">n</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> <span class="nx">N</span> :<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="nx">N</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> * :<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span>*<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">nnoremap</span> # :<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span>#<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">vnoremap</span> * *:<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">vnoremap</span> # #:<span class="nx">set</span> <span class="nx">hlsearch</span><span class="p">&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span></code></pre></div><p>Delete highlight after search:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">autocmd</span> <span class="nx">insertenter</span> * <span class="nx">set</span> <span class="nx">nohlsearch</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">autocmd</span> <span class="nx">textchanged</span> * <span class="nx">set</span> <span class="nx">nohlsearch</span><span class="err">
</span></span></span></code></pre></div><p>Clear highlight when enter insert mode, clear highlight when any text being edited.</p>
<h1 id="hide-cursorline-in-inactive-window">Hide Cursorline in inactive window</h1>
<p>Do you find inactive window still have cursorline shown? Hack with following code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">augroup</span> <span class="nx">CursorLine</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span><span class="p">!</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">VimEnter</span> * <span class="nx">setlocal</span> <span class="nx">cursorline</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">WinEnter</span> * <span class="nx">setlocal</span> <span class="nx">cursorline</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">BufWinEnter</span> * <span class="nx">setlocal</span> <span class="nx">cursorline</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">WinLeave</span> * <span class="nx">setlocal</span> <span class="nx">nocursorline</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">augroup</span> <span class="nx">END</span><span class="err">
</span></span></span></code></pre></div><h1 id="open-help-page-in-split-window">Open help page in split window</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">augroup</span> <span class="nx">Init_buffer</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span><span class="p">!</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">BufEnter</span> *.<span class="nx">txt</span> <span class="k">if</span> &amp;<span class="nx">buftype</span> <span class="p">==</span> <span class="s1">&#39;help&#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        \ <span class="p">|</span> <span class="k">if</span> <span class="nx">winnr</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span> <span class="p">&lt;=</span> <span class="m">2</span> <span class="p">|</span> <span class="nx">wincmd</span> <span class="nx">H</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        \ <span class="p">|</span> <span class="k">endif</span> <span class="p">|</span> <span class="k">endif</span>  <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">augroup</span> <span class="nx">END</span><span class="err">
</span></span></span></code></pre></div><p>Since I seldom use vim split window in vim, if I really need to split window, I will first use tmux split window. When I need Vim manual, I also want to know what is happening on my current buffer.</p>
<h1 id="cursor-back-to-last-position">Cursor back to last position</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">au</span> <span class="nx">BufReadPost</span> * <span class="k">if</span> <span class="nx">line</span><span class="p">(</span><span class="s2">&#34;&#39;\&#34;&#34;</span><span class="p">)</span> <span class="p">&gt;</span> <span class="m">1</span> &amp;&amp; <span class="nx">line</span><span class="p">(</span><span class="s2">&#34;&#39;\&#34;&#34;</span><span class="p">)</span> <span class="p">&lt;=</span> <span class="nx">line</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    \ <span class="p">|</span> <span class="nx">exe</span> <span class="s2">&#34;normal! g&#39;\&#34;&#34;</span> <span class="p">|</span> <span class="k">endif</span><span class="err">
</span></span></span></code></pre></div><h1 id="find-digital">find digital</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">Leader</span><span class="p">&gt;</span><span class="nx">n</span> /\<span class="nx">d</span>\<span class="p">+&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></span></span></code></pre></div><p>A simple Vim regular expression hacking.</p>
<h1 id="paste-in-visual-mode-without-pollute-register">Paste in visual mode without pollute register</h1>
<p>Since paste in visual mode will first delete content, if you don&rsquo;t want to pollute your register and keep <code>p</code> the same content, following code may help you.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">xnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">p</span> <span class="c">&#34;_dP</span><span class="err">
</span></span></span></code></pre></div><h1 id="number-of-search-items-in-status-line">Number of search items in status line</h1>
<p>give more information when searching, you can know numbers of item you search, and the location. This simple hacking is provided by Vim manual, see <code>:help searchcount</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">function</span><span class="p">!</span> <span class="nx">s</span>:<span class="nx">update_searchcount</span><span class="p">(</span><span class="nx">timer</span><span class="p">)</span> <span class="nx">abort</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">if</span> <span class="nx">a</span>:<span class="nx">timer</span> <span class="p">==</span># <span class="nx">s</span>:<span class="nx">searchcount_timer</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nx">call</span> <span class="nx">searchcount</span><span class="p">(</span>#{<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>                    \ <span class="nx">recompute</span>: <span class="m">1</span><span class="p">,</span> <span class="nx">maxcount</span>: <span class="m">0</span><span class="p">,</span> <span class="nx">timeout</span>: <span class="m">100</span>}<span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nx">redrawstatus</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">endif</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">endfunction</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">statusline</span>#<span class="nx">LastSearchCount</span><span class="p">()</span> <span class="nx">abort</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">let</span> <span class="nx">result</span> <span class="p">=</span> <span class="nx">searchcount</span><span class="p">(</span>#{<span class="nx">recompute</span>: <span class="m">1</span>}<span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">if</span> <span class="nx">empty</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nx">return</span> <span class="s1">&#39;&#39;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">endif</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">if</span> <span class="nx">result</span>.<span class="nx">incomplete</span> <span class="p">==</span># <span class="m">1</span>     <span class="c">&#34; timed out</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="nx">return</span> <span class="nx">printf</span><span class="p">(</span><span class="s1">&#39; [%s] [?/??]&#39;</span><span class="p">,</span> @/<span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">elseif</span> <span class="nx">result</span>.<span class="nx">incomplete</span> <span class="p">==</span># <span class="m">2</span> <span class="c">&#34; max count exceeded</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="k">if</span> <span class="nx">result</span>.<span class="nx">total</span> <span class="p">&gt;</span> <span class="nx">result</span>.<span class="nx">maxcount</span> &amp;&amp;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>                    \  <span class="nx">result</span>.<span class="nx">current</span> <span class="p">&gt;</span> <span class="nx">result</span>.<span class="nx">maxcount</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            <span class="nx">return</span> <span class="nx">printf</span><span class="p">(</span><span class="s1">&#39; [%s] [&gt;%d/&gt;%d]&#39;</span><span class="p">,</span> @/<span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>                        \ <span class="nx">result</span>.<span class="nx">current</span><span class="p">,</span> <span class="nx">result</span>.<span class="nx">total</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="k">elseif</span> <span class="nx">result</span>.<span class="nx">total</span> <span class="p">&gt;</span> <span class="nx">result</span>.<span class="nx">maxcount</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            <span class="nx">return</span> <span class="nx">printf</span><span class="p">(</span><span class="s1">&#39; [%s] [%d/&gt;%d]&#39;</span><span class="p">,</span> @/<span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>                        \ <span class="nx">result</span>.<span class="nx">current</span><span class="p">,</span> <span class="nx">result</span>.<span class="nx">total</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>        <span class="k">endif</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="k">endif</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    <span class="nx">return</span> <span class="nx">printf</span><span class="p">(</span><span class="s1">&#39; [%s] [%d/%d]&#39;</span><span class="p">,</span> @/<span class="p">,</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>                \ <span class="nx">result</span>.<span class="nx">current</span><span class="p">,</span> <span class="nx">result</span>.<span class="nx">total</span><span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">endfunction</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> &amp;<span class="nx">statusline</span> ..<span class="p">=</span> &#39;%<span class="p">=</span>%<span class="m">-5</span>.{<span class="nx">statusline</span>#<span class="nx">LastSearchCount</span><span class="p">()</span>}<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \ %<span class="p">(</span>%<span class="nx">l</span><span class="p">,</span>%<span class="nx">c</span><span class="p">-</span>%<span class="nx">v</span>%<span class="p">)</span> %<span class="nx">p</span>%%&#39;<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">autocmd</span> <span class="nx">CursorMoved</span><span class="p">,</span><span class="nx">CursorMovedI</span> *<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \ <span class="k">let</span> <span class="nx">s</span>:<span class="nx">searchcount_timer</span> <span class="p">=</span> <span class="nx">timer_start</span><span class="p">(</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>            \   <span class="m">200</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="s1">&#39;s:update_searchcount&#39;</span><span class="p">))</span><span class="err">
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Vim less pain, setting you will google</title>
      <link>https://sokinpui.github.io/Blog/post/vim-1/</link>
      <pubDate>Fri, 21 Jul 2023 14:53:36 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim-1/</guid>
      <description>Basic setting often googled when first time using Vim/Neovim</description>
      <content:encoded><![CDATA[<p>Some setting you may google for it after you have started using vim. Add those line to you <code>.vimrc</code></p>
<p>If you use Neovim, it by default has some <a href="https://neovim.io/doc/user/diff.html">better setting</a> than vim, save you some time from google.</p>
<hr>
<h1 id="diabled-by-default">Diabled by default</h1>
<h2 id="1-search-and-match">1. search, and match</h2>
<p><code>set ignorecase</code>, ignorecase during matching</p>
<p><code>set smartcase</code>, smart match, match <code>Talk</code> and <code>talk</code> when you search <code>talk</code>, but only match <code>Talk</code>, when you search <code>Talk</code>.</p>
<h2 id="2-scrolling">2. scrolling</h2>
<p><code>set scrolloff=5</code>, leave 5 lines between top and bottom when scrolling.</p>
<p><code>set mousescroll=ver:5,hor:5</code>, scrolling 5 lines when using mouse.</p>
<h2 id="3-formating-line-wrapping-and-indention">3. Formating: line wrapping and indention.</h2>
<h3 id="31-indention">3.1 Indention</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="c">&#34; 1 tab = 8 space to avoid confuse your computer</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">tabstop</span><span class="p">=</span><span class="m">8</span>     <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; convert tab into space when you insert tab</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">expandtab</span>     <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; you can insert &#39;tab&#39; which is 4 space long, like the python formating</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">shiftwidth</span><span class="p">=</span><span class="m">4</span>  <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; set to -1 to use the value set above in shiftwidth</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">softtabstop</span><span class="p">=</span><span class="m">-1</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">autoindent</span>    <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">smartindent</span>   <span class="err">
</span></span></span></code></pre></div><p><code>set expandtab</code> is recommend as space is more accruate than tab, as one may <code>set tabstop=2</code>, if your system don&rsquo;t convert it to space, other user on their system may see a two space lenght tab. Which maybe confusion.</p>
<h3 id="32-line-wrapping">3.2 Line wrapping</h3>
<p>There is hard wrapping and soft wrapping, former one will insert real newline &ldquo;\n&rdquo; when line width is longer than boundary, latter one will not insret newline, only visually like separate line, actually a very long line.</p>
<h4 id="321-hard-wrapping">3.2.1 hard wrapping</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">textwidth</span><span class="p">=</span><span class="m">80</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">formatoptions</span><span class="p">+=</span><span class="nx">aw</span><span class="err">
</span></span></span></code></pre></div><p>According to vim help page, formatoptions <code>a</code>:</p>
<blockquote>
<p>Automatic formatting of paragraphs.  Every time text is inserted or	deleted the paragraph will be reformatted</p>
</blockquote>
<p>This feature make your vim look like normal markdown editor but hard wrapping</p>
<p>According to vim help page, formatoptions <code>w</code>:</p>
<blockquote>
<p>Trailing white space indicates a paragraph continues in the next line.	A line that ends in a non-white character ends a paragraph</p>
</blockquote>
<p>Without <code>set formatoptions+=aw</code>:
<img loading="lazy" src="/Blog/post/vim-1/without-aw.gif" type="" alt="without-aw"  /></p>
<p>Without <code>set formatoptions+=aw</code>:
<img loading="lazy" src="/Blog/post/vim-1/with-aw.gif" type="" alt="with-aw"  /></p>
<p>Usually &ldquo;aw&rdquo; combination is better than single one.</p>
<h4 id="322-soft-wrapping">3.2.2 Soft wrapping</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">textwidth</span><span class="p">=</span><span class="m">0</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">wrap</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">linebreak</span><span class="err">
</span></span></span></code></pre></div><p><code>set wrap</code> allow you to wrapping long line with the window edge. textwidth=0, so that long line will not be broken. <code>set linebreak</code> allow line wrap by words instead of characters.</p>
<p>Without <code>set linebreak</code>:
<img loading="lazy" src="/Blog/post/vim-1/softwrap-without-linebreak.png" type="" alt="softwrap-without-linebreak"  /></p>
<p>With <code>set linebreak</code>:
<img loading="lazy" src="/Blog/post/vim-1/softwrap-with-linebreak.png" type="" alt="softwrap-with-linebreak"  /></p>
<p>In soft wrapping, you can still make it wrapping at certain number of characters instead of window edge, you can append</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">columns</span><span class="p">=</span><span class="m">80</span><span class="err">
</span></span></span></code></pre></div><p>But it is rather ugly than helpful, you can resize window to get the same effect.</p>
<h2 id="4-vim-runtimepath">4. Vim $RUNTIMEPATH</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">filetype</span> <span class="nx">plugin</span> <span class="nx">on</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">filetype</span> <span class="nx">plugin</span> <span class="nx">indent</span> <span class="nx">on</span><span class="err">
</span></span></span></code></pre></div><p>Allow you to put script under <code>$RUNTIMEPATH/ftplugin/</code> and <code>$RUNTIMEPATH/ftplugin/indent</code></p>
<h3 id="41-undo-file">4.1 undo file</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">undofile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">unfo</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">directory</span><span class="p">=~</span><span class="sr">/.local/</span><span class="nx">state</span><span class="sr">/nvim/</span><span class="nx">undo</span><span class="sr">//</span><span class="err">
</span></span></span></code></pre></div><p><code>//</code> means the file will stored in full path, so that files having the same name will not confict. With above setting, you can &ldquo;undo&rdquo; with <code>u</code> and <code>&lt;C-r&gt;</code> even you reopen the file.</p>
<h2 id="5-shell-directory">5. Shell directory</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">autochir</span><span class="err">
</span></span></span></code></pre></div><p>Chagne the directory accoring to the file you edit. When you run Shell command via <code>:!</code>, your location depend on the file you editing. After you exit vim, directory will return to the status where you enter vim.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">path</span><span class="p">=</span>$<span class="nx">PWD</span>/**<span class="err">
</span></span></span></code></pre></div><p>This make your autocomplete in command line mode will complete all subdirectory. Especially useful when adding file in subdirectory as buffer.</p>
<h2 id="6-editing">6. Editing</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">conceallevel</span><span class="p">=</span><span class="m">2</span><span class="err">
</span></span></span></code></pre></div><p>Can conceal syntax when possible, quite helpful when editing markdown file, link or latex syntax will be concealled. Make your raw markdown file less messy.
<img loading="lazy" src="/Blog/post/vim-1/conceal.gif" type="" alt=""  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>The productivity of &#39;workflow&#39;</title>
      <link>https://sokinpui.github.io/Blog/post/11-toyeditor/</link>
      <pubDate>Wed, 19 Jul 2023 22:33:51 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/11-toyeditor/</guid>
      <description>Editor is only useful for editing the configuration file of the editor</description>
      <content:encoded><![CDATA[<h1 id="toy-editor">Toy Editor</h1>
<p>Editor, is for editing text, to get the job done, editing code, notes, configuration file. Some editor have the ultimatly extenability or customizability, like neovim, Emacs or vscode. Often we prepare too much to make our editor prefect, making our editor more than just an editor, convert it into something like git client, terminal, even a social recognition. The idea of hackable editor is great, many of us can get benefits from the scriptability to automation or add handy features. However, extenability come with cost. Emacs, the most extenable editor which come with the powerful extention language, Lisp, with Lisp everything related to text is possible to be implemented. You can, however, the biggest pain is you need to know how to, which involve time and practice to know the api and the language itself.</p>
<p><strong>Don&rsquo;t be the one who use their editor only for editing their configuration file.</strong></p>
<h1 id="toy-note-system">Toy note system</h1>
<p>Note system is another time sink, because building a note system is much more complex than build a prefect editor. Note system including editor, viewer, a clipper to collect some snippets, the bridge that integrate all your tools, or a all-in-one workspace. Since building note system is much more interesting than writing, review and organize notes, time is easy go to build a superficially clever system that input and output nothing.</p>
<h1 id="the-truth-of-configuration">The truth of configuration</h1>
<p>Yes, one can build their prefect system that will suit their workflow, if their workflow never change, it is not the truth, right? The best note system should always be the next. Your information system will evolve as you behaviour and workflow change.</p>
<p>Implement the change only when you need it, don&rsquo;t even try to make you system prefect, it won&rsquo;t.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tmux key bndings less suffer</title>
      <link>https://sokinpui.github.io/Blog/post/10/</link>
      <pubDate>Sat, 15 Jul 2023 17:34:00 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/10/</guid>
      <description>Do you use tmux? Do you think the default key bndings of tmux unacceptalbe? Here are some tips I have collected.
TIPS 1: Skip prefix After change some key bndings like prefix from C-b to something like C-space, you may still find annoying to press prefix for some handy shortcut like switching windows. To skips the needs of prefix, you may add the option -n before the command To switch windows without prefix using M-n bind -n M-n select-window -t :+ 2: Keyboard Macros Macros are collection of keys sequence, you may find some key on your keyboard is less used like right alt, then you can convert this key as tmux specify modifier key, press this key will do a sequence of shortcut.</description>
      <content:encoded><![CDATA[<p>Do you use tmux? Do you think the default key bndings of tmux unacceptalbe? Here are some tips I have collected.</p>
<h1 id="tips">TIPS</h1>
<h2 id="1-skip-prefix">1: Skip prefix</h2>
<p>After change some key bndings like prefix from <code>C-b</code> to something like <code>C-space</code>, you may still find annoying to press prefix for some handy shortcut like switching windows.
To skips the needs of prefix, you may add the option <code>-n</code> before the command <!-- raw HTML omitted -->
To switch windows without prefix using <code>M-n</code> <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bind -n M-n select-window -t :+
</span></span></code></pre></div><h2 id="2-keyboard-macros">2: Keyboard Macros</h2>
<p>Macros are collection of keys sequence, you may find some key on your keyboard is less used like <code>right alt</code>, then you can convert this key as tmux specify modifier key, press this key will do a sequence of shortcut. To achieve this, you may need a key mappings application, on Linux I recommand <a href="https://github.com/kmonad/kmonad">kmonad</a>; on Macos, I recommand <a href="https://karabiner-elements.pqrs.org/">Karabiner elements</a>. If you use karabiner elements, use <a href="https://github.com/yqrashawn/GokuRakuJoudo">goku</a> to configure Karabiner elements JSON file easier, life saver!</p>
<h2 id="3-open-new-window-under-current-directory">3: open new window under current directory</h2>
<p>It is especially great working on small screen laptop, if you spawn new pane, then you are in the same directory, however, if you spawn a new window, you will by default at <code>$HOME</code>. <!-- raw HTML omitted -->
You can use <!-- raw HTML omitted --></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bind -n M-o new-window -c &#34;#{pane_current_path}&#34;
</span></span></code></pre></div><p>to map <code>Alt-o</code> to open new window udner current directory.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Markdown writing, Obsidian &#43; Vim, not vim-mode</title>
      <link>https://sokinpui.github.io/Blog/post/9-prettyvim/</link>
      <pubDate>Fri, 30 Jun 2023 10:25:46 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/9-prettyvim/</guid>
      <description>Obsidian is a local note-taking apps, all the files are saved as .md or .pdf format. Vim or Neovim are great editors that allow you config all days without writing any real code
Obsidian has vim-mode, which support Vim modal editing out of the box. However, due to the font size is not unqiue in obsidian, Like the heading has bigger size, the code block is not at the beginning of the line.</description>
      <content:encoded><![CDATA[<p><a href="https://obsidian.md/">Obsidian</a> is a local note-taking apps, all the files are saved as <code>.md</code> or <code>.pdf</code> format.
<a href="https://www.vim.org/">Vim</a> or <a href="https://neovim.io/">Neovim</a> are great editors that allow you config all days without writing any real code</p>
<p>Obsidian has vim-mode, which support Vim modal editing out of the box. However, due to the font size is not unqiue in obsidian, Like the heading has bigger size, the code block is not at the beginning of the line. Sometimes got confused when using jk to move up and down, you move up may not be where you want to go. Vim modal editing editing works better with mono font, regardly, mono font has less readibility than non-mono font where obsidian used by default. What&rsquo;s more, obsidian vim-mode is not clone of vim, still implement as a vim emulation. You may have <a href="https://github.com/esm7/obsidian-vimrc-support">obsidian vimrc support plugin</a>, so to unlock the power of mapping in obsidian, but you still got a lot limitation. In terms of editing, a real Vim should be better than any vim-emulation, and in terms of notes-taking, any note-taking app should work better than Vim+shell, you don&rsquo;t have notes structure visualization without some extra tweaks.</p>
<h1 id="editing-in-vim">Editing in Vim</h1>
<p>With Vim, you can have those convenience over obsidian:</p>
<ol>
<li>snippets</li>
<li>completion</li>
<li>The best &ldquo;Vim&rdquo; mode</li>
</ol>
<p>The last one should have no doubt. The reason I use snippets and completion in note-taking because I am lazy. Retype the same works again and again are really boring and meangless. Obsidian does have some plugins related to <a href="https://github.com/ArianaKhit/text-snippets-obsidian">snippets</a> and <a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin">completion</a>, but setup snippets and completion is just easier and more consisent on Vim. In Vim you can have same UI interface and consisent keyblindings.<!-- raw HTML omitted -->
The plugins I use for snippets and completion are <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> + <a href="https://github.com/SirVer/ultisnips">Ultisnips</a> + <a href="https://github.com/neoclide/coc-snippets">coc.snippets</a>, choosing coc.nvim simply because it have provided solution for snippets together with completion out of the box. Of course, there is so much alternatives avalible. The only missing is the backlink completion. But it is fine, insert backlink in obsidian let me have a look of filenames, so that I won&rsquo;t forget the filename and suck typing.</p>
<p>Example configuration for snippets and completion:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Plug &#39;neoclide/coc.nvim&#39;, {&#39;branch&#39;: &#39;release&#39;}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;   coc.nvim
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; coc#pum#visible() 
</span></span><span class="line"><span class="cl">      \ ? coc#pum#next(1) : 
</span></span><span class="line"><span class="cl">      \ cocfunc#CheckBackspace() 
</span></span><span class="line"><span class="cl">      \ ? &#34;\&lt;TAB&gt;&#34; : coc#refresh()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;expr&gt;&lt;S-TAB&gt; coc#pum#visible() 
</span></span><span class="line"><span class="cl">      \ ? coc#pum#prev(1) : &#34;\&lt;S-TAB&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;CR&gt; coc#pum#visible() 
</span></span><span class="line"><span class="cl">      \ ? &#34;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#pum#close()\&lt;CR&gt;&#34; 
</span></span><span class="line"><span class="cl">      \ : &#34;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#on_enter()\&lt;CR&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;space&gt; coc#pum#visible() 
</span></span><span class="line"><span class="cl">      \ ? &#34;&lt;esc&gt;a&lt;space&gt;&#34; : &#34;&lt;space&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;   coc.snippets
</span></span><span class="line"><span class="cl">inoremap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-expand-jump)
</span></span><span class="line"><span class="cl">vnoremap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-select)
</span></span><span class="line"><span class="cl">let g:coc_snippet_next = &#39;&lt;C-j&gt;&#39;
</span></span><span class="line"><span class="cl">let g:coc_snippet_prev = &#39;&lt;C-k&gt;&#39;
</span></span></code></pre></div><p>coc.snippets need to be installed separately, after install coc.nvim, run the command <code>:CocInstall coc-snippets</code></p>
<h1 id="obsidian-the-markdown-viewer">Obsidian, the markdown viewer</h1>
<p>Insert image in markdown with plugins <a href="https://github.com/nicojeske/mousewheel-image-zoom">image resizer</a> and <a href="https://github.com/reorx/obsidian-paste-image-rename">imager inserter</a> is supar convenient, no doubt better than vim.</p>
<h2 id="navigation-in-wrapped-line">Navigation in wrapped line</h2>
<p>Since hard wrapped line will make paragraph look ugly in Obsidian, use soft wrapped line instead, which means one paragraph is actually a long long line. Some mapping will be handy to avoid keep using prefix <code>g</code> again in Vim.</p>
<p>Example configuration, in <code>~/.vim/ftplugin/markdown.vim:</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">setlocal textwidth=0 wrap formatoptions=tc2n linebreak
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">noremap &lt;buffer&gt; j gj
</span></span><span class="line"><span class="cl">noremap &lt;buffer&gt; k gk
</span></span><span class="line"><span class="cl">noremap &lt;buffer&gt; $ g$
</span></span><span class="line"><span class="cl">noremap &lt;buffer&gt; ^ g^
</span></span><span class="line"><span class="cl">noremap &lt;buffer&gt; 0 g0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nnoremap &lt;buffer&gt; dd g0vg$D
</span></span><span class="line"><span class="cl">nnoremap &lt;buffer&gt; D g0vg$D
</span></span><span class="line"><span class="cl">nnoremap &lt;buffer&gt; V g0vg$
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nnoremap &lt;buffer&gt; I g^i
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">function! IsBlank()
</span></span><span class="line"><span class="cl">    normal! g$
</span></span><span class="line"><span class="cl">    var char = getline(&#34;.&#34;)[col(&#34;.&#34;) - 1]
</span></span><span class="line"><span class="cl">    if char == &#34;\t&#34; || char == &#34; &#34;
</span></span><span class="line"><span class="cl">        normal! gel
</span></span><span class="line"><span class="cl">        startinsert
</span></span><span class="line"><span class="cl">    else
</span></span><span class="line"><span class="cl">        startinsert!
</span></span><span class="line"><span class="cl">    endif
</span></span><span class="line"><span class="cl">deffunction 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nnoremap &lt;buffer&gt; A :call IsBlank()&lt;cr&gt;
</span></span></code></pre></div><p>The last one help you stop at the last non-blank character in wrapped line, the normal behavior of <code>g$a</code> will stop at the last character including space and tab, sometimes inconvenient.</p>
<h2 id="psudo-wysiwyg">Psudo WYSIWYG</h2>
<p>WYSIWYG, what you see is what you get, is one of the highlight of markdown syntax, very simple. To get half experience in Vim, oen can be turn on concealment. <code>set conceallevel=2</code> to convert highlight syntax into unicode character.</p>
<p>Just let better tools takes the jobs. For text editing, take Vim; For notes managment, take Obsidian; For complex data representaion like chart, embedded image and website page, just take any other tools like Notion.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim plugin recommendation</title>
      <link>https://sokinpui.github.io/Blog/post/8-vimpluginrecommend/</link>
      <pubDate>Thu, 29 Jun 2023 14:00:02 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/8-vimpluginrecommend/</guid>
      <description>Vacillate vim are really good, after remember some vim command keyblindings, you can start editing or writing immediately. The main benefits of using plugins can avoid use our poor vimscript. Use some great plugin avoid you to rebuild the wheel. Before you are able to write plugin yourself, trust me, any exist plugins is better than yours.
Plugins recommendation 1. vim-plug vim-plug, a plugin manager that help you install, update and manage your plugins.</description>
      <content:encoded><![CDATA[<p>Vacillate vim are really good, after remember some vim command keyblindings, you can start editing or writing immediately. The main benefits of using plugins can avoid use our poor vimscript. Use some great plugin avoid you to rebuild the wheel. Before you are able to write plugin yourself, trust me, any exist plugins is better than yours.</p>
<h1 id="plugins-recommendation">Plugins recommendation</h1>
<h2 id="1-vim-plughttpsgithubcomjunegunnvim-plug">1. <a href="https://github.com/junegunn/vim-plug">vim-plug</a></h2>
<p>vim-plug, a plugin manager that help you install, update and <strong>manage</strong> your plugins. Vim come with built-in package manger <code>pack</code>, a subdirectory under <code>.vim/</code>, if don&rsquo;t exist, create it. I usually use build-in <code>pack</code> only for some personal little script, so that I don&rsquo;t have to move forth and back in vim runtime path.</p>
<p>Vim plug syntax is easy, to add random plugins, add those line in your <code>.vimrc</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">call plug#begin()
</span></span><span class="line"><span class="cl">&#34; list plugins herer
</span></span><span class="line"><span class="cl">Plug &#39;junegunn/vim-easy-align&#39;
</span></span><span class="line"><span class="cl">call plug#end()
</span></span></code></pre></div><p>Any github repo can be installed, for example, you have write your <em>plugin</em> and push to github at <a href="https://github.com/username/plugin-name">https://github.com/username/plugin-name</a>, you can add this <em>plugin</em> by adding those line in your <code>.vimrc</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">call plug#begin()
</span></span><span class="line"><span class="cl">&#34; list plugins herer
</span></span><span class="line"><span class="cl">Plug &#39;username/plugin-name&#39;
</span></span><span class="line"><span class="cl">call plug#end()
</span></span></code></pre></div><p>After that, save your file by <code>:w</code>, source your <code>.vimrc</code> or leave then reopen your <code>.vimrc</code>, run the command <code>:PlugInstall</code>. Plugins will be installed at <code>~/.vim/plugged</code> by default.</p>
<p>To save my little pinky finger, I have those mapping for convenience:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nnoremap \i :w&lt;cr&gt;:source ~/.vim/vimrc&lt;cr&gt;:PlugInstall&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap \c :w&lt;cr&gt;:source ~/.vim/vimrc&lt;cr&gt;:PlugClean&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap \u :w&lt;cr&gt;:source ~/.vim/vimrc&lt;cr&gt;:PlugUpdate&lt;cr&gt;
</span></span></code></pre></div><h2 id="2-vim-sandwichhttpsgithubcommachakannvim-sandwich">2. <a href="https://github.com/machakann/vim-sandwich">vim-sandwich</a></h2>
<p>vim-sandwich help you to change the surround of text. What is surround? Surround means the pairs that surround text object, like <code>&quot;</code> and <code>(</code>. It is handy to let program do for us, instead of change manually.</p>
<p><a href="https://github.com/machakann/vim-sandwich">vim-sandwich</a> is an alternative of <a href="https://github.com/tpope/vim-surround">vim-surround</a>, which provide texthighligh, auto-selection, and repeat with <code>.</code> out-of the box. It use less keys than vim-surround, just navigate to the current parenthesis object position and chagne the surround! No need to select the object before change.
surround style of changing surround:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cs &lt;surround to be changed&gt; &lt;surround to replace&gt;
</span></span></code></pre></div><p>sandwich style of changing surround(auto replace):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">srb &lt;surround to be changed&gt; &lt;surround to replace&gt;
</span></span></code></pre></div><p>I though it is a more intutitive than to surround style of change, as symbol like <code>{</code>, <code>[</code> and <code>(</code> is more difficult to type than navigate to the right position with <code>f</code>, <code>t</code>, <code>F</code> and <code>T</code>.</p>
<p>The auto-selection of vim-sandwich is highlight of this plugin, I have use this feaatur for all surround editing including add, delete and replace surrounds. I have the following setting so that I can use <code>&lt;leader&gt;+symbols</code> to add surround for one words or selected region</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nmap &lt;leader&gt;( saiw(E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;) saiw)E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;[ saiw[E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;] saiw]E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;{ saiw{E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;} saiw}E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;&#34; saiw&#34;E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;&#39; saiw&#39;E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;&lt; saiw&lt;E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;&gt; saiw&gt;E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;` saiw`E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;$ saiw$E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;* saiw*.E
</span></span><span class="line"><span class="cl">nmap &lt;leader&gt;~ saiw~.E
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34; visual
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;( sa(
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;) sa)
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;[ sa[
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;] sa]
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;{ sa{
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;} sa}
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;&#34; sa&#34;
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;&#39; sa&#39;
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;&lt; sa&lt;
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;&gt; sa&gt;
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;` sa`
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;$ sa$
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;_ ca_
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;* sa*.
</span></span><span class="line"><span class="cl">vmap &lt;leader&gt;~ sa~.
</span></span></code></pre></div><p>However, it is a bad habits to make a keyboard macros, the better way would be calling the plugin&rsquo;s function. Coz I am lazy and nothing happen till now, I keep those lines.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="3-clever-fhttpsgithubcomrhysdclever-fvim">3. <a href="https://github.com/rhysd/clever-f.vim">clever-f</a></h2>
<p><a href="https://github.com/rhysd/clever-f.vim">clever-f</a> is a plugin that improve the smoothness and consisent when navigation with <code>f</code>, <code>t</code>, <code>F</code> and <code>T</code>. You can use <code>f</code> to navigate to next <code>f</code> search, or use <code>F</code> to navigate backwards, instead of using <code>;</code> and <code>,</code>. What&rsquo;s more, you can remap <code>;</code> and <code>,</code> for other purpose. When you press <code>f</code> to navigate <code>f</code> search, you can cross the line, and you can have smart case searching!</p>
<p>After using this plugin, I won&rsquo;t claim it is more efficient than <code>;</code> and <code>,</code>, but it must be more comfortable.</p>
<p>You can change the behaviour of the plugins by adding those line to your <code>.vimrc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34; ignore case unless you specify Upper case 
</span></span><span class="line"><span class="cl">let g:clever_f_smart_case = 1  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34; allow cross line, set to 1 if you don&#39;t 
</span></span><span class="line"><span class="cl">let g:clever_f_across_no_line = 0 like it
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34; f; will searhc for all symbols
</span></span><span class="line"><span class="cl">let g:clever_f_chars_match_any_signs = &#39;;&#39; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34; f. will repeat you last search
</span></span><span class="line"><span class="cl">let g:clever_f_repeat_last_char_inputs = [ &#34;\&lt;TAB&gt;&#34; ]
</span></span></code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="4-cocnvimhttpsgithubcomneoclidecocnvim">4. <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a></h2>
<p><a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> make completion in vim like vscode.</p>
<p>coc.nvim is a plugins framework, so you may find coc-XXX plugin written in Javascript or Typescript. Some of them is unique, some of them is alternative to the existing vim plugins to compatilbe with coc.nvim. One is <a href="https://github.com/neoclide/coc-snippets">coc.snippets</a>, which aims to replace <a href="https://github.com/SirVer/ultisnips">Ultisnips</a> when you use coc.nvim. coc.nvim use is written Javascript and Typescript, you will configure the popup window in JSON file.</p>
<p>By default, coc.nvim don&rsquo;t come with any keyblindings, you have to configure yourself.</p>
<p>For example, you can:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34;   coc.nvim
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt; coc#pum#visible() ? coc#pum#next(1) : 
</span></span><span class="line"><span class="cl">      \ cocfunc#CheckBackspace() ? &#34;\&lt;TAB&gt;&#34; : coc#refresh()
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;expr&gt;&lt;S-TAB&gt; coc#pum#visible() ? coc#pum#prev(1) : &#34;\&lt;S-TAB&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;CR&gt; coc#pum#visible() ? &#34;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#pum#close()\&lt;CR&gt;&#34; 
</span></span><span class="line"><span class="cl">                              \: &#34;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#on_enter()\&lt;CR&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">inoremap &lt;silent&gt;&lt;expr&gt; &lt;space&gt; coc#pum#visible() ? &#34;&lt;esc&gt;a&lt;space&gt;&#34; 
</span></span><span class="line"><span class="cl">                              \: &#34;&lt;space&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;   coc.snippets
</span></span><span class="line"><span class="cl">inoremap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-expand-jump)
</span></span><span class="line"><span class="cl">vnoremap &lt;C-j&gt; &lt;Plug&gt;(coc-snippets-select)
</span></span><span class="line"><span class="cl">let g:coc_snippet_next = &#39;&lt;C-j&gt;&#39;
</span></span><span class="line"><span class="cl">let g:coc_snippet_prev = &#39;&lt;C-k&gt;&#39;
</span></span></code></pre></div><p>The above example don&rsquo;t require selection, you use <code>&lt;TAB&gt;</code> and <code>&lt;S-TAB&gt;</code> to navigate to the suggestion you want, after that, you can press <code>&lt;space&gt;</code> and <code>&lt;cr&gt;</code> to move and start a new line respectively.</p>
<h2 id="5-fzfvimhttpsgithubcomjunegunnfzfvim">5. <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a></h2>
<p><a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> $\times$  vim, a command line tools <a href="https://github.com/junegunn/fzf">fzf</a> vim warpper. You can unlock the power of fuzzy finder in vim nearly anything.</p>
<p>The syntax of fzf.vim is simple:<!-- raw HTML omitted -->
:Files [PATH] 	search file in current directory by default <!-- raw HTML omitted -->
:Buffers 	search opened buffers <!-- raw HTML omitted -->
:Ag [PATTERN] 	use ag to search pattern <!-- raw HTML omitted -->
:Rg [PATTERN] 	use rg to search pattern <!-- raw HTML omitted -->
:Lines [QUERY] 	search lines in loaded buffers <!-- raw HTML omitted -->
:Marks 	search marks and jump to <!-- raw HTML omitted -->
:History 	serach for opened files <!-- raw HTML omitted -->
:History: 	search fo Command history <!-- raw HTML omitted -->
:History/ 	Search for searching history wiht <code>/</code> <!-- raw HTML omitted -->
:Commands 	search for avalible Commands <!-- raw HTML omitted -->
:Maps 	serahc for Normal mode mappings <!-- raw HTML omitted -->
:Helptags 	fzf for :help XXX, open help buffer <!-- raw HTML omitted --></p>
<p>you can make your own shortcut like</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">let g:fzf_preview_window = [&#39;right,50%&#39;, &#39;ctrl-/&#39;]
</span></span><span class="line"><span class="cl">let g:fzf_layout = {&#39;window&#39;: { &#39;width&#39;: 0.9, &#39;height&#39;: 0.9 }}
</span></span><span class="line"><span class="cl">let g:fzf_buffers_jump = 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;ff :Files&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;fb :Buffers&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;fs :Lines&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;fp :Rg&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;f/ :History/&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;f: :History:&lt;cr&gt;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;fh :Helptags&lt;cr&gt;
</span></span></code></pre></div><p>The first line config the location of preview windows, you can have <code>right</code>, <code>left</code>, <code>up</code>, and <code>down</code>. The second line control the size of the popup windows</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim emluation on Emacs and Vscode</title>
      <link>https://sokinpui.github.io/Blog/post/7-tryevil/</link>
      <pubDate>Fri, 23 Jun 2023 11:24:42 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/7-tryevil/</guid>
      <description>(Edited date: 2023-06-23T11:24:42+08:00)
Emacs Evil mode, a Vi layer on top of Emacs, in my understanding, Evil is a collection of keys remapping that blinds Emacs function to vi style keys. I love elisp, its powerful expression, the robust ecosystem built on top of elisp, tones of API that help writing my own plugins. I thought it is the most apporach Vim emluation I have tried, if Emacs is start as emacs -nw, it will successly pretend Vim TUI!</description>
      <content:encoded><![CDATA[<p>(Edited date: 2023-06-23T11:24:42+08:00)</p>
<p>Emacs Evil mode, a Vi layer on top of Emacs, in my understanding, Evil is a collection of keys remapping that blinds Emacs function to vi style keys. I love elisp, its powerful expression, the robust ecosystem built on top of elisp, tones of API that help writing my own plugins. I thought it is the most apporach Vim emluation I have tried, if Emacs is start as <code>emacs -nw</code>, it will successly pretend Vim TUI!</p>
<p><a href="https://github.com/vscode-neovim/vscode-neovim">Vscode-Neovim</a>, it uses a fully embedded Neovim instance, so Vscode-Neovim can read the <code>init.vim</code> and <code>init.lua</code>. Which is really cool, don&rsquo;t have to google the API before configuraion.</p>
<p>However, I feel the gap when using them. They are great emluation of Vim modal editing, however, other than editing, some important values are still not able to copy, like the integration with shell, and relay on third parity plugin on their ecosystem. Moreoever, I don&rsquo;t feel over advantage to use an emluation than native Vim.</p>
<h1 id="emluation-cant">Emluation can&rsquo;t</h1>
<p><code>Q</code> to enter ex mode in Evil.<!-- raw HTML omitted -->
<code>q:</code>, <code>q?</code>, <code>q/</code>in Vscode-Neovim(extremely useful!)
<code>sh</code> in both.(sometimes I want to copy the previous command output)
<code>term</code> in Vscode-Neovim to popup an termianl
<code>:help</code> in Evil.</p>
<hr>
<p>(edited at Mon Jun 26 12:49:55 PM CST 2023)</p>
<h1 id="gravity">Gravity</h1>
<p>Merge to new editor is harder than I thought, I have tried Vscode and Emacs, while they are great editor, but just required sometimes to copy the workflow from my old editor to new editor. Even copied all the keyblindings, some minor but unacceptable difference keep consumming my time to google a solution. For example, the Tab completion style difference between Vscode, Emacs and Vim, I like the popup window of Vim, the tab YouCompleteMe style tab cycling, to get the same setup on Emacs and Vscode are terrible.</p>
<p>Also, the greatest gravity fallback to the original editor is no productivity gain from switching. If finally I endup with the same writing and editing experience on other editors, I still reach the same level of speed and productivity, then so what? The core of those editor hasn&rsquo;t changed, editing text, maybe Emacs can extand more than editing text.</p>
<p>After giving a try to those editors, I finally satisify with my current editor. Just be reason when switching tools that have the same functionality in terms of your workflows, especially there is no issue with the current one.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>From Macbook to Thinkpad</title>
      <link>https://sokinpui.github.io/Blog/post/6-frommactothinkpad/</link>
      <pubDate>Wed, 21 Jun 2023 10:51:38 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/6-frommactothinkpad/</guid>
      <description>From Mac to Thinkpad 2020 Macbook Air with M1 chips, my first computer used in univserity. There is three reasons I brought it, light weight, no fans and long battery life. But surprisingly, I discover that they are no gaming changer when I get into univserity.
There is charger everywhere in univserity library, I don&amp;rsquo;t often move my computer, and I don&amp;rsquo;t have heavier work on my computer.
Switching is not correct in my situation, I don&amp;rsquo;t sold my Macbook, instead I brough a second hand Thinkpad x1 carbon 6th 2019.</description>
      <content:encoded><![CDATA[<h1 id="from-mac-to-thinkpad">From Mac to Thinkpad</h1>
<p>2020 Macbook Air with M1 chips, my first computer used in univserity. There is three reasons I brought it, light weight, no fans and long battery life. But surprisingly, I discover that they are no gaming changer when I get into univserity.</p>
<p>There is charger everywhere in univserity library, I don&rsquo;t often move my computer, and I don&rsquo;t have heavier work on my computer.</p>
<p>Switching is not correct in my situation, I don&rsquo;t sold my Macbook, instead I brough a second hand Thinkpad x1 carbon 6th 2019. Nevertheless, I haven&rsquo;t used my Macbook three month ago.</p>
<p>The reason I starting using thinkpad is so silly. After using Macbook for 9 months at univserity, I start to play with my keyboard, try different keyboard layout, also designed my own keyboard layout, I use <a href="https://karabiner-elements.pqrs.org/">Karabiner-Elements</a> and <a href="https://github.com/yqrashawn/GokuRakuJoudo">Goku</a> to config Karabiner Elements JSON file. Still there are some limitations on mac when remapping keys. Then, I discovered <a href="https://github.com/kmonad/kmonad">kmonad</a>, which seems to be more powerful, more free, and more structured syntax when compare to terrible JSON indention. Sadly, I found kmonad do not work on my Macbook, and it seems to work better on Linux(I still don&rsquo;t know the answer until now)?</p>
<p>After the x1 carbon reached, I install Linux distribution and then kmonad immediately, Kmonad work perfect on linux! <strong>The silly fact is I have stopped tweaking my keyboard layout, I drop all the complex layer after using kmoand for a whole</strong>.</p>
<h1 id="switching-gap">Switching gap</h1>
<p>No gap exist when switching, because I sedomly use Mac specified application, most of my favourite applications are cross platform, or have web version. Some application like mail and pdf editor are quite different on Linux and Macos, nevertheless, there is full documeted guide availible on univserity website. They are not an issue. Moreoever, most of the time I found myself living in browser, there will not be any significant difference in sense of user experience between Linux and Macos, instead of switching From Chrome to firefox. <strong>Google Chrome look like second class on linux, while Firefox have gesture supporting and smooth scrolling out of the box</strong>, Google Chrome haven&rsquo;t come with gesture on my Linux distribution. But still, they are all fine.</p>
<h1 id="habbits-change-after-on-thinkpad">Habbits Change after on Thinkpad</h1>
<p>Switching has helped me discovering and changein my daily computer using habbits and my philosophy of desktop environment.</p>
<h2 id="from-messay-virtual-desktop-to-organized-workspace">From messay virtual desktop to organized workspace</h2>
<p>I had one bad habbit on Macos, I give every application a single virtual desktop, making switching application difficult. Suffering from sliding between virtual desktop or type the names of applications on spotlight search. Because of the implmentaton difference on GNOME and Macos, the workspace(equivalent to Macos virtual desktop) icon is so small, forcing me not to give one workspace per application. Since often I can&rsquo;t memorize where are the applications, and it is difficult to look for the application on the tiny workspace icon. Nevertheless, I finally found the right usage of workspace, group related windows in the same workspace. I cannot count how much energy have been waste on finding the right location of the wanted applications.</p>
<h2 id="from-tilling-windows-fans-to-floating-windows-fans">From tilling windows fans to floating windows fans</h2>
<p>Before doing meaningful stuff on computer, we first make ourself look cool, where 99% of time tweaking the desktop environment, remaining 1% doing real stuff.Tilling windows look cool, like hacker sitting in front of multiple screens. I use <a href="https://github.com/koekeishiya/yabai">yabai</a> on mac, before I try linux I have seen a lot of tilling windows manager screenshots sharing. They are really cool. But, most of the tilling windows manager are keyboard oriented, while the keyboard size of laptop are usually small, which mean I have to press keys with modifiers together, at the beginning, I am fine, but after a while, my little pinky finger suffer. I have rarely at the situation that have to switch between windows, of course no need for dynamic management of windows. I find floating windows is a more intuitive way to manage windows, and pinky-friendly.</p>
<h2 id="from-40-keyboard-fans-to-87-to-100-to-200">From 40% keyboard fans to 87% to 100% to 200%?</h2>
<p>40% keyboard look cool, it hold you hand in four main rows, so it is more efficient. Um&hellip;, that how I used to be thought about 40% keyboard, while saving thousand of miles finger move, I have to press every special symbols and numbers by modifiers, hold many key together, untypable if I move to new keyboard or new laptop. Currently I don&rsquo;t get the philosophy of low profile keyboard, instead I prefer double keyboard now. Literaly high profile keyboard, 180% keyboard. Those extra keys are used as marcos. I saved those handy shortcut combination into single keys, like I have map &ldquo;7&rdquo; on numpad as &ldquo;C-c C-t C-v enter&rdquo;, &ldquo;4&rdquo; on numpad as my univserity mail address. I am so naive that I have implmented a 40% keyboard on Macbook keyboard, leaving the number rows unused HAHA.
<img loading="lazy" src="/Blog/post/6-frommactothinkpad/wombat.1268.png" type="" alt="Wombat 200% keyboard"  />
(Wombat 200% keyboard)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Waste too much time to upgrade productivity</title>
      <link>https://sokinpui.github.io/Blog/post/4-choose-of-tools/</link>
      <pubDate>Tue, 02 May 2023 21:41:24 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/4-choose-of-tools/</guid>
      <description>There are too much time spend on configure my tools, replace a more efficiently tool with the less efficient one. It takes me so long to understand those apps doesn&amp;rsquo;t matter if just want to take a notes
Time spending on notes taking app Effie When I have to take notes, I fisrt using Effie, but then I find it don&amp;rsquo;t have good image insert support, give up. Their idea is great, notes or writing apps should be clean enough and later I find every notes app say they are clean.</description>
      <content:encoded><![CDATA[<p>There are too much time spend on configure my tools, replace a more efficiently
tool with the less efficient one. It takes me so long to understand those apps
doesn&rsquo;t matter if just want to take a notes</p>
<h1 id="time-spending-on-notes-taking-app">Time spending on notes taking app</h1>
<h2 id="effie">Effie</h2>
<p>When I have to take notes, I fisrt using <a href="https://www.effie.pro/">Effie</a>, but
then I find it don&rsquo;t have good image insert support, give up. Their idea is
great, notes or writing apps should be clean enough and later I find every notes
app say they are clean.</p>
<h2 id="notion">Notion</h2>
<p>The next app is <a href="https://www.notion.so/desktop">notion</a>, it is great, the
markdown blocks and integration of app make notion eye-cream, but then regarding
the loading time take decade long, no offline support, and most of my time are
dragging blocks make my workspace more pretty.  &ldquo;Um&hellip; A good notes should look
like this.&rdquo;, regarding my terrible sense of beauty, the &ldquo;design&rdquo; never fit my
imagination of prefect notes. Notion maybe too capable for a note taking app,
the database function make them customizable, I want writing notes, but not
build website. Nevertheelss, Notion now becoming my todo list, and event
recorder, how great it support syncing across all devices, and can be access
with browser.</p>
<h2 id="onenote-collanote-goodnotes-remarkable">OneNote, CollaNote, Goodnotes, Remarkable</h2>
<p>All of them used to be kept my handwriting notes, among them, OneNotes is canva,
CollaNote is vertical scrolling canva, Goodnotes is a good handwriting notes app
but neet to pay. Remarkable is an accidient, I never understand why I think it
can take a notes with high writing delay and slow responding time. All of them
have been used on 2018 Ipad with 20.7 grams Apple Pencil (1st Generation).  This
gen pencil is too heavy, compare to Samsung 8 grams S Pen, it is like holding a
sticker stamp on glass. I remember I have spend so much time finding free
alternative on Ipad since good software and hardware are expensive, and finally
stay with second hand Samsung tab S7.</p>
<h2 id="obsidian">Obsidian</h2>
<p>Before trying Obsidian, I have finally realize that note is simple as markdown,
no need of those notion blocks or Effie cards. basiclly supporting tree
directories selection and image insertion is a must. Obsidian do quite well, and
finally I realize how much time is wasted on making my own notion note space. No
database and todo list is needed, and therefore Obsidian is enough to write and
manager notes.</p>
<p>When tinkering a customizalbe tools, I always try to make the tools part of
mine, try to complish all the tasks with the lovest tools. When there exist a
better tools, still I have to use my lovely tools try to accomplish the task, if
not, then google way to implement it. Most of the time tinkering the tools,
losting the initial goal, turn into making my tools super powerful and
multi-funcional. Therefore, never love your tools, getting the job done in
efficient way is much more elegant than done the jobs with the specify tools, if
the initial goal is getting the task done.</p>
<h1 id="editor">Editor</h1>
<p>Editor is another time sink source. Vim is the first editor I know it is a
editor, I have use vscode before but I don&rsquo;t know it is a editor, back to the
day using vscode, I am scaring of those UI, I don&rsquo;t know what will happen if I
turn on/off some of thems. Vim is clean, simple and elegant. However, it is like
a mindset trap, the more I know Vim, the stronger will to do all in vim way. Vim
bring me to shell, shell bring me to plain text operation. A mindset form,
command line and plain text are efficient, GUI and mouse are evil. At that time,
I have read many article of how to navigate laptop with only keyboard and vim
like motion. Most of the time spend on google &ldquo;how to do XXX in vim&rdquo; and &ldquo;how to
do XXX in cli&rdquo;. Still worse, I have imaged many situation that never happen,
prepare a function or shortcut to overcome the problem never happen in future.</p>
<p>Any customizalbe editor can be time sink to configure, they becoming toies
insteat of tools, I am adding too much unnecessary function before applied in
real context. All those function and shortcut should only solved and implment in
fly or they are repetitive to give a handy marco. When some special case rise, I
am aware if it can be handle in &ldquo;simpler&rdquo; way, the real is they seldom occur in
the future. However, time is wasted already.</p>
<h1 id="problems-of-upgrading-productivity-through-changing-tools">Problems of upgrading productivity through changing tools.</h1>
<p>Replacing the current tools with a more productivity one is often handy and
attactive, imaging better functionalility of newer tools and get the job more
efficient and elegant. However most of the time is spent on move data and
rebuild working flow. When I merge my notes from Effie to notion, it take me one
day to do so, it is repeative and boring to copy all the structure of the notes.<br>
My current strategy are of merging notes are don&rsquo;t touch the notes unless
necessary, most of my old notes are still keeping on notion instead merging them
into obsidian, although it may feel statisfy too see a deep direcotry of notes
on Obsidian side bar. It just too time consumming, no real benefit to merge all
the notes into single place, whatever the notes still appear in both apps, it is
really not difference to merge from one to one and separate them.</p>
<h2 id="changing-tools">Changing tools</h2>
<p>I always want to try new tools, like emacs, vscode, Obsidian open source
alternative, Mac built-in preview.app &ldquo;better alternative&rdquo;. Try them like
playing new toy, fun but no real gain. I try them under the name of learning,
and end up with tinkering configure.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Dynamic number-symbol row in vim</title>
      <link>https://sokinpui.github.io/Blog/post/3-dyn-num-sym/</link>
      <pubDate>Fri, 07 Apr 2023 17:43:58 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/3-dyn-num-sym/</guid>
      <description>Abstraction Provide a way to dynamic swap numbers and symbols in vim according to current mode.
How this idea come When I write code or writing, I often find the symbols should be easily type as single key stroke, while in vim normal mode I find I would like to press number in single mode instead of pressing with shift. At first, I searched online for solution, many of them suggested to swap numbers and symbols, and I agree it may convient while coding.</description>
      <content:encoded><![CDATA[<h1 id="abstraction">Abstraction</h1>
<p>Provide a way to dynamic swap numbers and symbols in vim according to current
mode.</p>
<h1 id="how-this-idea-come">How this idea come</h1>
<p>When I write code or writing, I often find the symbols should be easily type as
single key stroke, while in vim normal mode I find I would like to press number
in single mode instead of pressing with <code>shift</code>. At first, I searched online for
solution, many of them suggested to swap numbers and symbols, and I agree it may
convient while coding. However, I am not coding all day, even during coding, in
vim normal mode something it is handy to use number for <code>[count]</code> and command
together. So swapping force you to choose one of them for more convenience
typing. Another solution is to use number pad layer, I would say it is same as
swapping, since I have to press with another key to use numbers, the problem
havn&rsquo;t been solved.</p>
<p>One day, When I was editing code, the idea of toggling nubmer-symbol row come in
my mind, then I implement it, and find it solve the problem quite well regarding
not prefect.</p>
<h1 id="number-symbols-toggle">Number-symbols toggle</h1>
<p>Well, it is actually a dead key leader, when I press the <code>toggle key</code> which is
<code>equal sign</code> of my keyboard. The nubmer row will swap to symbol row, press
again, back to number.</p>
<h1 id="dynamic-number-symbols-row-in-vim">Dynamic Number-symbols row in vim</h1>
<p>Since vim is modual, when insert mode, I prefer using symbols over numbers, when
normal mode, I prefer the opposite. Then I add some rules for the toggle keys.</p>
<p>Back to normal mode, which is equivalent to press the <code>esc</code> key, so when press
<code>esc</code> key, define <code>nst</code> to False. It means toggle number rows.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[:escape :left_control nil {:alone [ [&#34;nst&#34; 0] [&#34;n-layer&#34; 0] :escape  ]} ]
</span></span></code></pre></div><p>The above snippets is goku code, a config layer on top of <a href="https://karabiner-elements.pqrs.org/">Download
Karabiner Elements</a>, which is a tools for
Mac to remap keyboard layouts.</p>
<p>Enter insert mode, is equivalent to <code>a</code>, <code>i</code>, <code>s</code>, <code>A</code>, <code>I</code>, <code>S</code>, <code>o</code>, <code>O</code>, <code>c</code>,
<code>C</code>. Then turn <code>nst</code> to True when type those key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[:i                           [:i  [&#34;nst&#34; 1]]]   
</span></span><span class="line"><span class="cl">[:a                           [:a  [&#34;nst&#34; 1]]]   
</span></span><span class="line"><span class="cl">[:s                           [:s  [&#34;nst&#34; 1]]]   
</span></span><span class="line"><span class="cl">[:c                           [:c  [&#34;nst&#34; 1]]]   
</span></span><span class="line"><span class="cl">[:o                           [:o  [&#34;nst&#34; 1]]]   
</span></span></code></pre></div><p>The above code define <code>nst</code> to True when type <code>i</code> ( not <code>I</code> ).</p>
<p>Furthur more, there is a few more situation I would prefer symbols over number,
they are searching and command mode. Then I add those lines also.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[:semicolon                   [:semicolon [&#34;nst&#34; 1]]]   
</span></span><span class="line"><span class="cl">[:slash                       [:slash [&#34;nst&#34; 1]] ]
</span></span></code></pre></div><h1 id="inprefect">Inprefect</h1>
<p>Since the layer is define outside vim, it can not avoid symbols row toggle
during normal mode, when I type <code>yip</code> in normal mode, the symbol row toggle.
Although I can have some line like <code>inoremap 1 !</code> and <code>cnoremap 2 @</code>, I don&rsquo;t
want to pollute my mapping to much, I give up to implement this in pure vim way.
I am interesting to find how to let karabiner know that I am in vim normal mode,
so that avoid toggle symbol row accidently.</p>
<p>I have remap <code>equal sign</code> to the <code>caps lock</code>, so it is possible for me to have
one dead key, if you want to implement also, you may find your own.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Define layer using Karabiner Elements togther with Goku</title>
      <link>https://sokinpui.github.io/Blog/post/2-goku/</link>
      <pubDate>Fri, 31 Mar 2023 17:27:25 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/2-goku/</guid>
      <description>If you don&amp;rsquo;t know the basic syntax of Goku, please see the offical tutorial.
What is Karabiner Elements? Karabiner Elements is a keyboard modifier on MacOS, which support key blindings remap and define layer, or in another form, complex modification. Download Karabiner Elements.
What is Goku? Goku is a config file that ease the configuration in Karabiner Elements. In Karabiner Elements, if you want to implement complex modification, you will need to edit the json file, which is wired, it is very likely loss for beginners who don&amp;rsquo;t know the sturcture of modification of Karabiner Elements.</description>
      <content:encoded><![CDATA[<p>If you don&rsquo;t know the basic syntax of Goku, please see the <a href="https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md">offical
tutorial</a>.</p>
<h1 id="what-is-karabiner-elements">What is Karabiner Elements?</h1>
<p>Karabiner Elements is a keyboard modifier on MacOS, which support key blindings
remap and define layer, or in another form, complex modification. <a href="https://karabiner-elements.pqrs.org/">Download
Karabiner Elements</a>.</p>
<h1 id="what-is-goku">What is Goku?</h1>
<p>Goku is a config file that ease the configuration in Karabiner Elements. In
Karabiner Elements, if you want to implement complex modification, you will need
to edit the json file, which is wired, it is very likely loss for beginners who
don&rsquo;t know the sturcture of modification of Karabiner Elements. Also, time is
limited, why don&rsquo;t use an easier tools that already on top of Karabiner Elements
to make life easier? <a href="https://github.com/yqrashawn/GokuRakuJoudo">Goku on
github</a></p>
<h1 id="define-your-customized-layer">Define your customized layer</h1>
<h2 id="1-why-define-layer">1. Why define layer</h2>
<p>The functionality of keyboard can be exteneded, one way is to define your own
layers. With layers, you can shorten the key blindings in some &ldquo;shortcut&rdquo;
usually require pressing three to four keys together. Or build an symbols layer
if you stuck in the current <code>number + shift</code> way.</p>
<h2 id="2-different-types-of-layers">2. Different types of layers</h2>
<h3 id="traditional-layers">Traditional layers</h3>
<p>Traditional layers like the layers of QMK mod-tap feature, a key&rsquo;s function is
divide into two, when you held down, it is modifier, and you loss its tap&rsquo;s
function, and vice verse.</p>
<h3 id="simlayers">Simlayers</h3>
<p>In Goku, <strong>simlayer</strong>(simultianeous-layer) differ from traditional layers which
you would not loss key&rsquo;s original fucniton. <strong>For example, if you define <code>f</code> as
your simlayer, if you held down <code>f</code>, stream of <code>f</code> will be inserted. Conversely,
if you define <code>f</code> as tranditional layers, no <code>f</code> is insertd even you held it
down.</strong></p>
<p>In the
<a href="https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md">tutorial</a>
of goku, author states the problems of traditional layers. But to me, they are
the benefits, since simalayer have delayed display and require really fast right
key followed. So, in this page, I would suggest you to use traditional layers.</p>
<h1 id="implement-layers-with-goku">Implement layers with Goku</h1>
<h2 id="1-define-variables">1. define variables.</h2>
<p>Variable help karabiner element know the state of your keyboard to act in
performs different events in each states.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;name of variable&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span>
</span></span></code></pre></div><p>It is a sturcture of variable, doble quoted name, 0 or 1 state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>   <span class="p">[</span><span class="s2">&#34;foovar-set&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span>   <span class="p">[</span><span class="s2">&#34;foovar-cd&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>
</span></span></code></pre></div><p>It is conditional event, the last one is the condition, the middle one is <code>to  event</code>, which set <code>foovar-set</code> to 0 or 1 if the condition is met.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>   <span class="p">[[</span><span class="s2">&#34;foovar1&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="s2">&#34;foovar2&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>     <span class="p">[</span><span class="s2">&#34;foovar&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>
</span></span></code></pre></div><p>It is same strcture of above but with extended <code>to event</code>, which set two
variable in sequence, the condition part can also be extened in vector <code>[[&quot;foo1&quot;  1] [&quot;foo2&quot; 1]]</code>, vector can expand as much as you want.</p>
<h2 id="2-mod-tap-layers">2. mod-tap Layers</h2>
<p>This type of layer active if you held down fookey. inactive if you release.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">w</span> <span class="p">[</span><span class="s2">&#34;tap_fookey&#34;</span> <span class="mi">1</span><span class="p">]</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="p">:</span><span class="n">alone</span> <span class="p">[:</span><span class="n">w</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">:</span><span class="n">afterup</span> <span class="p">[</span><span class="s2">&#34;tap_fookey&#34;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">tap_fookey</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>The first <code>[&quot;tap_fookey&quot; 1]</code> is the key event if you held down, <code>alone</code> is the
key event if you tap single. <code>:afterup</code> is after key up event. The last line
<code>:tap_fookey</code> tells karabiner to perform the following events if <code>&quot;tap_fookey&quot;</code>
is met, In this example, it is <code>w+. -&gt; 1</code> it is like the conditions.</p>
<h2 id="3-dead-keys">3. dead keys</h2>
<p>This type of layer active if you press fookeys, inactive if you press the
fooleavekey.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>            <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fooleavekey</span>       <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">0</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">dead_foo</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">foo_from</span>       <span class="p">[:</span><span class="n">foo_to</span> <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">0</span><span class="p">]]]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">foo_from</span>       <span class="p">:</span><span class="n">foo_to</span> <span class="p">]</span>
</span></span></code></pre></div><p>Dead key is actually a simple layer checked with variales state, the first event
in dead_foo will leave layer after press the <code>foo_from</code>, while the second
won&rsquo;t.<!-- raw HTML omitted -->
If you wish to leave the layer with the same keys you can:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">comma</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">0</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">comma</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">taped</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><h2 id="double-tap-layer">double tap layer</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">;;</span> <span class="n">check</span> <span class="n">double</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> <span class="n">chekc</span> <span class="n">single</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">right_shift</span> <span class="p">:</span><span class="n">right_shift</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">{:</span><span class="n">alone</span>  <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">delayed</span> <span class="p">{:</span><span class="n">invoked</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]</span> <span class="p">:</span><span class="n">canceled</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">params</span> <span class="p">{:</span><span class="n">delay</span> <span class="mi">1000</span><span class="p">}}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">two</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>This layer keep the function of <code>right shift</code>, but I don&rsquo;t know why it fail to
use <code>right shift</code> to escape.<!-- raw HTML omitted -->
The single tap check is a little bit complicate, nil is introduced in mod-tap
layer which extended the <code>to event</code>, new <code>:delayed</code> control the behaviour after
the key tapped, <code>:invoked</code> and <code>:canceled</code> work as their name.  <code>:params {:delay  1000}</code> denote the time for the accepted delay time, <code>invoked</code> event trigger
before that time, <code>canceled</code> event trigger after that time.<!-- raw HTML omitted -->
<strong>The double tap check should be put before single tap check.</strong><!-- raw HTML omitted -->
To escape the layer use the same key use the follow snippet instead:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="p">;;</span> <span class="n">check</span> <span class="n">double</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="p">;;</span> <span class="n">chekc</span> <span class="n">single</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span> <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">{:</span><span class="n">delayed</span> <span class="p">{:</span><span class="n">invoked</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]</span> <span class="p">:</span><span class="n">canceled</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">        <span class="p">:</span><span class="n">params</span> <span class="p">{:</span><span class="n">delay</span> <span class="mi">1000</span><span class="p">}}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">two</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">0</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>It first check that if right_shift is tap twice and once, and leave if tap twice
already. But this cannot perserve the function of <code>right shift</code>, so it cannnot
be act like modifier anymore, to be noted, the last example that perserve <code>right  shift</code> can replace by othey with variables, so as mod-tap layer and double
tapped layer at the same time.</p>
<h2 id="marco">Marco</h2>
<p>This is actually not a layer, but a collection of keys. I have defined a layer
to shorten repetitive keys sequence into single press.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">i</span>     <span class="p">[:</span><span class="n">i</span> <span class="p">:</span><span class="n">n</span> <span class="p">:</span><span class="n">s</span> <span class="p">:</span><span class="n">e</span> <span class="p">:</span><span class="n">r</span> <span class="p">:</span><span class="n">t</span> <span class="p">:</span><span class="n">spacebar</span> <span class="p">:</span><span class="n">a</span> <span class="p">:</span><span class="n">spacebar</span> <span class="p">:</span><span class="n">j</span> <span class="p">:</span><span class="n">o</span> <span class="p">:</span><span class="n">k</span> <span class="p">:</span><span class="n">e</span><span class="p">]]</span> 
</span></span></code></pre></div><p>Which will insert <code>insert a joke</code> with space if you press <code>i</code>.</p>
<h2 id="my-karabieredn">My karabier.edn</h2>
<p>Here is a
<a href="https://github.com/sokinpui/config/blob/main/karabiner.edn">reference</a> for your
own implementation.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Programmer MacBook Keyboard layout</title>
      <link>https://sokinpui.github.io/Blog/post/1-layout/</link>
      <pubDate>Sun, 26 Mar 2023 19:23:56 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/1-layout/</guid>
      <description>Abstruct 2023 is a start of AI era, with more strong AI tools explore to our life, typing maybe replaced by voice input one day, where natural language programming become true. But until now, typing is still not replacable. From daily usage to programming, the location of the keys may significantly effect the comfortable of long time typing. Here is a brief solution that hope to enhance the experience when typing on standard 78% keyboard.</description>
      <content:encoded><![CDATA[<h1 id="abstruct">Abstruct</h1>
<p>2023 is a start of AI era, with more strong AI tools explore to our life, typing
maybe replaced by voice input one day, where natural language programming become
true. But until now, typing is still not replacable. From daily usage to
programming, the location of the keys may significantly effect the comfortable
of long time typing. Here is a brief solution that hope to enhance the
experience when typing on standard 78% keyboard.</p>
<h1 id="reason-to-redesign">Reason to redesign.</h1>
<p>I use Macbook Air as my main machine, stick to it and cannot use an customizable
keyboard like <strong>planck&rsquo;s keyboard</strong> and <strong>hhkb keyboard</strong> for the desire of
protable. The plain of using standard 78% keyboard on Macbook is the overusage
of pinky, <code>Backspace</code>, <code>[</code>, <code>]</code>, <code>-</code>, <code>=</code> and <code>Enter</code> are all handled by right
pinky. As my right pinky is much weaker than left, which make typing long time a
difficult, inefficient and tired task. I believe it is true for other user who
programming a lot with Macbook.</p>
<p>There are so many plans and existing well designed layouts on the Internet,
while they are mainly for one who use a external non-standard keyboards instead
of standard. So I hope there will be more disscusion about configuration of
trivail standard keyboard.</p>
<h1 id="choose-of-base-layer-qwerty">Choose of base layer, Qwerty</h1>
<p>Not Colemak, Dvoark and any non-Qwerty. I have tried Colemak and Dvoark, but the
musale memory of Qwerty is too strong that make me feel more natural and
comfortalbe typing on Qwerty. Moreover, the change of layout may not bring
significant advantages and comfor for typing, 10 keys on homerow is never
enough, whatever layouts, your fingers still need to move along three rows to
type characters. The analysis of those Qwerty alternative always be to ideal,
without mention of muscale memory and symbols make such change not really solve
the plain. Another reason is that the time cost is too high and the improvement
is not that big, there is not need to explain why the time cost is high as it is
well explained by those Qwetrty touch typer how share their experience of
switching to non-Qwerty.</p>
<h1 id="analysis-before-design">Analysis before design</h1>
<p>Except the function row, all row is easier to reach even for number rows. I
don&rsquo;t touch type numbers rows using pinky fingers. Instead, I use ring fingers
which are much longers then pinky fingers. So the keyboard layout don&rsquo;t need to
relay on layers heavily like 40% planck&rsquo;s keyboard.</p>
<p>Let counts the key we need:</p>
<ol>
<li>30 characters on the main area of the keyboard including <code>,</code>, <code>.</code>, <code>/</code> and
<code>;</code>.</li>
<li>13 keys on numbers</li>
<li>8 modifier keys, <code>capslock</code>, <code>left right option</code>, <code>left right command</code>, <code>left  shift</code>, <code>control</code>, <code>fn</code> I don&rsquo;t count right shift since I never use it.</li>
<li>4 special keys, including <code>space</code>, <code>reutrn</code>, <code>tab</code> and <code>delete</code>.</li>
<li>4 arrow keys, I don&rsquo;t want to use home row arrow keys, since I seldom use
them, there is no need to prepare a layer for them.</li>
</ol>
<p>61 keys is already sweat enough for daily used, for those shortcut, I usually
reduce them from three or above keys into two keys by define a customizing
layer.</p>
<h1 id="layers">Layers</h1>
<p>There are two types of layers, dead keys and modifers</p>
<h2 id="dead-keys">Dead keys</h2>
<p>The layout of keyboard is chagned permanently untill you press other keys or the
inactive keys. One of the exmaple are the comma of
<a href="https://github.com/workman-layout/Workman/tree/master/mac">workman-dead</a>.</p>
<h2 id="modifers">modifers</h2>
<p>The layout is changed temporary, the layout return to default after release. One
of the example is <code>shift</code>.</p>
<h2 id="my-solution">My solution</h2>
<p>There are some keys that is underused, like space, tab and return. There are
much space that can be leveraged. They should perform tap-mode, which provide
two funciton when tap and held them down.</p>
<ol>
<li>Remap <code>space</code> to <code>space</code> when tap, <code>shift</code> when held.
It is much comfortable compare to use pinky finger to press shift.</li>
<li>Remap <code>left shift</code> to <code>escape</code> when tap, <code>control</code> when held. I use vim.</li>
<li>swap numbers and symbols for programming.</li>
<li>remap <code>caps lock</code> to <code>=</code> when tap, switch layer when held.</li>
<li>swap quote <code>'</code> and double quote <code>'</code>, and locate at the original position of
open bracket.</li>
<li>move hyphen and underscore to the original position of quote.</li>
<li>move backslash and pipe to the original position of hyphen.</li>
</ol>
<p><strong>Layers:</strong><!-- raw HTML omitted -->
caps lock layers(held down caps lock):<!-- raw HTML omitted -->
u: ]<!-- raw HTML omitted -->
i: [<!-- raw HTML omitted -->
j: }<!-- raw HTML omitted -->
k: {<!-- raw HTML omitted --></p>
<h2 id="macro-sequences">Macro sequences</h2>
<p>You can define a simple key that perform a sequence of key. It is better put
them in a layer to avoid error when typing.<!-- raw HTML omitted -->
I have defined some in the caps lock layer.<!-- raw HTML omitted -->
d: -&gt;<!-- raw HTML omitted -->
f: !=<!-- raw HTML omitted -->
:: @:<!-- raw HTML omitted --></p>
<h1 id="implementation">Implementation</h1>
<p>You may wonder how to implement those change on Mac, you may use <a href="https://karabiner-elements.pqrs.org/">Karabiner
Elements</a> together with
<a href="https://github.com/yqrashawn/GokuRakuJoudo">Goku</a> to define your own keyboard
layout.</p>
<h1 id="conclusion">Conclusion</h1>
<p>There are lots of method to increase comfortable and efficiency to get the job
done, before typing to modify your keyboard, make sure you have tried to use
<strong>good tools</strong> like Vim, IDE, auto compeletion, snippets and scritping to
reduece typing. Single modification of keyboard won&rsquo;t make you a better typer.<br>
With the help of snippets and auto completion, I now write code with less demand
to type all the symbols manually, therefor a entire symbols layers on homerow is
no needed(Previously I have one, use space to active, convert home row into
common used symbols.)</p>
<p>


</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
