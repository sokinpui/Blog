<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>goku on So&#39;s Blog</title>
    <link>https://sokinpui.github.io/Blog/tags/goku/</link>
    <description>Recent content in goku on So&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 Mar 2023 17:27:25 +0800</lastBuildDate><atom:link href="https://sokinpui.github.io/Blog/tags/goku/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Define layer using Karabiner Elements togther with Goku</title>
      <link>https://sokinpui.github.io/Blog/post/2-goku/</link>
      <pubDate>Fri, 31 Mar 2023 17:27:25 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/2-goku/</guid>
      <description>If you don&amp;rsquo;t know the basic syntax of Goku, please see the offical tutorial.
What is Karabiner Elements? Karabiner Elements is a keyboard modifier on MacOS, which support key blindings remap and define layer, or in another form, complex modification. Download Karabiner Elements.
What is Goku? Goku is a config file that ease the configuration in Karabiner Elements. In Karabiner Elements, if you want to implement complex modification, you will need to edit the json file, which is wired, it is very likely loss for beginners who don&amp;rsquo;t know the sturcture of modification of Karabiner Elements.</description>
      <content:encoded><![CDATA[<p>If you don&rsquo;t know the basic syntax of Goku, please see the <a href="https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md">offical
tutorial</a>.</p>
<h1 id="what-is-karabiner-elements">What is Karabiner Elements?</h1>
<p>Karabiner Elements is a keyboard modifier on MacOS, which support key blindings
remap and define layer, or in another form, complex modification. <a href="https://karabiner-elements.pqrs.org/">Download
Karabiner Elements</a>.</p>
<h1 id="what-is-goku">What is Goku?</h1>
<p>Goku is a config file that ease the configuration in Karabiner Elements. In
Karabiner Elements, if you want to implement complex modification, you will need
to edit the json file, which is wired, it is very likely loss for beginners who
don&rsquo;t know the sturcture of modification of Karabiner Elements. Also, time is
limited, why don&rsquo;t use an easier tools that already on top of Karabiner Elements
to make life easier? <a href="https://github.com/yqrashawn/GokuRakuJoudo">Goku on
github</a></p>
<h1 id="define-your-customized-layer">Define your customized layer</h1>
<h2 id="1-why-define-layer">1. Why define layer</h2>
<p>The functionality of keyboard can be exteneded, one way is to define your own
layers. With layers, you can shorten the key blindings in some &ldquo;shortcut&rdquo;
usually require pressing three to four keys together. Or build an symbols layer
if you stuck in the current <code>number + shift</code> way.</p>
<h2 id="2-different-types-of-layers">2. Different types of layers</h2>
<h3 id="traditional-layers">Traditional layers</h3>
<p>Traditional layers like the layers of QMK mod-tap feature, a key&rsquo;s function is
divide into two, when you held down, it is modifier, and you loss its tap&rsquo;s
function, and vice verse.</p>
<h3 id="simlayers">Simlayers</h3>
<p>In Goku, <strong>simlayer</strong>(simultianeous-layer) differ from traditional layers which
you would not loss key&rsquo;s original fucniton. <strong>For example, if you define <code>f</code> as
your simlayer, if you held down <code>f</code>, stream of <code>f</code> will be inserted. Conversely,
if you define <code>f</code> as tranditional layers, no <code>f</code> is insertd even you held it
down.</strong></p>
<p>In the
<a href="https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md">tutorial</a>
of goku, author states the problems of traditional layers. But to me, they are
the benefits, since simalayer have delayed display and require really fast right
key followed. So, in this page, I would suggest you to use traditional layers.</p>
<h1 id="implement-layers-with-goku">Implement layers with Goku</h1>
<h2 id="1-define-variables">1. define variables.</h2>
<p>Variable help karabiner element know the state of your keyboard to act in
performs different events in each states.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="s2">&#34;name of variable&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span>
</span></span></code></pre></div><p>It is a sturcture of variable, doble quoted name, 0 or 1 state.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>   <span class="p">[</span><span class="s2">&#34;foovar-set&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span>   <span class="p">[</span><span class="s2">&#34;foovar-cd&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>
</span></span></code></pre></div><p>It is conditional event, the last one is the condition, the middle one is <code>to  event</code>, which set <code>foovar-set</code> to 0 or 1 if the condition is met.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>   <span class="p">[[</span><span class="s2">&#34;foovar1&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="s2">&#34;foovar2&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>     <span class="p">[</span><span class="s2">&#34;foovar&#34;</span> <span class="mi">0</span><span class="o">/</span><span class="mi">1</span><span class="p">]]</span>
</span></span></code></pre></div><p>It is same strcture of above but with extended <code>to event</code>, which set two
variable in sequence, the condition part can also be extened in vector <code>[[&quot;foo1&quot;  1] [&quot;foo2&quot; 1]]</code>, vector can expand as much as you want.</p>
<h2 id="2-mod-tap-layers">2. mod-tap Layers</h2>
<p>This type of layer active if you held down fookey. inactive if you release.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">w</span> <span class="p">[</span><span class="s2">&#34;tap_fookey&#34;</span> <span class="mi">1</span><span class="p">]</span> <span class="n">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="p">:</span><span class="n">alone</span> <span class="p">[:</span><span class="n">w</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">:</span><span class="n">afterup</span> <span class="p">[</span><span class="s2">&#34;tap_fookey&#34;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">tap_fookey</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>The first <code>[&quot;tap_fookey&quot; 1]</code> is the key event if you held down, <code>alone</code> is the
key event if you tap single. <code>:afterup</code> is after key up event. The last line
<code>:tap_fookey</code> tells karabiner to perform the following events if <code>&quot;tap_fookey&quot;</code>
is met, In this example, it is <code>w+. -&gt; 1</code> it is like the conditions.</p>
<h2 id="3-dead-keys">3. dead keys</h2>
<p>This type of layer active if you press fookeys, inactive if you press the
fooleavekey.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fookey</span>            <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">fooleavekey</span>       <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">0</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">dead_foo</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">foo_from</span>       <span class="p">[:</span><span class="n">foo_to</span> <span class="p">[</span><span class="s2">&#34;dead_foo&#34;</span> <span class="mi">0</span><span class="p">]]]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">foo_from</span>       <span class="p">:</span><span class="n">foo_to</span> <span class="p">]</span>
</span></span></code></pre></div><p>Dead key is actually a simple layer checked with variales state, the first event
in dead_foo will leave layer after press the <code>foo_from</code>, while the second
won&rsquo;t.<!-- raw HTML omitted -->
If you wish to leave the layer with the same keys you can:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">comma</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">0</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">comma</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;taped&#34;</span> <span class="mi">0</span> <span class="p">]</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">taped</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><h2 id="double-tap-layer">double tap layer</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">;;</span> <span class="n">check</span> <span class="n">double</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> <span class="n">chekc</span> <span class="n">single</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">right_shift</span> <span class="p">:</span><span class="n">right_shift</span> <span class="n">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">{:</span><span class="n">alone</span>  <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">delayed</span> <span class="p">{:</span><span class="n">invoked</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]</span> <span class="p">:</span><span class="n">canceled</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">params</span> <span class="p">{:</span><span class="n">delay</span> <span class="mi">1000</span><span class="p">}}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="n">two</span>
</span></span><span class="line"><span class="cl"><span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>This layer keep the function of <code>right shift</code>, but I don&rsquo;t know why it fail to
use <code>right shift</code> to escape.<!-- raw HTML omitted -->
The single tap check is a little bit complicate, nil is introduced in mod-tap
layer which extended the <code>to event</code>, new <code>:delayed</code> control the behaviour after
the key tapped, <code>:invoked</code> and <code>:canceled</code> work as their name.  <code>:params {:delay  1000}</code> denote the time for the accepted delay time, <code>invoked</code> event trigger
before that time, <code>canceled</code> event trigger after that time.<!-- raw HTML omitted -->
<strong>The double tap check should be put before single tap check.</strong><!-- raw HTML omitted -->
To escape the layer use the same key use the follow snippet instead:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="p">;;</span> <span class="n">check</span> <span class="n">double</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">1</span><span class="p">]</span>  <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="p">;;</span> <span class="n">chekc</span> <span class="n">single</span> <span class="n">tap</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[:</span><span class="n">right_shift</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">1</span><span class="p">]]</span> <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">{:</span><span class="n">delayed</span> <span class="p">{:</span><span class="n">invoked</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]</span> <span class="p">:</span><span class="n">canceled</span> <span class="p">[</span><span class="s2">&#34;one&#34;</span> <span class="mi">0</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">        <span class="p">:</span><span class="n">params</span> <span class="p">{:</span><span class="n">delay</span> <span class="mi">1000</span><span class="p">}}]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">:</span><span class="n">two</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">right_shift</span>  <span class="p">[</span><span class="s2">&#34;two&#34;</span> <span class="mi">0</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[:</span><span class="n">period</span>  <span class="p">:</span><span class="mi">1</span>  <span class="p">]</span>
</span></span></code></pre></div><p>It first check that if right_shift is tap twice and once, and leave if tap twice
already. But this cannot perserve the function of <code>right shift</code>, so it cannnot
be act like modifier anymore, to be noted, the last example that perserve <code>right  shift</code> can replace by othey with variables, so as mod-tap layer and double
tapped layer at the same time.</p>
<h2 id="marco">Marco</h2>
<p>This is actually not a layer, but a collection of keys. I have defined a layer
to shorten repetitive keys sequence into single press.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[:</span><span class="n">i</span>     <span class="p">[:</span><span class="n">i</span> <span class="p">:</span><span class="n">n</span> <span class="p">:</span><span class="n">s</span> <span class="p">:</span><span class="n">e</span> <span class="p">:</span><span class="n">r</span> <span class="p">:</span><span class="n">t</span> <span class="p">:</span><span class="n">spacebar</span> <span class="p">:</span><span class="n">a</span> <span class="p">:</span><span class="n">spacebar</span> <span class="p">:</span><span class="n">j</span> <span class="p">:</span><span class="n">o</span> <span class="p">:</span><span class="n">k</span> <span class="p">:</span><span class="n">e</span><span class="p">]]</span> 
</span></span></code></pre></div><p>Which will insert <code>insert a joke</code> with space if you press <code>i</code>.</p>
<h2 id="my-karabieredn">My karabier.edn</h2>
<p>Here is a
<a href="https://github.com/sokinpui/config/blob/main/karabiner.edn">reference</a> for your
own implementation.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
