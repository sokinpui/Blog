<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>neovim on Home</title>
    <link>https://sokinpui.github.io/Blog/tags/neovim/</link>
    <description>Recent content in neovim on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Aug 2023 22:16:35 +0800</lastBuildDate><atom:link href="https://sokinpui.github.io/Blog/tags/neovim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Consider Embrance the ecosystem of Neovim.</title>
      <link>https://sokinpui.github.io/Blog/post/vim7-considerneovim/</link>
      <pubDate>Fri, 04 Aug 2023 22:16:35 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim7-considerneovim/</guid>
      <description>Blog written for those who are struggling about switch to Neovim from Vim</description>
      <content:encoded><![CDATA[<p>Neovim in 2023 has become an popular choice of editor, its version become stable those day. Neovim to Vim is like Vim to Vi those day, it has introduced a clear lua API for writing plugins, built-in LSP support. Although some plugins like <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> has provide feature like LSP and auto-completion similar as VSCode, the built-in LSP support just give the sense of it will last longer and improved by a larger community as it is built-in. Also, more lua plugins has come out, which sadly only support Neovim, as they need Neovim API.</p>
<h1 id="vim">Vim</h1>
<p>Back to the day I launch Vim first time, Vim have already give me different feel from modern editor, its default color scheme, its &ldquo;non-beginner friendly&rdquo; default setting force me to google solution many times. After use Vim for sometimes, I have known Neovim, a forked version of Vim, fully compatible with vimscirpt plugins, a modern version of Vim, and extended in different language lua, At the beginning, I don&rsquo;t want to make a switch, current state of Vim was already make me satisfed. The introduction of Vim9script excited me a lot, I wrote vimscirpt before lua, in my opinion, vimscirpt as a Domain Specify Language, it is less verbose than lua. Also, I don&rsquo;t write big plugins, lua API don&rsquo;t attact me much. But the performance of Vim9script has been improved a lot compare to lengency vimscirpt. I still want to stay with Vim. However I discover quite many vimers I have followed on online has switch to Neovim, it is the first time I have consider seriously about making a switch. I can&rsquo;t found myself a good reason not to change other than it may waste my time. Since I use Vim first, the plugins I relay on are still pure vimscirpt plugins, making switching no benefits. I told myself, if there is a must have plugins that is specified to Neovim, I should make a switch.</p>
<h1 id="neovim">Neovim</h1>
<p>The plugin I switch for is <a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter</a>. Treesitter provide correct highlight by understanding your code structure. Recently Vim/Neovim highlihgt is base on regular expression, which may not cover all the case, therefore render syntax highlight wrong,</p>
<p>My <code>init.vim</code> without Treesitter:
<img loading="lazy" src="/Blog/post/vim7-considerneovim/no-treesitter.png" type="" alt="no-treesitter"  /></p>
<p>My <code>init.vim</code> with Treesitter:
<img loading="lazy" src="/Blog/post/vim7-considerneovim/treesitter.png" type="" alt="treesitter"  /></p>
<p>Correct highlight is one of feature treesitter can provide, other feature like indention, selection increment/decrement are also supported. If the language you are using have treesitter parse, you can enjoy those features. The abstruct syntax tree where treesitter powered from, is also a good source for writing a plugin, extend you text object to function, class, object, or declaration. Of course regular expression can do so, it just can&rsquo;t make sure 100% correct and need to build rule for matching. I know emacs also integrate Treesitter in Emacs29. I believe plugins that can understand the code will keep exploring more surprise usage, introducting more useful features in the future. Therefor I make switch.</p>
<p>The switching actually don&rsquo;t cost anytime, I spend minutes finding the color scheem support treesitter. Installing them using the plugins manager I used in vim, everything just work.</p>
<h1 id="why-neovim">Why Neovim</h1>
<p>Simply becuase you will have a greater community, both vim and neovim community, merely missing compatible with Vim9script. You can enjoy plugins from Vim and Neovim. This reason is strong enough for one who have struggling between Neovim and Vim. The number of plugins that is written in Vim9script are handfully small.</p>
<h1 id="neovim-from-vim">Neovim from Vim</h1>
<p>Before using Neovim, I use <code>:sh</code> often. However, this command was dropped in Neovim, I don&rsquo;t understand why this is dropped. Nevertheless, I change my habit, even better practice after change. I use new tmux window instead of <code>:sh</code> to recall the shell Neovim from. If I really want to copy some content from the shell opened Neovim, I can use <code>Ctrl-Z</code> to suspend Neovim and use <code>fg</code> continue Neovim process.</p>
<p>I agree some discussion about switching or not, some people hold that there is no features they need in Neovim. That maybe true, but how about plugin ecosystem, it seems more powerful plugins come out, you may want one of them in the future. Switch early so that suffer less in the future. Switch won&rsquo;t consume too much time if you going to keep you configuration in vimscirpt, if necessary to use lua, you can use <code>lua</code> in you <code>*.vim</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">lua</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;&lt;name of lua moduale&gt;&#34;</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></div><p>Switching to Neovim from Vim are simple because you are still using <em>&ldquo;the same&rdquo;</em> editor, the configuration, the way how vim handle text editor, the way to extend is similiar. Unlike switching to other types of editor like Emacs, which definitly have different <em>&ldquo;Emacs way&rdquo;</em> you need to adapt.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Consider Embrance the ecosystem of Neovim.</title>
      <link>https://sokinpui.github.io/Blog/series/vim/vim7/</link>
      <pubDate>Fri, 04 Aug 2023 22:16:35 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/series/vim/vim7/</guid>
      <description>Blog written for those who are struggling about switch to Neovim from Vim</description>
      <content:encoded><![CDATA[<p>Neovim in 2023 has become an popular choice of editor, its version become stable those day. Neovim to Vim is like Vim to Vi those day, it has introduced a clear lua API for writing plugins, built-in LSP support. Although some plugins like <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a> has provide feature like LSP and auto-completion similar as VSCode, the built-in LSP support just give the sense of it will last longer and improved by a larger community as it is built-in. Also, more lua plugins has come out, which sadly only support Neovim, as they need Neovim API.</p>
<h1 id="vim">Vim</h1>
<p>Back to the day I launch Vim first time, Vim have already give me different feel from modern editor, its default color scheme, its &ldquo;non-beginner friendly&rdquo; default setting force me to google solution many times. After use Vim for sometimes, I have known Neovim, a forked version of Vim, fully compatible with vimscirpt plugins, a modern version of Vim, and extended in different language lua, At the beginning, I don&rsquo;t want to make a switch, current state of Vim was already make me satisfed. The introduction of Vim9script excited me a lot, I wrote vimscirpt before lua, in my opinion, vimscirpt as a Domain Specify Language, it is less verbose than lua. Also, I don&rsquo;t write big plugins, lua API don&rsquo;t attact me much. But the performance of Vim9script has been improved a lot compare to lengency vimscirpt. I still want to stay with Vim. However I discover quite many vimers I have followed on online has switch to Neovim, it is the first time I have consider seriously about making a switch. I can&rsquo;t found myself a good reason not to change other than it may waste my time. Since I use Vim first, the plugins I relay on are still pure vimscirpt plugins, making switching no benefits. I told myself, if there is a must have plugins that is specified to Neovim, I should make a switch.</p>
<h1 id="neovim">Neovim</h1>
<p>The plugin I switch for is <a href="https://github.com/nvim-treesitter/nvim-treesitter">nvim-treesitter</a>. Treesitter provide correct highlight by understanding your code structure. Recently Vim/Neovim highlihgt is base on regular expression, which may not cover all the case, therefore render syntax highlight wrong,</p>
<p>My <code>init.vim</code> without Treesitter:
<img loading="lazy" src="/Blog/series/vim/vim7/no-treesitter.png" type="" alt="no-treesitter"  /></p>
<p>My <code>init.vim</code> with Treesitter:
<img loading="lazy" src="/Blog/series/vim/vim7/treesitter.png" type="" alt="treesitter"  /></p>
<p>Correct highlight is one of feature treesitter can provide, other feature like indention, selection increment/decrement are also supported. If the language you are using have treesitter parse, you can enjoy those features. The abstruct syntax tree where treesitter powered from, is also a good source for writing a plugin, extend you text object to function, class, object, or declaration. Of course regular expression can do so, it just can&rsquo;t make sure 100% correct and need to build rule for matching. I know emacs also integrate Treesitter in Emacs29. I believe plugins that can understand the code will keep exploring more surprise usage, introducting more useful features in the future. Therefor I make switch.</p>
<p>The switching actually don&rsquo;t cost anytime, I spend minutes finding the color scheem support treesitter. Installing them using the plugins manager I used in vim, everything just work.</p>
<h1 id="why-neovim">Why Neovim</h1>
<p>Simply becuase you will have a greater community, both vim and neovim community, merely missing compatible with Vim9script. You can enjoy plugins from Vim and Neovim. This reason is strong enough for one who have struggling between Neovim and Vim. The number of plugins that is written in Vim9script are handfully small.</p>
<h1 id="neovim-from-vim">Neovim from Vim</h1>
<p>Before using Neovim, I use <code>:sh</code> often. However, this command was dropped in Neovim, I don&rsquo;t understand why this is dropped. Nevertheless, I change my habit, even better practice after change. I use new tmux window instead of <code>:sh</code> to recall the shell Neovim from. If I really want to copy some content from the shell opened Neovim, I can use <code>Ctrl-Z</code> to suspend Neovim and use <code>fg</code> continue Neovim process.</p>
<p>I agree some discussion about switching or not, some people hold that there is no features they need in Neovim. That maybe true, but how about plugin ecosystem, it seems more powerful plugins come out, you may want one of them in the future. Switch early so that suffer less in the future. Switch won&rsquo;t consume too much time if you going to keep you configuration in vimscirpt, if necessary to use lua, you can use <code>lua</code> in you <code>*.vim</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">lua</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;&lt;name of lua moduale&gt;&#34;</span><span class="p">)</span><span class="err">
</span></span></span></code></pre></div><p>Switching to Neovim from Vim are simple because you are still using <em>&ldquo;the same&rdquo;</em> editor, the configuration, the way how vim handle text editor, the way to extend is similiar. Unlike switching to other types of editor like Emacs, which definitly have different <em>&ldquo;Emacs way&rdquo;</em> you need to adapt.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tips for merging from vim-plug to lazy.nvim</title>
      <link>https://sokinpui.github.io/Blog/post/vim-4/</link>
      <pubDate>Sat, 29 Jul 2023 23:58:37 +0800</pubDate>
      
      <guid>https://sokinpui.github.io/Blog/post/vim-4/</guid>
      <description>Tips and issue I discovered during mergation. Hope to save someone&amp;#39;s time in the future.</description>
      <content:encoded><![CDATA[<p>Tips and issue I discovered during mergation. Hope to save someone&rsquo;s time in the future.</p>
<h1 id="why-lazynvim">Why lazy.nvim</h1>
<p>This is a long story, shall we start from another application <a href="https://obsidian.md/">obsidian</a>. I use <strong>obsidian</strong> for notes taking. I want some faster, non-repeative and easier note editing tools, and therefor I use some editor as my obsidian editing engine, in my case, Neovim Setup autocompletion and snippets in Neovim is always easier than same setup on obsidian. In Neovim, we have <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>, <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a> and <a href="https://github.com/ms-jpq/coq_nvim">coq_nvim</a> etc&hellip; And you have many snippets source. However, I cannot easily insert link to files as well as link to header in Vim. Although coc.nvim already provide some <a href="https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources#completion-sources">source</a>, lacking obsidian. Then I google for solution, I found <a href="https://github.com/epwalsh/obsidian.nvim">obsidian.nvim</a>, which say it provide link completion source for <strong>nvim-cmp</strong>
<img loading="lazy" src="/Blog/post/vim-4/obsidian-nvim.png" type="" alt="obsidian-nvim"  /></p>
<p>Then I have look at nvim-cmp, It separate autocompletion front end and back end, user have too integrate them manually. In terms of personalization, it provide more free. It terms of out-of-box, it is bad. If only insert link to relative file, <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> with some tweaks can do so.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="c">&#34;find the root git repo, in case of obsidian, it is the vault</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; insert relative path</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">l</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span>&#39;<span class="nx">fd</span> <span class="p">--</span><span class="nx">type</span><span class="p">=</span><span class="nx">file</span> .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    \ $<span class="p">(</span><span class="nx">git</span> <span class="nx">rev</span><span class="p">-</span><span class="nx">parse</span> <span class="p">--</span><span class="nx">show</span><span class="p">-</span><span class="nx">cdup</span> <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span><span class="nx">null</span><span class="p">)</span>&#39;<span class="p">)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">
</span></span></span><span class="line"><span class="cl"><span class="c">&#34; insert full path</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span><span class="nx">f</span><span class="p">&gt;</span> <span class="nx">fzf</span>#<span class="nx">vim</span>#<span class="nx">complete</span>#<span class="nx">path</span><span class="p">(</span>&#39;<span class="nx">fd</span> <span class="p">--</span><span class="nx">type</span><span class="p">=</span><span class="nx">file</span> .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>    \ $<span class="p">(</span><span class="nx">git</span> <span class="nx">rev</span><span class="p">-</span><span class="nx">parse</span> <span class="p">--</span><span class="nx">show</span><span class="p">-</span><span class="nx">toplevel</span> <span class="m">2</span><span class="p">&gt;</span> <span class="sr">/dev/</span><span class="nx">null</span><span class="p">)</span>&#39;<span class="p">)</span><span class="err">
</span></span></span></code></pre></div><p>But too much tweaks for insert header as smooth as obsidian.</p>
<p>So, I try nvim-cmp, I just find that many of Neovim specify plugins have to configurate in lua, it should be easier to manage those plugin with some Neovim plugin manager like <a href="https://github.com/folke/lazy.nvim">lavy.nvim</a>. (Many lua plugins provide snippets for installation and configuration at the same place, but require lazy.nvim or packer.nvim) Then, this is the beginning of this blog.</p>
<h1 id="issue">issue</h1>
<p>can&rsquo;t use pack anymore
require dependency if this is some plugins of plugins.</p>
<p>Lazy.nvim will and need to manage all your plugin, see the description from <strong>lazy.nvim</strong></p>
<blockquote>
<p>lazy.nvim does NOT use Neovim packages and even disables plugin loading completely (vim.go.loadplugins = false). It takes over the complete startup sequence for more flexibility and better performance.
In practice this means that step 10 of Neovim Initialization is done by Lazy:</p>
<p>All the plugins&rsquo; init() functions are executed
All plugins with lazy=false are loaded. This includes sourcing /plugin and /ftdetect files. (/after will not be sourced yet)
All files from /plugin and /ftdetect directories in you rtp are sourced (excluding /after)
All /after/plugin files are sourced (this includes /after from plugins)</p>
<p>Files from runtime directories are always sourced in alphabetical order.
So all the plugins installed with vim built-in plugins will not be loaded, or you have to add extra options when you calling:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span><span class="n">dir</span><span class="o">=</span><span class="s1">&#39;~/config/nvim/pack/*/start/Plugin&#39;</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="kc">true</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>when return the plugin table spec to <strong>lazy.nvim</strong>, if you use pack directory to manage personal scirpt or plugins like me, you have to consider move those plugins into your <code>$NVIMRUNTIMPATH</code> <code>~/.confg/nvim</code>. I merge them with simple bash script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">moveToRtp(){
</span></span><span class="line"><span class="cl">  for plugindir in $*; do
</span></span><span class="line"><span class="cl">    cd $plugindir
</span></span><span class="line"><span class="cl">    for file in $(find . -type f)
</span></span><span class="line"><span class="cl">      rtp=$(echo $(echo $file | sed &#34;s/\.\///&#34;) | sed &#34;s/\/.*$//&#34;)
</span></span><span class="line"><span class="cl">      cp file &#34;~/.config/nvim/$rtp&#34;
</span></span><span class="line"><span class="cl">    cd ..
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">moveToRtp Plugin1 Plugin2 Plugin3 ...
</span></span></code></pre></div><p>This simple script will can move plugins don&rsquo;t contain <code>/after/*</code>. I just merge <code>/after/*</code> manually.</p>
<h1 id="plugins-need-to-take-extra-care-durig-mergation">plugins need to take extra care durig mergation</h1>
<p>Some plugins configuration need special care when configure with <strong>lazy.nvim</strong>. Most of the case I found related to plugins&rsquo; compability with <em>lua</em>, I would recommend if the confiuration is already in vimscript, keep going with vimscript if you don&rsquo;t care performance loss(actually I don&rsquo;t know how much loss, maybe it is ignorable)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;some/plugin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">vim.cmd</span><span class="p">(</span><span class="s">[[
</span></span></span><span class="line"><span class="cl"><span class="s">            let g:plguinSettings = &#34;...&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">            noremap &lt;C-j&gt; &lt;Plug&gt;(plugin-do-something)
</span></span></span><span class="line"><span class="cl"><span class="s">        ]]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It should solve most of the problem and save time during mergation because you can avoid rewrite all configuration in lua when vim plugins usually provide vimscript api for configuration. Due to the difference between data structure of vimscript and lua, <code>vim.g.setttingAPI = &quot;...&quot;</code> may not always work.</p>
<h2 id="1-fernvimhttpsgithubcomlambdalisuefernvim">1. <a href="https://github.com/lambdalisue/fern.vim">fern.vim</a></h2>
<blockquote>
<p>Fern (furn) is a general purpose asynchronous tree viewer written in pure Vim script.
If you use fern with some <a href="https://github.com/lambdalisue/fern.vim/wiki/Plugins">external plugins</a>, you should remember add them as dependency of <strong>fern.vim</strong>:</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;lambdalisue/fern.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;lambdalisue/fern-hijack.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;lambdalisue/fern-mapping-project-top.vim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;sokinpui/my-fern-preview.vim&#34;</span><span class="p">,</span>    
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Otherwise, you may see error like:
<img loading="lazy" src="/Blog/post/vim-4/fern-issue.png" type="" alt="fern-issue.png"  /></p>
<h2 id="2-fzfvimhttpsgithubcomjunegunnfzfvim">2. <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a></h2>
<p>If install <strong>fzf.vim</strong> with vim-plug, I don&rsquo;t have to install <a href="https://github.com/junegunn/fzf">fzf</a> if I have install fzf locally outside vim. However, you should do so in <strong>lazy.nvim</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;junegunn/fzf.vim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">build</span> <span class="o">=</span> <span class="s2">&#34;./install --all&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;junegunn/fzf&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Otherwise, error again:
<img loading="lazy" src="/Blog/post/vim-4/fzf.vim.png" type="" alt="fzf"  /></p>
<h2 id="3-visual-multihttpsgithubcommg979vim-visual-multi">3. <a href="https://github.com/mg979/vim-visual-multi">visual-multi</a></h2>
<p>It is a mulit cursor plugin for Vim. If you remap key like me, I remap <code>s</code> to <code>c</code> in multi-cursor mode. In lua, you should use</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;mg979/vim-visual-multi&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">branch</span> <span class="o">=</span> <span class="s2">&#34;master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">VM_custom_remaps</span> <span class="o">=</span> <span class="p">{</span> <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>instead of <code>let g:VM_custom_remaps = { 's' = 'c' }</code> in vimscript.</p>
<h2 id="4-auto-pairshttpsgithubcomjiangmiaoauto-pairs">4. <a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;LunarWatcher/auto-pairs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">AutoPairs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;(&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;[&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;]&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;{&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;}&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#39;&#39;] = &#39;&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#34;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#34;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;`&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;`&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&lt;!--&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;--&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;/*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;*/&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;```&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;```&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="s2">&#34;&#39;&#39;&#39;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;&#39;&#39;&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Since offical version in vimscript is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">AutoPairs</span> <span class="p">=</span> {<span class="s1">&#39;(&#39;</span>:<span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="s1">&#39;[&#39;</span>:<span class="s1">&#39;]&#39;</span><span class="p">,</span> <span class="s1">&#39;{&#39;</span>:<span class="s1">&#39;}&#39;</span><span class="p">,</span><span class="s2">&#34;&#39;&#34;</span>:<span class="s2">&#34;&#39;&#34;</span><span class="p">,</span><span class="s1">&#39;&#34;&#39;</span>:<span class="s1">&#39;&#34;&#39;</span><span class="p">,</span> <span class="s2">&#34;`&#34;</span>:<span class="s2">&#34;`&#34;</span><span class="p">,</span> <span class="s1">&#39;&lt;!--&#39;</span>:<span class="s1">&#39;--&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;/*&#39;</span>:<span class="s1">&#39;*/&#39;</span><span class="p">,</span> <span class="s1">&#39;```&#39;</span>:<span class="s1">&#39;```&#39;</span><span class="p">,</span> <span class="s1">&#39;&#34;&#34;&#34;&#39;</span>:<span class="s1">&#39;&#34;&#34;&#34;&#39;</span><span class="p">,</span> <span class="s2">&#34;&#39;&#39;&#39;&#34;</span>:<span class="s2">&#34;&#39;&#39;&#39;&#34;</span>}<span class="err">
</span></span></span></code></pre></div><h2 id="5-sandwich-vimhttpsgithubcommachakannvim-sandwich">5. <a href="https://github.com/machakann/vim-sandwich">sandwich-vim</a></h2>
<p>I don&rsquo;t know why <code>g:sandwich_no_default_key_mappings</code> cannnot set via <strong>Lazy.nvim</strong> with lua. I have to do so to take configuration work</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;machakann/vim-sandwich&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.cmd</span><span class="p">(</span><span class="s">[[
</span></span></span><span class="line"><span class="cl"><span class="s">let g:sandwich_no_default_key_mappings = 1
</span></span></span><span class="line"><span class="cl"><span class="s">&#34; my mapping
</span></span></span><span class="line"><span class="cl"><span class="s">...
</span></span></span><span class="line"><span class="cl"><span class="s">...
</span></span></span><span class="line"><span class="cl"><span class="s">]]</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>and then in <code>init.lua</code>, I should call this block with.config</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">require(&#34;lazy&#34;).setup({
</span></span><span class="line"><span class="cl">    require(&#34;plugins.sandwich&#34;).config,
</span></span><span class="line"><span class="cl">},{})
</span></span></code></pre></div><h2 id="6-ultisnipshttpsgithubcomsirverultisnips-x-nvim-cmphttpsgithubcomhrsh7thnvim-cmp">6. <a href="https://github.com/SirVer/ultisnips">Ultisnips</a> x <a href="https://github.com/hrsh7th/nvim-cmp">nvim-cmp</a></h2>
<p>The <code>tab</code> will sucks if you have setting wrong, this part is the most time-consumming part to debug, I nearly give up with nvim-cmp because of its bad properties.</p>
<p>In <strong>Ultisnips</strong>, you can change the key for expand and jump, since I don&rsquo;t like press <code>&lt;CR&gt;</code> to confirm completion selection, I use <code>&lt;C-j&gt;</code> to expand and jump forward in snips, <code>&lt;C-k&gt;</code> to jump backward.</p>
<p>At the beginning, I try follow plugin table spec for nvim-cmp:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SirVer/ultisnips&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;hrsh7th/nvim-cmp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-buffer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;FelipeLema/cmp-async-path&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-nvim-lsp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--&#39;hrsh7th/cmp-cmdline&#39;,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-calc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;onsails/lspkind-nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;quangnguyen30192/cmp-nvim-ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">-- optional call to setup (see customization section)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;cmp_nvim_ultisnips&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">                <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">after</span> <span class="o">=</span> <span class="s2">&#34;SirVer/ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">has_words_before</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">local</span> <span class="n">line</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_win_get_cursor</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="kr">return</span> <span class="n">col</span> <span class="o">~=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_get_lines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="kc">true</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span><span class="n">sub</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span><span class="n">match</span><span class="p">(</span><span class="s2">&#34;%s&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;cmp&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--local lspkind = require(&#39;lspkind&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">cmp.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">snippet</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">expand</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">vim.fn</span><span class="p">[</span><span class="s2">&#34;UltiSnips#Anon&#34;</span><span class="p">](</span><span class="n">args.body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;buffer&#39;</span> <span class="p">,</span> <span class="n">keyword_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;nvim_lsp&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;ultisnips&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">--{ name = &#39;cmdline&#39; },</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;async_path&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;calc&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">mapping</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">.</span><span class="n">preset.insert</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_next_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">elseif</span> <span class="n">has_words_before</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;S-Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_prev_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>Pay attention with this three line</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span></code></pre></div><p>No matter in lua or in vimscript</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsExpandTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpForwardTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpBackwardTrigger</span> <span class="p">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span><span class="err">
</span></span></span></code></pre></div><p>The tab will break, I don&rsquo;t know why, with above three lines, tab will act like:
<img loading="lazy" src="/Blog/post/vim-4/snips_jump.gif" type="" alt="snip_jump1"  /></p>
<p>However, if those three line is out of management of <strong>lazy.nvim</strong>, the tab just work!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">M</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M.config</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;SirVer/ultisnips&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;hrsh7th/nvim-cmp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">dependencies</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-buffer&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;FelipeLema/cmp-async-path&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-nvim-lsp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--&#39;hrsh7th/cmp-cmdline&#39;,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hrsh7th/cmp-calc&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;onsails/lspkind-nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;quangnguyen30192/cmp-nvim-ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">-- optional call to setup (see customization section)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">require</span><span class="p">(</span><span class="s2">&#34;cmp_nvim_ultisnips&#34;</span><span class="p">).</span><span class="n">setup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">                <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="n">after</span> <span class="o">=</span> <span class="s2">&#34;SirVer/ultisnips&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">has_words_before</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="kd">local</span> <span class="n">line</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_win_get_cursor</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="kr">return</span> <span class="n">col</span> <span class="o">~=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_buf_get_lines</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">line</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="kc">true</span><span class="p">)[</span><span class="mi">1</span><span class="p">]:</span><span class="n">sub</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span><span class="n">match</span><span class="p">(</span><span class="s2">&#34;%s&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="kd">local</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;cmp&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">--local lspkind = require(&#39;lspkind&#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">cmp.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">snippet</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">expand</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">vim.fn</span><span class="p">[</span><span class="s2">&#34;UltiSnips#Anon&#34;</span><span class="p">](</span><span class="n">args.body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">sources</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;buffer&#39;</span> <span class="p">,</span> <span class="n">keyword_length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;nvim_lsp&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;ultisnips&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">--{ name = &#39;cmdline&#39; },</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;async_path&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                    <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;calc&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="n">mapping</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">.</span><span class="n">preset.insert</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_next_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">elseif</span> <span class="n">has_words_before</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="s2">&#34;&lt;S-Tab&gt;&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cmp.mapping</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                        <span class="n">i</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">fallback</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">if</span> <span class="n">cmp.visible</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">                                <span class="n">cmp.select_prev_item</span><span class="p">({</span> <span class="n">behavior</span> <span class="o">=</span> <span class="n">cmp.SelectBehavior</span><span class="p">.</span><span class="n">Insert</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">else</span>
</span></span><span class="line"><span class="cl">                                <span class="n">fallback</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                            <span class="kr">end</span>
</span></span><span class="line"><span class="cl">                        <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}),</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kr">end</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsExpandTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpForwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-j&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">vim.g</span><span class="p">.</span><span class="n">UltiSnipsJumpBackwardTrigger</span> <span class="o">=</span> <span class="s2">&#34;&lt;C-k&gt;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">return</span> <span class="n">M</span>
</span></span></code></pre></div><p>Everythin just work!
<img loading="lazy" src="/Blog/post/vim-4/snipe_jump_right.gif" type="" alt="snip-jump2"  /></p>
<h1 id="benefits">benefits</h1>
<p>The plugins is more structured, so navigation and group plugins is easier than <strong>vim-plug</strong>, with some <strong>plugin</strong> like <strong>fzf.vim</strong>, I can easily jump to file I want, and separate plugin config into different files according to their purpose. Before using <strong>lazy.nvim</strong> all plugins config are store in the same file call <code>plugins.vim</code>, now modualize like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">├── config
</span></span><span class="line"><span class="cl">│   └── lualine.lua
</span></span><span class="line"><span class="cl">├── lazy-init.lua
</span></span><span class="line"><span class="cl">└── plugins
</span></span><span class="line"><span class="cl">    ├── autocompletion.lua
</span></span><span class="line"><span class="cl">    ├── cleverf.lua
</span></span><span class="line"><span class="cl">    ├── colorscheme.lua
</span></span><span class="line"><span class="cl">    ├── fern.lua
</span></span><span class="line"><span class="cl">    ├── fzf.lua
</span></span><span class="line"><span class="cl">    ├── lsp.lua
</span></span><span class="line"><span class="cl">    ├── markdown.lua
</span></span><span class="line"><span class="cl">    ├── multi_cursor.lua
</span></span><span class="line"><span class="cl">    ├── nerdfont.lua
</span></span><span class="line"><span class="cl">    ├── pairs.lua
</span></span><span class="line"><span class="cl">    ├── sandwich.lua
</span></span><span class="line"><span class="cl">    └── treesitter.lua
</span></span></code></pre></div><h1 id="finall-thoughts">Finall thoughts</h1>
<p>As most of plugin I used are written for both Vim and Neovim, most of them are still providing vimscript api to config, there are only some little surprise issue from prefect.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
