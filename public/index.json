[{"content":"type of DIY keyboard hand wiring keyboard or PCB board\ndraw keyboard layout using ergogen PCB trace routing PCB manufractor Soldering tips flash boot loader recommend use Mac and Windows, as a GUI tool is avalible for auto-flash.\nis DIY keyboard better than sold keyboard? To me, probably not, Since I prefer more key than less key profile, so that I can define more macro keys. I can accept tap a key far away rather than holding many keys at the same time. I find typing on staggered keyboard is lot more natural on ortholinear, the power of muscle memory. The $200 keyboard is the most comfortable keyboard I have use. No matter the profile, numbers of key, layout. incline degree\nDIY keyboard maybe easier than you think. After decide the number of keys will on your keyboard, you can design the layout how the keyboard look like, then soldering the necessary part, flash the bootloader of the micro-controller on your keyboard, everyhing is done!\nMethod to build a keyboard Use PCB Hand wiring Keyboard with PCB will usually give you flat profile, like putting keycaps on a flat board( actually it is ). The PCB itself is firm enough, I have seen quite a lot keyboard use PCB don\u0026rsquo;t equip with case. PCB will be elegant choice for minimalized keyboard design.\nOn the other hands, hand wiring has more flexibility, it can easily fit different shape of the keyboard case, like dactyl keyboard, in such case, handwiring maybe allow you have easier soldering and fit different rows with their own degree. Moreover, PCB is usually expensive than hand-wiring. Nevertheless, you may find PCB a lot easier as the starting point of keyboard DIY journal.\nOne of the advantages of PCB is that you can find many well routed PCB which are ready to use. You don\u0026rsquo;t even have to design your keyboard layout when you are DIY! WAIT, WHAT?\nI would pick PCB since it is a lot easier, even when I face difficult, I can simply give up and use some of the PCB that is open-source. I still able to enjoy the is open-source.. I still able to enjoy the soldering time..\n","permalink":"https://sokinpui.github.io/Blog/post/diy-keyboard/","summary":"type of DIY keyboard hand wiring keyboard or PCB board\ndraw keyboard layout using ergogen PCB trace routing PCB manufractor Soldering tips flash boot loader recommend use Mac and Windows, as a GUI tool is avalible for auto-flash.\nis DIY keyboard better than sold keyboard? To me, probably not, Since I prefer more key than less key profile, so that I can define more macro keys. I can accept tap a key far away rather than holding many keys at the same time.","title":"DIY split keyboard with ergogen"},{"content":"Holy configuring time. Tweaking whatever, editor, notes app, keyboard, shell, OS, browser extension, information system, and some new concept like second brain, roam-like backlink information system. Wow, there is a lot to play with, so that we can do nothing and config them all the time!\nCONFIG EDITOR Editor with infinite extendibility like Neovim, Emacs is extremely addictive. Both of them come with their own scripting language, so that you can do \u0026ldquo;editor programmimg\u0026rdquo;, make it the way you like, make it to perfectly fit your workflow and strange needs. Especially eamcs, there exist so much packages that can help you \u0026ldquo;live in Emacs\u0026rdquo;. Nevertheless, you can choose not to. Neovim in other hand, has less feature than Emacs, but still very configurable. Time is very easy gone when try some new package or new feature. Sometimes I just want to add some plugins for my neovim, after install it. I decide to spend \u0026ldquo;some time\u0026rdquo; to read the documents, but turn out I have spent whole afternoon finding some special API to change the plugin to the way I want to.\nCONFIG TERMINAL If you are Mac and linux user, you should have known an app GUI application called \u0026ldquo;Terminal\u0026rdquo;, it is another time-sink. First, we have to choose a terminal. If I use many Temrinal application, I would consider replacement for the system given one. After that, I have to config the font, color scheme so that it is usable. Still not yet finished, You have to had a handy shell, you should choose one from some common shell like fish, zsh, or bash. You have to spend extra time to make the shell usable, it will take longer if you choose zsh and bash, since you will have to know many tecnical terms like \u0026ldquo;zle\u0026rdquo;, \u0026ldquo;precmd_functions\u0026rdquo;, \u0026ldquo;LBUFFER\u0026rdquo;, \u0026ldquo;setopt\u0026rdquo;, \u0026hellip; There are so much required knowledge if you really want to make zsh and bash into \u0026ldquo;your shape\u0026rdquo;. Oh GOD, already spending a week of time? If you want to have mutliple tabs opened, so that convient youself to have many cli application progess at the same time, you should either pick tmux or functionility provided from the terminal you pick. If the temrinal you pick is alacritty, then you have no choice, you are forced to use Tmux. If you are fine to use mouse to create and navigate tabs with you GUI temrinal, you can do less. If you prefer keyboard-driven, then you have to spend extra time just for creating your own style shortcut key. If you choose to accept the default keybindings. Either of them suck, because you will find the default key bindings conflict with other hot keys of cli tools like emacs or vim, or you will realized that they are not designed for human(Tmux). Yet, if you want to leverge terminal and shell to automate your workflow, you should spend even more time to learn the scripting language sh. Bash, Zsh, and Sh are POXIS compabible shell, you knowledge can be used in other shell. If you are used to Bash but decide to use Fish, you will have to learn the new language(actually new style, basically python-like). AHHHHH, everything should be done, right? you still lacking the interface to interact with your os, they are the tones of command line tools, some of them sed, ls, cd, z, rm, mv, cp. With every tool have their unique set of options( so call flags, althoug the name of flags follow some pattern, I guess you still don\u0026rsquo;t want to remember all of them ). After all, you have your environment prepared, and finally able to start your work? Definitly not, still too many to config!\nCONFIG DESKTOP ENVIRONMENT Desktop environment is the sand box to contain all your configurable tools, where itself is another tweakable stuff. The crazier one is window manager, like i3, hyperland, dwm. If you don\u0026rsquo;t know what is window manager, you can go to /unixporn have a quick look, those fancy binary split window are managed by window manager. You have to write your own config file or copy from others. However, if you want to \u0026ldquo;make it fit your workflow better\u0026rdquo;, you are better understanding what are in your config file, yet extra time have to spent. I personally prefer Desktop environment like gnome, kde and xfce. I don\u0026rsquo;t have crazy many window popup anytime, most of the time the window are fixed in some places, gnome extension gtile already cover most of the use case. But when I start personalizing gnome ( I don\u0026rsquo;t want the top bar appear, I have a small laptop screen ). I still unavoidly need to tweak a little bit. Embarssingly, I find gnome is not portable, when I move to new machine, I have to config gnome again( I will find the solution to prepare for future merging ).\nBUILD INFORMATION SYSTEM Wow, wow, wow, to build information system is never an easy task. You need a good editor, either have good extension support, or originally built for information processing. Otherwise, you need to spend some time to find the best solution for collecting, grouping, manage and organize information into useful knowledge. It is really hard to find one application can do all of them. All-in-one solution like Notion works very well with chart data, while it don\u0026rsquo;t have a decent editor as powerful as vim or emacs( it don\u0026rsquo;t support vi mode! ). Some general purpose editor like emacs, though it has gui version that can render rich content, but its UI is hard to battle with Other domain specify gui application. In other words, you can make the UI as beauty as them of course, but it require time and quite useless. Eventually, to have a perfect information system, the hardest part is how you can connect all discrete application together to do useful stuff and keep it forward. If you system is not robust enough to fit your future requirement, how should you handle?\nCONSISTENT HOT KEYS Consistent hot key style anywhere is difficult, if you are vi-mode fever, I guess You will want to use vim everywhere, because it is the reason you live on the earth. Your blood is flowing in your body with hjkl(is hjkl really the most amazing magic of vim? But not text object and modal editing? Why so many recommend vim because you can use hjkl to replace your arrow key! ). However, seriously, outside text editing, is vi-mode still have the magic? Is it really better than mouse and keyboard shortcut? Nevertheless, it is a personal choice. The only things I can ensure, it is difficult to maintain many vi-mode on many non-vim application with personalized config.\nReailty of config Configuration most of the time grow up naturally, new feature is used only when you need this, I believe nobody will spend a month merely try to make your workflow and tools to be perfect. You leverge the old feature, find another way that can smooth you workflow, then you learn it, try it, love it. That how config should be. It grows from day to day, my current config do not appear suddenly, I add a few lines each time. So eventually I don\u0026rsquo;t feel that I have spend crazy amount of time for config.\nYet I don\u0026rsquo;t feel that I have spent many time on config, I actually spend lot of time playing with those configurable \u0026ldquo;toys\u0026rdquo;. TASTING THE UNKOWN FEATTURE IS FUN, ISN\u0026rsquo;T IT? It is hard to describe the feeling. Imagine you build an axes with LEGO( config ) and try to cut down a tree(real world task) \u0026hellip; and it works \u0026hellip; AMAZING!\n","permalink":"https://sokinpui.github.io/Blog/post/addictive-config/","summary":"Holy configuring time. Tweaking whatever, editor, notes app, keyboard, shell, OS, browser extension, information system, and some new concept like second brain, roam-like backlink information system. Wow, there is a lot to play with, so that we can do nothing and config them all the time!\nCONFIG EDITOR Editor with infinite extendibility like Neovim, Emacs is extremely addictive. Both of them come with their own scripting language, so that you can do \u0026ldquo;editor programmimg\u0026rdquo;, make it the way you like, make it to perfectly fit your workflow and strange needs.","title":"Addictive configuration, the endless tweakings to perfect"},{"content":"Kmonad repository on Github https://github.com/kmonad/kmonad\nI find the default QWERTY keyboard layout have too much keys that require pinkys to type. Chances is very high that My pinkys will sucks first before I can become a hacker! If you don\u0026rsquo;t like complible keyboard like me for whatever reason. Kmonad is likely to be the ultimate solution, Works on most platform, super protable, install Kmonad, copy keymaps file to new mahcine, finally get Kmonad run, and you have your own keymaps on any machine able to run kmoand. Moreover, Kmonad is one of the fews solution you can change your keyboard layouts on laptop.\nKmonad run on both Xory and Wayland on linux without any extra tweakings.\nThe only issue is \u0026hellip; I nearly unable to have natural typing experience on vanilla QWERTY keyboard. Merely a few keys change will have huge influence!\nThough I have mentioned that Kmonad is crossplatform, I find Kmoand work the best on linux. You will end up ith some issue and require extra tweaks on MacOS and Windows.\nsnippets of kmoand files What can Kmonad do? Kmonad is used to create layer on top of your keyboard, you can think Kmonad is software implemention of QMK firmware. Similiar tools like Karabiner-Elements may not give the same levels of visualizing layer, Since Karabiner-Elements by default don\u0026rsquo;t provide preview to the layer. While we define each keys\u0026rsquo; action in every layer when you writing Kmonad file. The code already talk you how the layer will be, saving time from memorize and debug.\nNevertheless, if you merely swap a few keys, Kmoand may not be the best choice. Instead choose simpler tools like Karabiner-Elements or xinput will help you.\nInstall Kmonad You can either install its binary execute file, package(for Arch, Void, GNU Guix, NixOS only), or build it from source(work for most platform).\nThe official guide: https://github.com/kmonad/kmonad/blob/master/doc/installation.md\nBuild from source Let\u0026rsquo;s do this, Since Kmonad is written in Haskell, you will need Haskell project manager: stack installed, it should be avalible via package manager on most of linux distro.\nClone kmoand repo and Build:\ngit clone https://github.com/kmonad/kmonad.git kmonad \u0026amp;\u0026amp; cd kmonad \u0026amp;\u0026amp; stack install After build, Kmonad will be in $PATH.\nRun stack to check if it is installed\nkmoand Let\u0026rsquo;s configure the keyboard layout! basic Create kmonad config file\nvim config.kbd Kmonad file use lisp syntax style, The way to comment out code is use ;;, note that it should be double semi-colon, since single ; is literaly sending keycode of ;. Block comments are start with #| and end with |#. For example:\n#| This block is comment (deflayer name-of-the-layer _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ) |# Every function will be in parenthesis () as usual in lisp-like language.\nStructure of Kmonad file There are few block you will use.\n(defcfg) (defsrc) (defalias) (deflayer) Overview:\nWe configure at defcfg block We define the region you want to remap with kmonad at defsrc We alias at defalias, alias layer, marco\u0026hellip; etc We define how layer works at deflayer defcfg It contains some essential config information, like the source of input, where does output sink etc\n(defcfg input (device-file \u0026#34;/dev/input/by-path/pci-0000:00:14.0-usb-0:4:1.0-event-kbd\u0026#34;) output (uinput-sink \u0026#34;100 keyboard\u0026#34;) fallthrough true allow-cmd true ) fallthrough true It is recommend turn it on, fallthrough make sure when events is out of deifne, the keycode will be sent literaly instead of ignored. It will save you from mistake when define layers. You still got those keys typed.\nallow-cmd true If you have some keymaps mapped to shell command, they will be run if you set allow-cmd to true. Otherwise, they will sipmly send to shell as stdout.\ninput (device-file \u0026#34;/dev/input/by-path/pci-0000:00:14.0-usb-0:4:1.0-event-kbd\u0026#34;) Talk kmoand where is your original keyboard locate.\noutput (uinput-sink \u0026#34;100 keyboard\u0026#34;) Talk kmoand how to handle the sent keycode so to make your defined layers work.\nNotes that output and input are different on Linux, MacOS, Windows Linux example (defcfg input (device-file \u0026#34;/dev/input/by-path/pci-0000:00:14.0-usb-0:4:1.0-event-kbd\u0026#34;) output (uinput-sink \u0026#34;100 keyboard\u0026#34;) fallthrough true allow-cmd true ) official tutorial said that:\nIn Linux we deal with input by performing an ioctl-grab on a specific device-file. This allows us to hook KMonad on the input of exactly 1 keyboard, and allows you to run multiple instances of KMonad for different keyboards. We make an input using: (device-file \u0026ldquo;/dev/input/by-id/my-keyboard-kbd\u0026rdquo;)\nNOTE: Any valid path to a device-file will work, but it is recommended to use the \u0026lsquo;by-id\u0026rsquo; directory, since these names will not change if you replug the device.\nWe deal with output by creating a \u0026lsquo;uinput\u0026rsquo; device. This requires that the \u0026lsquo;uinput\u0026rsquo; kernel module is loaded. The easiest way to ensure this is by calling \u0026lsquo;sudo modprobe uinput\u0026rsquo;. We create a uinput device using: (uinput-sink \u0026ldquo;name\u0026rdquo; \u0026ldquo;optional post-init command\u0026rdquo;)\nWindow example (defcfg input (low-level-hook) output (send-event-sink) fallthrough true allow-cmd true ) official tutorial said that:\n\u0026ndash; Windows \u0026mdash;-\nIn Windows we do not get such fine-grained control. We use a low-level keyboard hook to intercept all non-injected keyboard events. There is currently an open issue to improve the C-bindings used to capture windows keyevents, and if you have a better way to approach this issue, help is deeply appreciated. You specify a windows input using: (low-level-hook)\nSimilarly, the output in Windows lacks the fine-grained control. We use the SendEvent API to emit key events directly to Windows. Since these are \u0026lsquo;artificial\u0026rsquo; events we won\u0026rsquo;t end up catching them again by the low-level-hook. It is very likely that KMonad does not play well with other programs that capture keyboard input like AHK. You specify windows output using: (send-event-sink)\nSpecific to Windows, KMonad also handles key auto-repeat. Therefore your Windows system settings for key repeat delay and key repeat rate will have no effect when KMonad is running. To set the repeat delay and rate from KMonad, pass the optional arguments pair to send-event-sink: (send-event-sink [ ]) where: : how many ms before a key starts repeating : how many ms between each repeat event A value of 500 ms delay and 30 ms rate should mimic the default Windows settings pretty well: (send-event-sink 500 30)\nMacOS example (defcfg input (iokit-name \u0026#34;my-keyboard-product-string\u0026#34;) output (kext) fallthrough true allow-cmd true ) official tutorial said that:\n\u0026ndash; Mac OS \u0026mdash;\u0026ndash;\nFor Mac questions I suggest filing an issue and tagging @thoelze1, he wrote the MacOS API. However, input using: (iokit-name \u0026ldquo;optional product string\u0026rdquo;)\nBy default this should grab all keyboards, however if a product string is provided, KMonad will only capture those devices that match the provided product string. If you would like to provide a product string, you can run make; ./list-keyboards in c_src/mac to list the product strings of all connected keyboards.\nYou initialize output on MacOS using: (kext)\ndefsrc We will deifne the region in the keyboard you want to remap with kmond. The number of keys in defsrc can be less or more than the actual number on your keyboard. If you using a 60% keyboard, it is fine to use the template of 100% keyboard. Merely you will not able to trigger thsoe extra keys. Conversely, you can define 60% region of your 100% keyboard in defsrc. It should work unless you have defined worong keycode. The remaining keys will work as normal if you have set fallthrough true. If you got confused, let see some real example!\n(defsrc esc f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 pause del home end pgup pgdn grv 1 2 3 4 5 6 7 8 9 0 - = bspc nlck kp/ kp* kp- tab q w e r t y u i o p [ ] \\ kp7 kp8 kp9 kp+ caps a s d f g h j k l ; \u0026#39; ret kp4 kp5 kp6 lsft z x c v b n m , . / rsft up kp1 kp2 kp3 kprt lctl lmet lalt spc ralt cmp rctl left down rght kp0 kp. ) Here is my 100% keyboard: Since lisp-like syntax is used, the indention can be ignore, they are only for readability. If you want, you can write them in single line.\nIf I don\u0026rsquo;t want to remap numberpad, I can remove them from defsrc.\n(defsrc esc f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 pause del grv 1 2 3 4 5 6 7 8 9 0 - = bspc tab q w e r t y u i o p [ ] \\ caps a s d f g h j k l ; \u0026#39; ret lsft z x c v b n m , . / rsft up lctl lmet lalt spc ralt cmp rctl left down rght ) The numberpad is cut. Nevertheless, fallthrough is set to be true, the nubmer pad still work perfectly. According to my experience, the order is not important, if they are in the same relative location in deflayer. You can imagine you are input the keys you would like kmonad to handle, so the order is not important. However, the following layer defining should follow the order you have defined here. Detailed explaiation in here.\nKeycode is at maximum four chararcters long. Here is a short reference\nesc == escape key grv == ` caps == caps lock lctl == left control lmet == left meta or left window keys on window. lalt == left alt spc == spacebar cmp == fn on external keyboard fn == fn on mac keyboard wkup == fn on thinkpad built in keyboard bspc == backspace ret == return or enter up == up arrow left == left arrow right == right arrow down == down arrow kp0 == 0 on numberpad kp1 == 1 on numberpad kp2 == 2 on numberpad kp3 == 3 on numberpad kp4 == 4 on numberpad kp5 == 5 on numberpad kp6 == 6 on numberpad kp7 == 7 on numberpad kp8 == 8 on numberpad kp9 == 9 on numberpad kp* == * on numberpad kp+ == + on numberpad kp- == - on numberpad kp/ == / on numberpad kprt == return or enter on numberpad kp. == . or del on numberpad nlck == number lock on keyboard(my keyboard have one single physical button for this function, I know some are done by combination keys) ins == insert del == delete pgup == page up pgdown == page down sys == prtint screen on Thinkpad laptop built in keyboard ssrq == print screen or PrtSc external keyboard slck == scroll lock on external keyboard pause == pause on external keyboard 102d == backslash on left on ISO keyboard C-x == held down Control and x A-x == held down Alt and x S-x == held down shift and x M-x == held down Meta and x C-S-x == held down Control, shift and x C-S-A-x == held down Control, shift, Alt and x C-S-A-M-x == held down Control, shift, Alt, Meta and x There is too many keymaps that impossible to list all of them here, you can check them on kmonad provided templates. Note that the keycode is case sensitive, A is equal to S-a.\ndefalias This part allow you make magic with kmoand! Let\u0026rsquo;s see an example:\n(defalias SS (layer-toggle space-shift) ;; alias layer space-shift to SS -\u0026gt; #(- \u0026gt; :delay 20) ;;keyboard macro, will simulate the key pressed with delay time 20 each. kp1 M-1 layer1 (tap-next-press = @SS) ;; tap as =, hold to active SS, same as layer space-shift ) We can recall alias by adding prefix @, just like how you will define function in lisp, alias name followed by the command, macros, layer you want to alias. You can use defined alias in other alias. Alias is not necessary, but to avoid terrified readability, it is recommend to alias name to long buttons. You can put alias into single defalias block or separate them with multi defalias. Make sure you define alias properly beefor use somewhere else.\ndeflayer Here you will do the magic! The first deflayer will be the default layer, in other terms, the first layer when kmonad startup. To be convenient, usually named base.\n(deflayer base caps f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 pause del home end pgup pgdn S-grv 1 2 3 4 5 6 7 8 9 0 \\\\ ` bspc nlck kp/ @kp* @kp- tab q w e r t y u i o p S-\u0026#39; [ ] @kp7 @kp8 @kp9 @kp+ @EP a s d f g h j k l ; - ret @kp4 @kp5 @kp6 @ESC z x c v b n m , . / rsft up @kp1 @kp2 @kp3 @kprt lctl lmet lalt @SPC @ALT cmp rctl left down rght @kp0 @kp. ) There are fews points you should noted:\n**( ) \\ _** need to be escaped by`, as they have special meaning in kmonad. Aliass can be called by @ _ means transparent, you can leave unmapped key in layer with _, so that it will fallthrough to the last layer you enter. If it is the first layer, it will fallthrough to buttons define in defsrc. The buttons define here will follow corresponding entry in the defsrc The last one may seems to be difficult to understand.\nRelation between defsrc and deflayer If I only want to play with only three keys on my keyboard. I will define them in defsrc like so:\n(defsrc q w e ) Kmonad will then only care that three keys on your keyboard, that is q, w, and e, the first three buttons on top row on normal QWERTY keyboard. I want them to be ctrl-c, ctrl-v, and ctrl-a respectively. Then I will define them like so in deflayer:\n(deflayer base C-c C-v C-a ) Do you remember I have mentioned that the order is not important? It is partial correct. If you have swap the order of key. For exampe I swap q and e in defsrc:\n(defsrc e w q ) Note that kmonad will still able to locate this three keys on keyboard, but the order in deflayer has to be changed as well in order to have same mapping as above:\n(deflayer base C-a C-v C-c ) Otherwise if you keep doing this:\n(deflayer base C-c C-v C-a ) e will mapped to C-c, q will mappped to C-a. Everything will not go as you expected. Therefore, I would recommend you define buttons in defsrc as how your keyboard look like. Define buttons in deflayer will get a lot easier.\nStart building your own keyboard layer There is some useful implemention that is useful to add to your keyboard, they are:\nlayer, or in other terms: modifier key, when you hold down some keys, different layer will be active. leader-key, or some will call it dead key, unlike modifier keys require holding manys keys at a time, leader-key usually use key sequence, type one by one. tap-mod, give double purpose to single keys, tap it and hold it will trigger two different event tap-dance, give single different purpose depends on amount of time pressed. magic keys, usually refer to single key act like 4 modifier hold together(shift+meta+ctrl+alt) when holding For convenience, I would like to define a small keyboard for demostration:\n(defsrc q w e r t y ) The example below will base on this little keyboard.\nModel of Kmonad Kmonad model layer as stack, it will always try to match input event to the top most layer. Still remember the first layer is the default layer, because it is the only layer that addedd to stack when kmonad startup. Noted that incorrect layer push and pop can break your keyboard. It is better to have two keyboard when you config Kmonad, so that you are still able to repair after accidently broke the keyboard.\nHow to write the first layer Here is an example function, you don\u0026rsquo;t need to know what it is now.\n(sticky-key \u0026lt;timeout\u0026gt; \u0026lt;event\u0026gt;) Timeout is counted in ms within kmonad, every timeout you see later is also counted in ms. You can alias name to this function like so:\n(defalias sctl (sticky-key 500 lctl) ;; although alias is recommended no longer than 3 words ) (deflayer base @sctl w e r t y ) This is good demo how you can use alias in layer. It is equivalent to:\n(deflayer base (sticky-key 500 lctl) w e r t y ) To define a layer:\n(defalias l1 (layer-toggle my-first-layer) ;; layer is pushed when active, pop when inactive, just means to be \u0026#34;toggle\u0026#34; tri (tap-next w @l1) ;; tap as w, hold as @l1, which will active my-first-layer ) (deflayer base q @tri e r t y ) (deflayer my-first-layer _ _ a _ b ) So, when you tap w, it will emit w, when you hold w, my-first-layer will active, if you press e now, it will become a, if you press q now, it will emit q, as q is transparent in my-first-layer, KMonad will try to match this key event in the next layer(layer under my-first-layer in stack) until matched. In our case which is q in layer base.\nAgain, if don\u0026rsquo;t use any alias:\n(deflayer base q (tap-next w (layer-toggle my-first-layer)) e r t y ) (deflayer my-first-layer _ _ a _ b ) Layer can be neste in layers, for example layer2 can be actived when you press some keys in my-first-layer. KMonad syntax is simple, the magic comes from the combination of different function and alias. Below is explaiation of KMonad functions.\nDifference between tap and holding Tap idealy is press and release instantly without delay. In KMonad, which accept if key is released within some threshold value will be triggered as Tap. Otherwise, it is holding.\nKMonad functions KMonad will run the function when it is being active. How? when you press the keys, the function will be active if it has been defined in the deflayer block. Moreover, function call be called by other function. For example:\n(defalias b1 (f1 (f2 (f3 (f4 arg)))) ) (deflayer base @b1 w e r t y ) Q is mapped to the function f1, which will call function f2, which will call \u0026hellip;. f4\nNote that the fucntion will only interact with your keyboard, they will not interact with other function, no value will be return. There is no variable assign. It is configuration, not scripting.\nsticky-key (defalias bt1 (sticky-key \u0026lt;timeout\u0026gt; \u0026lt;event\u0026gt;) ) sticky-key allow you tap two keys consequencely instead of holding two keys at the same time. event should be a modifier.\nExample:\n(deflayer base @bt1 w e r t y ) How it works:\ntap q tap wer -\u0026gt; Wer around (defalias bt1 (around \u0026lt;button1\u0026gt; \u0026lt;button2\u0026gt;) ) Simulate holding button1 and button2. (around lctl c) is equal to C-c. You can create nested around, like (around lctl (around lsft c)), which is equivalent to C-S-c\naround-next Very simliar to sticky-key, event can be layer which is not limited in modifier keys( actually I haven\u0026rsquo;t test it, it is not stated clearly in offical tutorial.)\n(around-next lsft) ;; shift the next key pressed (around @my-first-layer) ;; next press in my-first-layer around-next-timeout Similiar to around-next but added timeout, if not following key is pressed within timeout, the last key will be insert (of course it is not limited to key, you can bind it to any event that is valid).\n(around-next-timeout 500 sft q) ;; shift the next key if pressed within 500ms, otherwise q is inserted tap-macro record key sequence marco, simulate as those keys is pressed. You can either use tap-macro function or shorten as #()\n(tap-macro K M o n a d) #(K M o n a d) marco can be used in other macro like so@:\n(defalias m1 (tap-macro K M o n a d) m2 #(K M o n a d) m3 #(@m1 @m2 t h r e e C-c C-v C-a) ) Since sometimes the delay between keys matter, you can use :delay to separate each key.\n#(K M o n a d :delay 10) ;; same as K 100ms M 100ms .... tap-macro-release similar to tap-macro but the last key is delay sometimes by default\n(tap-macro-release q w e) ;; same as q w delay e pause (pause \u0026lt;time\u0026gt;) P\u0026lt;time\u0026gt; ;; shortcode, for example P5 is same as (pause 5) Pause time ms, useful to work with macro to have non-uniform delay\n#(K P5 M P100 m P10000 o n P500 d) #(K (pause 5) M (pause 100) m (pause 10000) o n (pause 500) d) ;; they are equivalent layer-toggle It is the first function that is related to layer manipulaiton. Add the layer to the stack when active, remove from stack when inactive. The layer is temporary live when you trigger it, we ususally bind it to keys.\n(defalias b1 (layer-toggle layer1) ) (deflayer base @b1 w e r t y ) (deflayer layer1 _ C-c C-v S-s _ _ ) layer-toggle will be remove from stack when inactive, in other to switch to layer1, I have to hold q( the button mapped to layer, remember the little keyboard define above? ).\nhold q tap w -\u0026gt; C-c hold q tap r -\u0026gt; S hold q tap t -\u0026gt; t layer-delay (layer-delay \u0026lt;timeout\u0026gt; layer-name) (layer-delay 500 layer2) ;; example layer-delay is similiar to around-next-timeout. The difference are layer-delay will add the layer to stack and remove after timeout\nlayer-next (layer-next layer-name) like layer-delay without timeout limit but the layer will be removed from stack once a key is pressed.\nBut note that from offical tutorial:\nlayer-next, once pressed, primes KMonad to handle the next press from some arbitrary layer. This aims to fill the same usecase as layer-delay: the beginnings of \u0026rsquo;leader-key\u0026rsquo; style behavior. I think this whole button will get deleted soon, because the more general around-next now exists (see below) and this is nothing more than:\n(around-next (layer-toggle layer-name))\nUntil then though, use layer-next like this:\n(layer-next layer-name)\nlayer-switch The above three layer is almost save since the layer is changed temporarily, start from now on, everything become \u0026ldquo;dangerous\u0026rdquo;. The layer will be changed permanently.\n(layer-switch layer-name) (layer-switch colemak) ;;example Note that layer-switch will remove the bottom-most layer, which is the default layer. Make sure you have way to get back default layer. Otherwise, your keyboard can be broken.\n(defalias col (layer-switch colemak) qwe (layer-switch qwerty) ) (deflayer qwerty ;; the name of default layer is arbitrary q w e r t @col ;; when I tap y, layout is switched from QWERTY to Colemak ) (deflayer colemak c o l e m @qwe ;; when I tap y, layout is switched from Colemak to QWERTY ) layer-add (layer-add layer-name) Push layer to stack( add to the top ).\nlayer-rem (layer-rem layer-name) Remove layer from stack by name. Note it is not pop. The specified layer will be remove directly.\ntap-next Function about layer is ended, following function aims to give keys mulit purpose when it is being tapped or held.\n(tap-next \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt;) (tap-next q lsft) The tap and hold can replaced by alias, like layer-toggle or tap-macro. They accept either keycode, function or alias.\n(defalias layer1 (layer-toggle layer1) tm1 (tap-next q @layer1) ;; the alias used here is not the one define in deflayer block. Instead the above line\u0026#39;s one. tm2 (tap-next w lsft) ) (deflayer base @tm1 @tm2 e r t y ) (deflayer layer1 _ C-c C-v S-s _ _ ) press q relase q -\u0026gt; insert q press w tap erty release w -\u0026gt; insert ERTY press w press e relase w release e -\u0026gt; insert EEEEEEEEeeeeeeeee..... If any event is involved with the gap between press and release, hold event is triggered. Otherwise, tap event is triggered. If tap-next is released before any holding keys, tap-next will also fallback to tap event.\ntap-hold (tap-hold \u0026lt;timeout\u0026gt; \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt;) tap-hold is similar to tap-next, the difference lay in tap-hold will pause untill KMonad determine should it be tap or hold. tap-hold will trigger tap if it is released within timeout, no matter how much key you pressed during timeout.\n(defalias tm2 (tap-hold 1000 w lsft) ) (deflayer base q @tm2 e r t y ) press w press e for 900ms release w insert: eeeeeeeeeeeee.... Since w(tap-hold) is relase before timeout end.\ntap-hold-next (tap-hold-next \u0026lt;timeout\u0026gt; \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt; :timeout-button x) ;; :timeout-button is optional, by default it is the hold event Combination of tap-hold and tap-next. When holding tap-hold-next button longer than timeout, it will become hold event or you can specify the button after timeout. If the key is susposed to be held like ret, many newline will be inserted(so call autorepeat).\ntap-next-release Just like tap-next, but hold event will only trigger if other keys is tap(press and relase) before tap-next-release relase. If you relase other keys before tap-next-release release, tap-next-release will trigger tap event. See the example below.\n(tap-next-release \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt;) (defalias tm2 (tap-next-release w lsft) ) (deflayer base q @tm2 e r t y ) press w press e relase w release e -\u0026gt; insert we press w press e relase e release w -\u0026gt; insert E tap-next-press (tap-next-press \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt;) Just like tap-next-release but it will always be hold event if you have press other keys after pressing tap-next-press. Using the same example as tap-next-release but using tap-next-press this time.\npress w press e relase w release e -\u0026gt; insert E press w press e relase e release w -\u0026gt; insert E tap-hold-next-release (tap-hold-next-release \u0026lt;timeout\u0026gt; \u0026lt;tap\u0026gt; \u0026lt;hold\u0026gt; :timeout-button x) ;; :timeout-button is optional, by default it is the hold event Just like tap-next-release, but turn into hold event after holding longer than timeout like tap-hold-next.\nmulti-tap (multi-tap \u0026lt;timeout \u0026lt;1\u0026gt; \u0026lt;timeout\u0026gt; \u0026lt;2\u0026gt; \u0026lt;timeout\u0026gt; \u0026lt;3\u0026gt; \u0026lt;timeout\u0026gt; \u0026lt;4\u0026gt; .... \u0026lt;timeout\u0026gt; \u0026lt;n-1\u0026gt; \u0026lt;n\u0026gt;) (multi-tap 300 a 300 b 300 c 300 d e) Trigger different base numbers of time you tap. Just like combo in fighting game. If you want the combo numbers increaes, you have to continue within some time. In multi-tap you have to release that key before the timeout.\ncmd-button If you have set allow-cmd true in defcfg, you can map button to run shell command.\n(cmd-button \u0026#34;brightnessctl set +2% \u0026gt;\u0026gt; /dev/null\u0026#34;) ;; increase brightness Note that the command should be paired by quote.\nHow to choose the fucntion There is six tap-xxx function that is similar, don\u0026rsquo;t know which one should you pick? Actucally, the difference between them may are not that obvious when you typing. For exampe, the pairs tap-next-release and tap-next-press. I have only occur the difference when I type to fast. Sometime when I type too fast, I will accidently release the key in wrong order so that the hold event is not triggered. However, I do agree some is more powerful. Like tap-hold-next-release and tap-hold-next are way more comfortable. Because most of the time, when one use tap-mod dual function key, you won\u0026rsquo;t want it to fallback to tap after holding for some becuase can\u0026rsquo;t decide which key you use. For exmaple\n(tap-next-release spc lsft) ;; tap as spacebar hold as shift You hold the spacebar, want to insert I, but find that actually you should insert i, but since you using tap-next-release, when you relase spacebar, a space is inserted, you have to press backspace. However if you use tap-hold-next-release, this issue will not even happen.\n(tap-hold-next-release 250 spc lsft) ;; tap as spacebar hold as shift, after hold 250ms become shift Same situation, but this time when you release spacebar, it will insert left shift instead, actually nothing inserted. But I should not stop other using the same pattern as me, as one may accidently find the function fix their need perfectly. You can try different function, and decide which one to use. Make a change is just so easy, change the config file, run kmonad, that is. ( a lot easier that recomplie QMK firmware, though KMonad is less feature and powerful as QMK)\nAlthough tap-hold-next-release and tap-hold-next is \u0026ldquo;better\u0026rdquo; than tap-next-press as they will not trigger tap event after holding some time, but if I type too fast, I foudn sometimes space is eaten. So I personaly prefer tap-next-press more than any other function.\nrun on startup After finishing the config file, we can move to the final step. Run KMonad on startup, here provide example I use, which use systemd service\ncreate /usr/lib/systemd/system/kmonad.service\nsudo -e /usr/lib/systemd/system/kmonad.service add below lines into the last created /usr/lib/systemd/system/kmonad.service\n[Unit] Description=kmonad keyboard config [Service] Restart=always RestartSec=3 ExecStart=/path/to/kmonad /path/to/config.kbd Nice=-20 [Install] WantedBy=default.target Find path to kmonad by\nwhich kmonad Enable the service\nsudo systemctl daemon-reload sudo systemctl start kmonad.service # start the service sudo systemctl enable kmonad.service # run service at startup Some example implemention Here are some partial example of how to turn discrete functions into something useful. The example below will using the six key little keyboard (qwerty)\n(defcfg input (...) output ... fallthrough true allow-cmd true ) (defsrc q w e r t y ) leader-key If you use vim, you may have some mappings like nmap \u0026lt;leader\u0026gt;we \u0026lt;Cmd\u0026gt;W | e!\u0026lt;Cr\u0026gt;. Leader key is keyboard shortcut that is triggered by input keys sequence instead of holding many buttons at the same time. Use \u0026lt;leader\u0026gt;we as an example, we should first choose a key to be leader-key. In may little keyboard, I choose q, so \u0026lt;leader\u0026gt;we is basically qwe. Here is how to implement it in KMonad.\n(defalias ld (layer-next leader-triggered) mid (layer-next key-after-leader-q) out #(K M o n a d) ;; this is what \u0026lt;leader\u0026gt;we will do ) (deflayer base @ld w e r t y ;; leader is q ) (deflayer leader-triggered ;; active when we enter q _ @mid _ _ _ _ ) (deflayer key-after-leader-q ;; active when we enter qw _ _ @out _ _ _ ;; @out will trigger when we finish qwe ) leader-key is definitly define serveral layer, enter next layer by using the correct \u0026ldquo;key\u0026rdquo;\ntap-mod The example will use tap-next-press, becuase I personally prefer this over others.\n(defalias cv (layer-toggle cv-engineering) tm (tap-next-press q @cv) ) (deflayer base @tm w e r t y ) (deflayer cv-engineering _ C-c C-v C-a C-t C-x ) This is, you can think layer-toggle as a hold event( actually it is, it actives only when key bind to is held ). When I tap q, it insert q, when I holding q, Keyboard enter layer cv-engineering which allow me easy copy and paste.\ntap-dance I want q become q when it is tap once, C-c when tap twic, C-v when tap triple.\n(defalias qcv (multi-tap 500 q 500 C-c 500 C-v) ) (deflayer base @qcv w e r t y ) Generate transparent layer for easier configuraiton As you won\u0026rsquo;t want to manually create fallthrough case for each keys. Normally, we make changes on transparent layer which is a template layer that replace all buttons in defsrc by _. See the real world example below:\n(deflayer windows _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @switch _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ) which is come from the transparent layer\n#| (deflayer name-of-the-layer _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ) |# Here is a quick hack to generate transparent layer with vim ex command\nselect the buttons inside defsrc run the ex command \u0026rsquo;s/\\v\\S+/_/g' KMonad contains infinite possible, it is only limited by our creativity, start building your keyboard layout now.\n","permalink":"https://sokinpui.github.io/Blog/post/kmonad/kmonad-introduction/","summary":"Kmonad repository on Github https://github.com/kmonad/kmonad\nI find the default QWERTY keyboard layout have too much keys that require pinkys to type. Chances is very high that My pinkys will sucks first before I can become a hacker! If you don\u0026rsquo;t like complible keyboard like me for whatever reason. Kmonad is likely to be the ultimate solution, Works on most platform, super protable, install Kmonad, copy keymaps file to new mahcine, finally get Kmonad run, and you have your own keymaps on any machine able to run kmoand.","title":"KMonad: The Software version of QMK"},{"content":"We know Vim is known as its extentability, why would I recommend you stop making your own configuration? Because it comes with cost.\nThe issue You find cw is difficult to type, you find that cl is overlapping with s, you add some remap to your vimrc:\nonoremap l w onoremap L W onoremap h iw onoremap H iW Indeed, this is how I used to use vim. ( link to post ). The keybindings help me, but just so little improvement. Just like other vimers, I tends to use vim style in other application like zsh, Emacs, obsidian and tmux etc. When I sit down and going to work hard, I find the keybindings on them are just wrong, I forget to sync my config on Vim to other application, I have to find solution for each application, luckly, those application is say to be easy to config with their vi-mode. While I can\u0026rsquo;t make sure current situation can apply to future, I can\u0026rsquo;t promise I stil using same set of tools or using the same vim config. The more application I use, the more time I have to spend on finding solution in other to make the application prefectly fix my using case.\nI am afraid If I having too much personalization, I would loss the vim compability from any vim emulation one day. One reason keep me using vim is that there is vim-emulation everywhere, Once I have learn the keybindings, I can keep the same workflow no matter the tools. Therefore, I stop overwriting vim default keybindings. Remapping I use currently are mostly related to plugins, and is trigger by leader key.\nOutside Vim, the keyboard layout, the cose of too much personalization The keyboard layout I current I use are my own personalized version, it is build on QWERTY, but I have some change with modifiers, I have made space as sapce-shift(tap as space, held as shift), shift when held, I have made left shift as esc-ctrl, make some changes wiht special symbols, turn caps lock become layer raiser, {, } [ and ] are caps lock + kjiu. Since those key are highly related to vim motion, my editing and typing speed are dropped significantly when I use any vanilla QWERTY keyboard, inside and outside Vim. Especially shift is mapped to space, there are just so many vim motion require capital letter or symbols !@#$%^\u0026amp;*( to use. I afraid if one day I have to use some public workstation, I may just stand in front it, type like those who use computer first time.\nTo change your keyboard layout, either via software( karabiner elements on Mac, xinput on linux ), or via hardware. I haven\u0026rsquo;t touch my Macbook since I have upgrade my keyboard layout on a second hand thinkpad. One of the reason are the keyboard layout on two machine have a huge different after upgrade, since the software used are different on Mac and Linux, I don\u0026rsquo;t want to spend extra day config Macbook just to sync the layout.\nOr I can purchase a complible keybord to have the universal layout on different mahcine. Nevertheless, they are expensive and I still need to bring my laptop work outside physical keyboard may not be a good choice.\n","permalink":"https://sokinpui.github.io/Blog/post/vim12-stopaddfeatures/","summary":"We know Vim is known as its extentability, why would I recommend you stop making your own configuration? Because it comes with cost.\nThe issue You find cw is difficult to type, you find that cl is overlapping with s, you add some remap to your vimrc:\nonoremap l w onoremap L W onoremap h iw onoremap H iW Indeed, this is how I used to use vim. ( link to post ).","title":"Efficient Vim: try not to overwrite vim default keybindings."},{"content":"TL;DR, I find my blog is too verbose, let me summarize it.\nI am try to find the least key solution to jump within certain numbers of lines, that is Assume we map J and K to j and k respectively, for example, nmap J 5J $$ lines = a \\times n \\times j/k + b \\times j/k $$\nWe want the $min(a+b)$ among the $n$ we test.\nALthough I have written this blog to calculate the best remap for J/K, ironcially I find I cannot build muscale memory to use J/K to jumps. I still prefer using 5k, 4k, 10k instead of a fixing number jumps.\nThis blog is just for fun AH HA.\nIn this blog, I am try to navigate up and down using \u0026lt;c-d\u0026gt;, \u0026lt;c-u\u0026gt;, the remapped J and K, they are remapped to \u0026lt;x\u0026gt;j and \u0026lt;x\u0026gt;k respectively. And jk of course.\nWhy this blog? I know there is tons of ways I can perform in vertical motion, like plugin leap.nvim, flash.nvim, using / or ? to searching, or using fuzzy finder tools like fzf.vim or telescope.nvim. I just want to keep a habit or in another terms, I would like to find a method that can extend my muscle memory to any vanilla vim emluation without too much configuratione.\nThe problems I have to move up and down to get my cursor right one some words, sometimes, the words just appear too many times, searching is useless. I don\u0026rsquo;t want to move my hand to get my mouse clicking at that position when I know that I can use just a few keys to get here.\nHow I try to solve H to the top of the screen M to middle of the screen L to the bottom of the screen \u0026lt;c-d\u0026gt; and \u0026lt;c-u\u0026gt; nmap J 5j (4j, 6j, or whatever) nmap K 5K (4K, 6K, or whatever) j and k I try to use \u0026lt;c-d\u0026gt; and \u0026lt;c-u\u0026gt; to move half page up and down, they are vim default key bindings. Moreover, they are widely supported by any vim emluation and vanilla vi on random remote server. Use J and K to make a smaller steps, and finally use j and k to move to the lines I want.\nBut\u0026hellip;, how should J and K mapped? 4j, 6j or 5j? Indeed, I write this blog is to share a short snippets that aims to find the best solution.\nThe way to navigate is similiar to binary search algorithm, we use the big steps like H, L, M, \u0026lt;c-d\u0026gt; and \u0026lt;c-d\u0026gt; jump to the location around the target. Then we use J, K, j and k to move subtlety.\nSo, we need to find the less key solution to map J and K in order to get to any lines in screen. The least average jumps needed will be the ideal J and K seeking for.\nHowever, the problems can be simplify to how to use the less key to move within quarter of page. We can mapped H and L to jumps to the upper quarter and lower quarter of the screen, and it is easy.\nnnoremap H \u0026lt;Cmd\u0026gt;set scrolloff=0\u0026lt;CR\u0026gt;H10gj\u0026lt;Cmd\u0026gt;set scrolloff=8\u0026lt;Cr\u0026gt; nnoremap j \u0026lt;Cmd\u0026gt;set scrolloff=0\u0026lt;CR\u0026gt;J10gh\u0026lt;Cmd\u0026gt;set scrolloff=8\u0026lt;Cr\u0026gt; Set scrolloff=0 to ensure H and L will jump to top and bottom of screen, then we move lines down/up, in my case it is 42 // 4 = 10, 10 lines down will jumps quarter of screen. lastly we set back our scrolloff, in my case, it is 8.\nNow, we only need to find the least key to move within quarter of screen.\nTo find how JK should be mapped, we can find the average number to move from 1 lines to 10 lines with different JK mapped.\nhere is the snippets I use to find the best JK:\njumps_range = 10 for jump in range(2, jumps_range): count = 0 for lines in range(1, jumps_range): count = count + lines // jump + lines % jump average = count / jumps_range print(\u0026#34;average jumps needed for JK mapped to\u0026#34;, jump, \u0026#34;is\u0026#34;, round(average, 2)) and the result is:\naverage jumps needed for JK mapped to 2 is 2.73 average jumps needed for JK mapped to 3 is 2.27 average jumps needed for JK mapped to 4 is 2.27 average jumps needed for JK mapped to 5 is 2.45 average jumps needed for JK mapped to 6 is 2.73 average jumps needed for JK mapped to 7 is 2.82 average jumps needed for JK mapped to 8 is 3.09 average jumps needed for JK mapped to 9 is 3.55 average jumps needed for JK mapped to 10 is 4.18 And we can see, the least key is 3 or 4. Then I add those lines to my .vimrc\nnoremap J 4j noremap K 4k nnoremap H \u0026lt;Cmd\u0026gt;set scrolloff=0\u0026lt;CR\u0026gt;H11gj\u0026lt;Cmd\u0026gt;set scrolloff=8\u0026lt;Cr\u0026gt; nnoremap L \u0026lt;Cmd\u0026gt;set scrolloff=0\u0026lt;CR\u0026gt;L11gk\u0026lt;Cmd\u0026gt;set scrolloff=8\u0026lt;Cr\u0026gt; Or if H and L is too complex and may note copied to other vim emluation, you would like to only use \u0026lt;c-d\u0026gt;, \u0026lt;c-u\u0026gt;, the jumps_range can be 21. (21 is half of my screen).\nAfter modified jumps_range to 21, the result is:\naverage jumps needed for JK mapped to 2 is 5.24 average jumps needed for JK mapped to 3 is 4.0 average jumps needed for JK mapped to 4 is 3.57 average jumps needed for JK mapped to 5 is 3.52 average jumps needed for JK mapped to 6 is 3.57 average jumps needed for JK mapped to 7 is 4.0 average jumps needed for JK mapped to 8 is 4.0 average jumps needed for JK mapped to 9 is 4.29 average jumps needed for JK mapped to 10 is 4.86 average jumps needed for JK mapped to 11 is 5.24 average jumps needed for JK mapped to 12 is 5.29 average jumps needed for JK mapped to 13 is 5.43 average jumps needed for JK mapped to 14 is 5.67 average jumps needed for JK mapped to 15 is 6.0 average jumps needed for JK mapped to 16 is 6.43 average jumps needed for JK mapped to 17 is 6.95 average jumps needed for JK mapped to 18 is 7.57 average jumps needed for JK mapped to 19 is 8.29 average jumps needed for JK mapped to 20 is 9.1 And we can see, 5 is the best in this case.\n","permalink":"https://sokinpui.github.io/Blog/post/vim11-jk/","summary":"TL;DR, I find my blog is too verbose, let me summarize it.\nI am try to find the least key solution to jump within certain numbers of lines, that is Assume we map J and K to j and k respectively, for example, nmap J 5J $$ lines = a \\times n \\times j/k + b \\times j/k $$\nWe want the $min(a+b)$ among the $n$ we test.\nALthough I have written this blog to calculate the best remap for J/K, ironcially I find I cannot build muscale memory to use J/K to jumps.","title":"Try to find the least key solution to navigate up and down in Vim"},{"content":"Efficient tips for you, the beginers vimers.\nwhy? because it has the same effect, but visual mode have more keys storke\nIf you often use visual mode before yank or delete text, you should take care, you may be in situation of inefficient editing.\nOperator-pending mode vs Visual mode Operator-pending mode are mode when vim is waiting your motion. What is motion in vim? Motion means the range of text you would like vim to apply the command. This range can be w, iw, e, or i{. In another words, motion means the region of selection. The motion I have just mentioned control how the region of text will be applied by the command. Like d in diw.\nVisual mode, similiar to drag your mouse selecting random region, for vimers, we usually selected by keyboard, We will be involved to visual mode first, either by v, V or \u0026lt;C-v\u0026gt;, then you move your cursor to select the region you want. Similiar to Operator-pending mode, right? But we take a look how much key you have pressed.\nHere is the example text: local M = { local function doSomething(x, y) local x, y = x, y return x * y end } We assume you want to delete the text inside M. If you prefer visual mode. the key sequence: vi{x\nIf you prefer Operator-pending mode. The key sequence: di{\nYou will save one key by the end. Actually, if you prefer first enter visual-mode, it may be the inertia from using other GUI application with mouse. But remember you don\u0026rsquo;t have to keep such practice in vim, you can directly delete or yank with motion. It may be little save in once. However, if you are preparing to use vim for future, you should keep upgrading your editing style smoother. Leverge Operator-pending mode is basic practice for efficient editing.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim9-efficient-editing/","summary":"Efficient tips for you, the beginers vimers.\nwhy? because it has the same effect, but visual mode have more keys storke\nIf you often use visual mode before yank or delete text, you should take care, you may be in situation of inefficient editing.\nOperator-pending mode vs Visual mode Operator-pending mode are mode when vim is waiting your motion. What is motion in vim? Motion means the range of text you would like vim to apply the command.","title":"Efficient vim editing: Don't use visual mode if possible"},{"content":"Highlight search with n, N, *, #, /, ? Highlight search, highlight search contain, clear when buffer has occur any change, or enter insert mode\nnnoremap / :set hlsearch\u0026lt;cr\u0026gt;/ nnoremap ? :set hlsearch\u0026lt;cr\u0026gt;? nnoremap * :set hlsearch\u0026lt;cr\u0026gt;* nnoremap # :set hlsearch\u0026lt;cr\u0026gt;# vnoremap * y/\u0026lt;c-r\u0026gt;0\u0026lt;cr\u0026gt;:set hlsearch\u0026lt;cr\u0026gt; vnoremap # y?\u0026lt;c-r\u0026gt;0\u0026lt;cr\u0026gt;:set hlsearch\u0026lt;cr\u0026gt; nnoremap \u0026lt;expr\u0026gt; n (v:searchforward ? \u0026#39;n:set hlsearch\u0026lt;cr\u0026gt;\u0026#39; : \u0026#39;N:set hlsearch\u0026lt;cr\u0026gt;\u0026#39;) nnoremap \u0026lt;expr\u0026gt; N (v:searchforward ? \u0026#39;N:set hlsearch\u0026lt;cr\u0026gt;\u0026#39; : \u0026#39;n:set hlsearch\u0026lt;cr\u0026gt;\u0026#39;) The original N/n direction depends one you use #/* or //?, sometimes really confuse me. So I would like to make n/N always in one direction\nnnoremap \u0026lt;c-w\u0026gt;/ :set hlsearch\u0026lt;cr\u0026gt;\u0026lt;c-w\u0026gt;v\u0026lt;c-w\u0026gt;l/ nnoremap \u0026lt;c-w\u0026gt;? :set hlsearch\u0026lt;cr\u0026gt;\u0026lt;c-w\u0026gt;v\u0026lt;c-w\u0026gt;l? nnoremap \u0026lt;c-w\u0026gt;* :set hlsearch\u0026lt;cr\u0026gt;\u0026lt;c-w\u0026gt;v\u0026lt;c-w\u0026gt;l* nnoremap \u0026lt;c-w\u0026gt;# :set hlsearch\u0026lt;cr\u0026gt;\u0026lt;c-w\u0026gt;v\u0026lt;c-w\u0026gt;l# search in split window, useful when I want to compare paraggraph that longer than my laptop height.\nxnoremap \u0026lt;leader\u0026gt;p \u0026#34;_dP Paste without pollute register from ThePrimegen\nSystem clipboard paste and seletion \u0026#34; copy and paste if has(\u0026#34;linux\u0026#34;) nnoremap \u0026lt;leader\u0026gt;y \u0026#34;+y nnoremap \u0026lt;leader\u0026gt;Y \u0026#34;+Y vnoremap Y \u0026#34;+y vnoremap X \u0026#34;+x vnoremap \u0026lt;C-c\u0026gt; \u0026#34;+y nnoremap \u0026lt;leader\u0026gt;P \u0026#34;+p vnoremap \u0026lt;leader\u0026gt;P \u0026#34;+p inoremap \u0026lt;C-v\u0026gt; \u0026lt;C-r\u0026gt;\u0026lt;C-o\u0026gt;+ \u0026#34;inoremap \u0026lt;C-v\u0026gt; \u0026lt;C-o\u0026gt;\u0026#34;+p cnoremap \u0026lt;C-v\u0026gt; \u0026lt;C-r\u0026gt;\u0026lt;C-o\u0026gt;+ nnoremap gy :1,$y +\u0026lt;cr\u0026gt; else nnoremap \u0026lt;leader\u0026gt;y \u0026#34;*y nnoremap \u0026lt;leader\u0026gt;Y \u0026#34;*Y vnoremap Y \u0026#34;*y vnoremap X \u0026#34;*x vnoremap \u0026lt;C-c\u0026gt; \u0026#34;*y nnoremap \u0026lt;leader\u0026gt;P \u0026#34;*p vnoremap \u0026lt;leader\u0026gt;P \u0026#34;*p inoremap \u0026lt;C-v\u0026gt; \u0026lt;C-r\u0026gt;\u0026lt;C-o\u0026gt;* cnoremap \u0026lt;C-v\u0026gt; \u0026lt;C-r\u0026gt;\u0026lt;C-o\u0026gt;* nnoremap gy :1,$y *\u0026lt;cr\u0026gt; endif nnoremap \u0026lt;leader\u0026gt;y \u0026quot;+y prepare for copy text object to system clipboard. To copy current line, either VY or \u0026lt;leader\u0026gt;yy. Also I map \u0026lt;C-c\u0026gt; and \u0026lt;C-v\u0026gt; for copy and paste, vim copy and paste are good, but I just can\u0026rsquo;t escape copy and paste with Ctrl C and Ctrl V. gy will copy whole file into system clipboard.\nVertical Motion keep the direction same as j and k\nnoremap ( ) noremap ) ( keep the direction same as j and k quick 5 line jump\nnoremap J 5j noremap K 5k Horizontal Motion noremap \u0026lt;leader\u0026gt;h ^ noremap \u0026lt;leader\u0026gt;l $ I can\u0026rsquo;t blind type ^, if ^ is mapped, I think there is no reason to leave $ alone.\ntext object onoremap l w onoremap h iw onoremap L W onoremap H iW It is how I type cw Indention keep selection when increase/decrease indention.\nvnoremap \u0026lt; \u0026lt;gv vnoremap \u0026gt; \u0026gt;gv Format the whole file, '' will back to the last jump\nnnoremap =\u0026lt;leader\u0026gt; gg=G\u0026#39;\u0026#39; buffer nnoremap \u0026lt;Bs\u0026gt; :bn\u0026lt;cr\u0026gt; nnoremap \u0026lt;C-H\u0026gt; :bp\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;\u0026lt;bs\u0026gt; :b#\u0026lt;cr\u0026gt; nnoremap \u0026lt;CR\u0026gt; :ls\u0026lt;cr\u0026gt; \u0026#34; keep \u0026lt;cr\u0026gt; function in cli window and quickfix autocmd CmdwinEnter * nnoremap \u0026lt;CR\u0026gt; \u0026lt;CR\u0026gt; autocmd BufReadPost quickfix nnoremap \u0026lt;CR\u0026gt; \u0026lt;CR\u0026gt; I rarely open lot of buffers, cycling is enough, \u0026lt;C-H\u0026gt; is equivalent to \u0026lt;C-backspace\u0026gt;\ncommand line mode cnoreabbrev \u0026lt;expr\u0026gt; W getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^W\u0026#39; ? \u0026#39;w\u0026#39; : \u0026#39;W\u0026#39; cnoreabbrev \u0026lt;expr\u0026gt; WQ getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^WQ\u0026#39; ? \u0026#39;wqa\u0026#39; : \u0026#39;WQ\u0026#39; cnoreabbrev \u0026lt;expr\u0026gt; Wq getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^Wq\u0026#39; ? \u0026#39;wqa\u0026#39; : \u0026#39;Wq\u0026#39; cnoreabbrev \u0026lt;expr\u0026gt; wQ getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^wQ\u0026#39; ? \u0026#39;wqa\u0026#39; : \u0026#39;wQ\u0026#39; cnoreabbrev \u0026lt;expr\u0026gt; wq getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^wq\u0026#39; ? \u0026#39;wqa\u0026#39; : \u0026#39;wq\u0026#39; cnoreabbrev \u0026lt;expr\u0026gt; Q getcmdtype() == \u0026#39;:\u0026#39; \u0026amp;\u0026amp; getcmdline() =~# \u0026#39;^Q\u0026#39; ? \u0026#39;q\u0026#39; : \u0026#39;Q\u0026#39; Prevent typo when exit vim. ","permalink":"https://sokinpui.github.io/Blog/post/vim/vim8-useful-keymap/","summary":"Highlight search with n, N, *, #, /, ? Highlight search, highlight search contain, clear when buffer has occur any change, or enter insert mode\nnnoremap / :set hlsearch\u0026lt;cr\u0026gt;/ nnoremap ? :set hlsearch\u0026lt;cr\u0026gt;? nnoremap * :set hlsearch\u0026lt;cr\u0026gt;* nnoremap # :set hlsearch\u0026lt;cr\u0026gt;# vnoremap * y/\u0026lt;c-r\u0026gt;0\u0026lt;cr\u0026gt;:set hlsearch\u0026lt;cr\u0026gt; vnoremap # y?\u0026lt;c-r\u0026gt;0\u0026lt;cr\u0026gt;:set hlsearch\u0026lt;cr\u0026gt; nnoremap \u0026lt;expr\u0026gt; n (v:searchforward ? \u0026#39;n:set hlsearch\u0026lt;cr\u0026gt;\u0026#39; : \u0026#39;N:set hlsearch\u0026lt;cr\u0026gt;\u0026#39;) nnoremap \u0026lt;expr\u0026gt; N (v:searchforward ? \u0026#39;N:set hlsearch\u0026lt;cr\u0026gt;\u0026#39; : \u0026#39;n:set hlsearch\u0026lt;cr\u0026gt;\u0026#39;) The original N/n direction depends one you use #/* or //?","title":"Useful Vim mappings"},{"content":"If you have use tmux, you know it come with a bad key bindings. Force you to spend time config Tmux. Here are how I use tmux with kmonad to save the sucked default key bindings.\nTmux Since tmux have session, window, and pane. Like navigate windows and pane must be often than session, we will prefer less key to navigate windows and pane than session\nTherefore shortcut related to window will in form of M-*(for example alt-a), shortcut related to session will in form of prefix + \u0026lt;keys\u0026gt;\nchange tmux prefix Tmux default prefix suck. Ctrl-b are far from each other, if everytim we run tmux command have to press Ctrl-b, I just suffer. So, I change it to ctrl-space instead.\nunbind C-b set -g prefix C-space bind C-space send-prefix Session Session shortcut will in form of prefix + \u0026lt;keys\u0026gt;.\nbind n new-session -t bind r command-prompt -p \u0026#34;Enter new session name: \u0026#34; \u0026#34;rename-session \u0026#39;%%\u0026#39;\u0026#34; bind j switch-client -n # switch to next session bind k switch-client - # switch to previous sessionp prefix+s will show the session list Window Since windows shortcut are more handy than session\u0026rsquo;s Bind single key without prefix will be easier for day to day usage\nbind -n M-o new-window # open new window at home directory $HOME bind -n M-enter new-window -c \u0026#34;#{pane_current_path}\u0026#34; # open window at the same directory as current pane bind -n M-r command-prompt -p \u0026#34;Enter new window name: \u0026#34; \u0026#34;rename-window \u0026#39;%%\u0026#39;\u0026#34; bind -r -n M-h select-window -t :- # previous window bind -r -n M-l select-window -t :+ # next window unbind \u0026#39;\u0026#34;\u0026#39; unbind % bind - splitw -v -c \u0026#39;#{pane_current_path}\u0026#39; # horizontal split bind | splitw -h -c \u0026#39;#{pane_current_path}\u0026#39; # vertical split Pane Similar to window, but since my main machine is a thinkpad, the screen is so small, I use pane less, if you have a big screen, you may swap some shortcut between window\u0026rsquo;s and pane\u0026rsquo;s\nbind -n M-x kill-pane bind -n M-m select-pane -t :.+ # pane cycling bind -n M-f select-pane -t :.+ # pane cycline bind -r H resize-pane -L 5 bind -r L resize-pane -R 5 bind -r K resize-pane -U 5 bind -r J resize-pane -D 5 The first line will kill pane instantly, if there is single pane, kill window instead, if there is single windwo and single pane, kill session instead.\nIf you wonder how to resolve shortcut conflict with other terminal application require modifier alt, I will try my best to avoid them, leaving all shortcut with alt for tmux, and ctrl for other application. BTW, if you use vim, you will have less chance to use modifier alt, therefore using vi-mode in shell can reduce the relay of alt when line editing.\n","permalink":"https://sokinpui.github.io/Blog/post/kmonad/tmux-kmonad/","summary":"If you have use tmux, you know it come with a bad key bindings. Force you to spend time config Tmux. Here are how I use tmux with kmonad to save the sucked default key bindings.\nTmux Since tmux have session, window, and pane. Like navigate windows and pane must be often than session, we will prefer less key to navigate windows and pane than session\nTherefore shortcut related to window will in form of M-*(for example alt-a), shortcut related to session will in form of prefix + \u0026lt;keys\u0026gt;","title":"Strategy to remap Tmux shortcut"},{"content":"Neovim in 2023 has become an popular choice of editor, its version become stable those day. Neovim to Vim is like Vim to Vi those day, it has introduced a clear lua API for writing plugins, built-in LSP support. Although some plugins like coc.nvim has provide feature like LSP and auto-completion similar as VSCode, the built-in LSP support just give the sense of it will last longer and improved by a larger community as it is built-in. Also, more lua plugins has come out, which sadly only support Neovim, as they need Neovim API.\nVim Back to the day I launch Vim first time, Vim have already give me different feel from modern editor, its default color scheme, its \u0026ldquo;non-beginner friendly\u0026rdquo; default setting force me to google solution many times. After use Vim for sometimes, I have known Neovim, a forked version of Vim, fully compatible with vimscirpt plugins, a modern version of Vim, and extended in different language lua, At the beginning, I don\u0026rsquo;t want to make a switch, current state of Vim was already make me satisfed. The introduction of Vim9script excited me a lot, I wrote vimscirpt before lua, in my opinion, vimscirpt as a Domain Specify Language, it is less verbose than lua. Also, I don\u0026rsquo;t write big plugins, lua API don\u0026rsquo;t attact me much. But the performance of Vim9script has been improved a lot compare to lengency vimscirpt. I still want to stay with Vim. However I discover quite many vimers I have followed on online has switch to Neovim, it is the first time I have consider seriously about making a switch. I can\u0026rsquo;t found myself a good reason not to change other than it may waste my time. Since I use Vim first, the plugins I relay on are still pure vimscirpt plugins, making switching no benefits. I told myself, if there is a must have plugins that is specified to Neovim, I should make a switch.\nNeovim The plugin I switch for is nvim-treesitter. Treesitter provide correct highlight by understanding your code structure. Recently Vim/Neovim highlihgt is base on regular expression, which may not cover all the case, therefore render syntax highlight wrong,\nMy init.vim without Treesitter: My init.vim with Treesitter: Correct highlight is one of feature treesitter can provide, other feature like indention, selection increment/decrement are also supported. If the language you are using have treesitter parse, you can enjoy those features. The abstruct syntax tree where treesitter powered from, is also a good source for writing a plugin, extend you text object to function, class, object, or declaration. Of course regular expression can do so, it just can\u0026rsquo;t make sure 100% correct and need to build rule for matching. I know emacs also integrate Treesitter in Emacs29. I believe plugins that can understand the code will keep exploring more surprise usage, introducting more useful features in the future. Therefor I make switch.\nThe switching actually don\u0026rsquo;t cost anytime, I spend minutes finding the color scheem support treesitter. Installing them using the plugins manager I used in vim, everything just work.\nWhy Neovim Simply becuase you will have a greater community, both vim and neovim community, merely missing compatible with Vim9script. You can enjoy plugins from Vim and Neovim. This reason is strong enough for one who have struggling between Neovim and Vim. The number of plugins that is written in Vim9script are handfully small.\nNeovim from Vim Before using Neovim, I use :sh often. However, this command was dropped in Neovim, I don\u0026rsquo;t understand why this is dropped. Nevertheless, I change my habit, even better practice after change. I use new tmux window instead of :sh to recall the shell Neovim from. If I really want to copy some content from the shell opened Neovim, I can use Ctrl-Z to suspend Neovim and use fg continue Neovim process.\nI agree some discussion about switching or not, some people hold that there is no features they need in Neovim. That maybe true, but how about plugin ecosystem, it seems more powerful plugins come out, you may want one of them in the future. Switch early so that suffer less in the future. Switch won\u0026rsquo;t consume too much time if you going to keep you configuration in vimscirpt, if necessary to use lua, you can use lua in you *.vim file.\nlua require(\u0026#34;\u0026lt;name of lua moduale\u0026gt;\u0026#34;) Switching to Neovim from Vim are simple because you are still using \u0026ldquo;the same\u0026rdquo; editor, the configuration, the way how vim handle text editor, the way to extend is similiar. Unlike switching to other types of editor like Emacs, which definitly have different \u0026ldquo;Emacs way\u0026rdquo; you need to adapt.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim7-considerneovim/","summary":"Neovim in 2023 has become an popular choice of editor, its version become stable those day. Neovim to Vim is like Vim to Vi those day, it has introduced a clear lua API for writing plugins, built-in LSP support. Although some plugins like coc.nvim has provide feature like LSP and auto-completion similar as VSCode, the built-in LSP support just give the sense of it will last longer and improved by a larger community as it is built-in.","title":"Consider Embrance the ecosystem of Neovim."},{"content":"You can check the startup time of Vim/Neovim by add the option --startuptime \u0026lt;name of log file\u0026gt;, however meaningful information is difficult to find Maybe you may want to find the plugin that affect startup time most significantly, but lost in tones of numbers and lines. This plugins make testing and viewing startuptime log easier. Plugins: vim-startuptime Screenshot: This plugins allow you check the startup time afte open Neovim, maybe more intutitive than using option --startuptime?\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim6-plugin-starttime/","summary":"You can check the startup time of Vim/Neovim by add the option --startuptime \u0026lt;name of log file\u0026gt;, however meaningful information is difficult to find Maybe you may want to find the plugin that affect startup time most significantly, but lost in tones of numbers and lines. This plugins make testing and viewing startuptime log easier. Plugins: vim-startuptime Screenshot: This plugins allow you check the startup time afte open Neovim, maybe more intutitive than using option --startuptime?","title":"Neovim plugins: vim-startuptime, make startup time information readable"},{"content":"If you use neither window Nor mac os, you may find you cannot use Ctrl-c to copy and Ctrl-v to paste in terminal. You have to press Ctrl-SHIFT-c to copy selected items, and Ctrl-SHIFT-v to paste from system clipboard.\nWindow user don\u0026rsquo;t have to concern this issue, because I believe you will endup with wsl, which by the end is close to Linux env. Mac user don\u0026rsquo;t need to concern this issue, because you can use CMD-c and CMD-v.\nCtrl-c to copy in tmux copy mode add those line to your tmux.conf, and source it.\nset -g mouse on setw -g mode-keys vi bind -T copy-mode-vi C-c send-keys -X copy-pipe-and-cancel \u0026#34;wl-copy\u0026#34; copy-selection-no-clear bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection -x copy-selection-no-clear wl-copy is for Wayland user, If you are Xorg user, change wl-copy to xclip. Of course, you have to download this package from your package manager first. The last line enable mouse drag to select region, it is no-sense to disable mouse if you are going to use Ctrl-c to copy.\nCtrl-v to paste in zsh add this line to your .zshrc and reopen zsh to see the effect.\nbindkey \u0026#39;^V\u0026#39; _paste-copy-using-xsel # Paste from clipboard The reason don\u0026rsquo;t remap in terminal remap ctrl-c in terminal is dangerous, you may neither able to cancel nor stop process in terminal. What\u0026rsquo;s more, mapping in tmux and zsh make sure the protablility of your env, they can be reproduce in any terminal, that is the reason I use tmux for tab in terminal instead of they tab function of terminal, even I am using kitty terminal which support tab and session.\nWhat does Ctrl-c do in terminal? Ctrl + C is used to send a SIGINT signal, which cancels or terminates the currently-running program. The reason Ctrl-c is use to stop program is historic reason. Here is an answer posted by StackOverflow user Gilles \u0026lsquo;SO- stop being evil\u0026rsquo;:\nThe “kill” meaning of Ctrl+C is very old, I think even older than Unix. Wikipedia traces it back to TOPS-10, which would date it from the late 1960s. The article explains why Ctrl+C was a reasonable choice: in ASCII, which was published in 1963, the corresponding character is ETX, end-of-text. Lacking a character meaning “stop”¹, a character meaning “this segment of input is over” was a reasonable choice to mean “stop the current processing”.\nThe “copy” meaning of Ctrl+C comes from Xerox PARC, the inventors of copy-paste in its modern form (and most other fundamentals of graphical user interfaces). I don\u0026rsquo;t know exactly when that was, but it must have been the late 1970s. This thread on User Experience Stack Exchange discusses the choice of key bindings; C for copy makes a lot of sense.\nThere was little reason for PARC to reject Ctrl+C for copy on the basis of the existing meaning in TOPS-10 and Unix terminals. Operating systems and applications were more diverse then, and far fewer people used computers; there was no opportunity nor call for a single standard for key bindings across all applications. Other uses for Ctrl+C in popular applications include page-down in WordStar² and mode-specific command in Emacs. All of these were designed independently, for applications with often different requirements, running in different environments.\nYou can configure the terminal key bindings with the stty command. The terminal bindings are active when the terminal is in cooked mode³. For example the command stty intr ^G sets the character that sends a SIGINT signal to Ctrl+G instead of Ctrl+C. The ^G character is BEL in ASCII; when sent to a terminal, it means “ring the bell”. It\u0026rsquo;s the character that Emacs uses for “interrupt the current operation” (rationale: the application sends BEL to the user via the terminal to interrupt the user; the user sends BEL to the application via the terminal to interrupt the application). It doesn\u0026rsquo;t have a standard meaning when sent to a terminal.\nMost shells provide line editing features, so they set the terminal to raw mode. So do full-screen text mode applications. You may need to configure these applications to recognize Ctrl+G instead of Ctrl+C, and some may have non-configurable key bindings. So changing the interrupt character may or may not be practically doable depending on which applications you use.\nAnother approach could be to configure your terminal to change the byte sequence that it sends for the Ctrl+C keychord, or make it send nothing and instead perform a copy operation. You would also choose a different keychord to send Ctrl+C (if you have a non-laptop PC keyboard, you could use the out-of-the-way Pause/Break key). Not all terminals can be configured in this way.\n¹ Ctrl-S (XOFF) means stop, but it\u0026rsquo;s addressed to the terminal, not to the application. ² Next to Ctrl+X for next-line, with Ctrl+E and Ctrl+R for previous-line and page-up; these keys were chosen due to their placement on a QWERTY keyboard. ³ Nitpick: cooked mode is a set of terminal settings, including the interpretation of several characters including one that sends an interrupt signal.\nWhat does Ctrl-v do in The CtrlV key often meant \u0026ldquo;verbatim insert\u0026rdquo; – that is, insert the following character literally without performing any associated action. example\ntyping | press Ctrl-v and then press backspace typing \u0026lt;BS\u0026gt;| ","permalink":"https://sokinpui.github.io/Blog/post/tmuxandzshpasteandcopy/","summary":"If you use neither window Nor mac os, you may find you cannot use Ctrl-c to copy and Ctrl-v to paste in terminal. You have to press Ctrl-SHIFT-c to copy selected items, and Ctrl-SHIFT-v to paste from system clipboard.\nWindow user don\u0026rsquo;t have to concern this issue, because I believe you will endup with wsl, which by the end is close to Linux env. Mac user don\u0026rsquo;t need to concern this issue, because you can use CMD-c and CMD-v.","title":"Ctrl-c Ctrl-v copy and paste in tmux and zsh"},{"content":"I use multi cursor plugin and auto pairs together, unfortunately I find my old two plugins don\u0026rsquo;t integrate well. This autopairs from LunarWatcher often throw error: E117: Unknown function: AutoPairsTryInit when end editing with [multi cursor plugin]((https://github.com/mg979/vim-visual-multi). Although this plugin is already improved to be more compatible with vim-visual-multi. To be mentioned, this bug is fixed in this issue. I still find the bug occur.\nAnother auto pair plugins I google a solution, and finally end up with this Neovim plugins nvim-autopairs. Surprisingly, it is feature richer than this autopairs plugins, unfortunately, it only support Neovim.\nOther than basic function, you can extend its auto pairs rule by calling its rule method: (example from its repo)\nlocal Rule = require(\u0026#39;nvim-autopairs.rule\u0026#39;) npairs.add_rules({ Rule(\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;,{\u0026#34;tex\u0026#34;, \u0026#34;latex\u0026#34;}) -- don\u0026#39;t add a pair if the next character is % :with_pair(cond.not_after_regex(\u0026#34;%%\u0026#34;)) -- don\u0026#39;t add a pair if the previous character is xxx :with_pair(cond.not_before_regex(\u0026#34;xxx\u0026#34;, 3)) -- don\u0026#39;t move right when repeat character :with_move(cond.none()) -- don\u0026#39;t delete if the next character is xx :with_del(cond.not_after_regex(\u0026#34;xx\u0026#34;)) -- disable adding a newline when you press \u0026lt;cr\u0026gt; :with_cr(cond.none()) }, -- disable for .vim files, but it work for another filetypes Rule(\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;-vim\u0026#34;) ) Their already have some common rule that provided by its wiki. One of the very helpful rule is auto addspace on =.\nvar| insert = var = | insert = again var == | Also the plugin provide api for you to disable it per filetype. If you writing shell script you don\u0026rsquo;t auto addspace on =, you can diable it by:\nlocal Rule = require(\u0026#39;nvim-autopairs.rule\u0026#39;) npairs.add_rules({ Rule(\u0026#34;=\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;-sh\u0026#34;) --rule body }) You can write your own rule to fullfill your need. Most importantly, it won\u0026rsquo;t throw error if use with vim-visual-multi!\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim5-plugin-autopairs/","summary":"I use multi cursor plugin and auto pairs together, unfortunately I find my old two plugins don\u0026rsquo;t integrate well. This autopairs from LunarWatcher often throw error: E117: Unknown function: AutoPairsTryInit when end editing with [multi cursor plugin]((https://github.com/mg979/vim-visual-multi). Although this plugin is already improved to be more compatible with vim-visual-multi. To be mentioned, this bug is fixed in this issue. I still find the bug occur.\nAnother auto pair plugins I google a solution, and finally end up with this Neovim plugins nvim-autopairs.","title":"Neovim plugins recommendation: Auto pair and multi cursor"},{"content":" update at Thu Aug 10 01:10:36 PM CST 2023, add plugin for text object\nupdate at Mon Aug 14 01:05:19 PM CST 2023, tex_conceal\nupdate at Wed Aug 16 07:33:25 PM CST 2023, Yet another solution to preview markdown file\nMainly Introduce Neovim plugins and share config that help markdown writing.\nThe Full config is here\nBefore A good markdown setup just make fun easier, though the most weighted thing in writing should be the content instead of the tools you use. But a right tools will make editing a lot easier. Recently markdown can use for note taking, documenting, or blog writing. Markdown is similiar to HTML, but have a clear and readable syntax. Only looking at the syntax, you can already have idea how the file will be reandered. Compare to Tex, the syntax is simpler but less featured, if you don\u0026rsquo;t need complicate layout of your output file, you should consider markdown first. You can use some simple $Latex$ math expression like $\\int$ in markdown, already well supported by most of markdown editor.\nChoose of editor Oh, accidently involved to editor war, which editor you prefer? BTW, I use Neovim. There is two type editor, one is designed only for markdown, another are designed for general purpose. In my opinion, most of markdown editor, like Typora, or note editor but can also use as a markdown editor like Obsidian or logseq, former provides good reading and editing experience by its What You see Is What You GET(WYSIWYG). Latter provides reference link/backlink feature. Both of them are great, nevertheless, as I have mentioned, markdown as a markup language, its syntax is so simple, a good live preview is quite useless. Backlink is useful, but only useful if you take notes, or try to manage your personal knowledge in another new way. I would still prefer a tree organization for my notes, as most of the knowledge I need is well organizated already. Referencing maybe helpful for writer who need brain storming or system like wiki, it is still hard to imagine who have the mental power to manage and navigate a complex inter-referencing system.\nMost of the GUI markdown editor in terms of editing has not difference compare to the default \u0026ldquo;Text Edit\u0026rdquo; application of your OS. They may provide some mardkwon syntax allowing you click to insert via mouse, as mentioned above, markdown syntax is so simple that anyone can learn it in one minutes, remember after using a few times. Insert with markdown syntax with mouse is, um \u0026hellip; quite useless, I would say. In terms of editing, I think a general purpose editor may do a better job. Those \u0026ldquo;general purpose editor\u0026rdquo; have another name, code editor, I think any of VSCode, Emacs, Atom or Vim should be better in terms of editing, as they have so many features are for edit text! So pick whatever code editor you like! It is so personal choice, hard to recommend one. Hope this article can provide some idea that also works on yours.\nSome features should have for comfortable markdown editing:\nJump between files Searching File explorer syntax highlighting With above items, a comfortable writing environment have done half! Setup with Neovim Install those plugins with the manager you prefer. Since those plugins have more than markdown writing, The key mapping and functionality of them are not fully covered here, please check those plugins\u0026rsquo; website to have more details.\nInstall plugins with lazy.nvim Using lavy.nvim, we first add those line to init.lua:\n---lazy.nvim ---install plugin if missed local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not vim.loop.fs_stat(lazypath) then vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34;, \u0026#34;--branch=stable\u0026#34;, -- latest stable release lazypath, }) end vim.opt.rtp:prepend(lazypath) -- change you leader key here. vim.g.mapleader = \u0026#34; \u0026#34; Lazy.nvim recommend you modualize your configuration, make use of lua/ directory in your vim runtimepath.\n[so@fedora .config/nvim/lua]|lua » pwd /home/so/.config/nvim/lua [so@fedora .config/nvim/lua]|lua » tree . ├── config │ └── lualine.lua ├── lazy-init.lua ├── plugins │ ├── appearance.lua │ ├── autocompletion.lua │ ├── cleverf.lua │ ├── fern.lua │ ├── fzf.lua │ ├── lsp.lua │ ├── markdown.lua │ ├── multi_cursor.lua │ ├── nerdfont.lua │ ├── pairs.lua │ ├── sandwich.lua │ └── treesitter.lua └── settings ├── appearance.lua ├── format.lua ├── mapping.lua └── setting.lua 4 directories, 18 files All the plugins config located at plugins, here is how you can load plugin with lazy.nvim in init.lua.\nrequire(\u0026#34;lazy\u0026#34;).setup({ require(\u0026#34;plugins.nerdfont\u0026#34;), require(\u0026#34;plugins.appearance\u0026#34;), require(\u0026#34;plugins.treesitter\u0026#34;), require(\u0026#34;plugins.cleverf\u0026#34;), require(\u0026#34;plugins.lsp\u0026#34;), require(\u0026#34;plugins.sandwich\u0026#34;), require(\u0026#34;plugins.multi_cursor\u0026#34;), require(\u0026#34;plugins.pairs\u0026#34;), require(\u0026#34;plugins.autocompletion\u0026#34;), require(\u0026#34;plugins.fzf\u0026#34;), require(\u0026#34;plugins.markdown\u0026#34;), require(\u0026#34;plugins.fern\u0026#34;), { \u0026#34;dstein64/vim-startuptime\u0026#34;, cmd = \u0026#34;StartupTime\u0026#34;, }, },{}) -- ~/.config/nvim/lua/plugins/neoconf.lua return { { \u0026#34;folke/neoconf.nvim\u0026#34;, cmd = \u0026#34;Neoconf\u0026#34; }, \u0026#34;folke/neodev.nvim\u0026#34;, } -- ~/.config/nvim/lua/plugins/cleverf.lua return { { \u0026#34;rhysd/clever-f.vim\u0026#34;, keys = { \u0026#34;f\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;T\u0026#34; }, init = function() vim.g.clever_f_smart_case = 1 vim.g.clever_f_across_no_line = 0 vim.g.clever_f_chars_match_any_signs = \u0026#39;\\t\u0026#39; vim.g.clever_f_repeat_last_char_inputs = { \u0026#39;\\r\u0026#39; } vim.g.clever_f_fix_key_direction = 1 end, }, } -- ~/.config/nvim/lua/plugins/fern.lua return { { \u0026#39;lambdalisue/fern.vim\u0026#39;, keys = dependencies = { { \u0026#39;lambdalisue/fern-hijack.vim\u0026#39;, }, { \u0026#34;lambdalisue/fern-mapping-project-top.vim\u0026#34;, }, { \u0026#34;sokinpui/my-fern-preview.vim\u0026#34;, }, }, config = function() -- Set the Fern plugin configuration options in Lua vim.g[\u0026#34;fern#mark_symbol\u0026#34;] = \u0026#39;●\u0026#39; vim.g[\u0026#34;fern#renderer#default#collapsed_symbol\u0026#34;] = \u0026#39;▷ \u0026#39; vim.g[\u0026#34;fern#renderer#default#expanded_symbol\u0026#34;] = \u0026#39;▼ \u0026#39; vim.g[\u0026#34;fern#renderer#default#leading\u0026#34;] = \u0026#39; \u0026#39; vim.g[\u0026#34;fern#renderer#default#leaf_symbol\u0026#34;] = \u0026#39; \u0026#39; vim.g[\u0026#34;fern#renderer#default#root_symbol\u0026#34;] = \u0026#39;~ \u0026#39; vim.g[\u0026#34;fern#disable_default_mappings\u0026#34;] = 1 vim.g[\u0026#34;fern#disable_drawer_auto_quit\u0026#34;] = 0 vim.g[\u0026#34;fern#disable_viewer_hide_cursor\u0026#34;] = 1 -- Define the key mappings vim.api.nvim_set_keymap(\u0026#39;i\u0026#39;, \u0026#39;\u0026lt;C-e\u0026gt;\u0026#39;, \u0026#39;\u0026lt;Esc\u0026gt;:Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;=\u0026#39;, { noremap = true, silent = true }) vim.api.nvim_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;C-e\u0026gt;\u0026#39;, \u0026#39;:Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;=\u0026#39;, { noremap = true, silent = true }) end, }, } init will load when vim startup. config function will load when the plugin is loaded. plugins in dependencies are always lazy-loaded unless the main plugins is loaded. The benefit os using lazy.nvim is you can lazy load plugins on key, autocmd event, command, filetype. The startup time will be shorter. But most of the time I won\u0026rsquo;t open and close vim oftenly, If I need to run command in shell, I will open a new tmux window, I think it is a good pratice, I would recommend you do so. The reduce of StartupTime is in 10-20 ms in my case compare to using vim-plug, really small improvement. But since it is configurate in lua, most of the plugins I recently used provide lua configuration by default, so lazy.nvim is convenient a little bit. I don\u0026rsquo;t need to split plugin installation and configuation in two files as used to be in vim-plug.\nJump between files I use fzf.vim to jump between files, I have a notes directory, which is version controlled by git. I can jump files within this directory by fuzzy finding the name of the files. Original fzf.vim don\u0026rsquo;t support this feature, it only support find file under current directory by default.\nnnoremap \u0026lt;leader\u0026gt;fp :execute \u0026#39;Files\u0026#39; system(\u0026#39;git rev-parse --show-toplevel 2\u0026gt; /dev/null\u0026#39;)[:-2]\u0026lt;cr\u0026gt; This line use the command Files from fzf.vim to fuzzy find the top directory that contain .git/. demo: The notes directory can be obsidian vault or any folder sturcture that have the concept of root.\nfzf.vim full config return { { \u0026#39;junegunn/fzf.vim\u0026#39;, dependencies = { \u0026#39;junegunn/fzf\u0026#39;, }, keys = { {\u0026#34;\u0026lt;leader\u0026gt;f\u0026#34;}, {\u0026#34;\u0026lt;leader\u0026gt;gp\u0026#34;}, { \u0026#34;\u0026lt;c-l\u0026gt;\u0026#34;, mode = \u0026#34;i\u0026#34; }, { \u0026#34;\u0026lt;c-f\u0026gt;\u0026#34;, mode = \u0026#34;i\u0026#34; }, }, cmd = { \u0026#34;Files\u0026#34;, \u0026#34;GFiles\u0026#34;, \u0026#34;Buffers\u0026#34;, \u0026#34;Colors\u0026#34;, \u0026#34;Ag\u0026#34;, \u0026#34;Rg\u0026#34;, \u0026#34;RG\u0026#34;, \u0026#34;Lines\u0026#34;, \u0026#34;BLines\u0026#34;, \u0026#34;Tags\u0026#34;, \u0026#34;BTags\u0026#34;, \u0026#34;Marks\u0026#34;, \u0026#34;Jumps\u0026#34;, \u0026#34;Windows\u0026#34;, \u0026#34;Locate\u0026#34;, \u0026#34;History\u0026#34;, \u0026#34;Snippets\u0026#34;, \u0026#34;Commits\u0026#34;, \u0026#34;BCommits\u0026#34;, \u0026#34;Commands\u0026#34;, \u0026#34;Maps\u0026#34;, \u0026#34;Helptags\u0026#34;, \u0026#34;Filetypes\u0026#34;, }, build = \u0026#34;./install --all\u0026#34;, config = function() vim.cmd([[ let g:fzf_preview_window = [ \u0026#39;right,50%\u0026#39;, \u0026#39;ctrl-/\u0026#39; ] let g:fzf_layout = {\u0026#39;window\u0026#39;: { \u0026#39;width\u0026#39;: 0.9, \u0026#39;height\u0026#39;: 1 }} let g:fzf_buffers_jump = 1 nnoremap \u0026lt;leader\u0026gt;ff :Files\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fa :Files $HOME\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fp :\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fp :execute \u0026#39;Files\u0026#39; system(\u0026#39;git rev-parse --show-toplevel 2\u0026gt; /dev/null\u0026#39;)[:-2]\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fb :Buffers\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fs :Lines\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;gp :Rg\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f. :History\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f/ :History/\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f: :History:\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fh :Helptags\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fc :Commands\u0026lt;cr\u0026gt; \u0026#34;insert relative path of file in project inoremap \u0026lt;expr\u0026gt; \u0026lt;C-l\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . $(git rev-parse --show-cdup 2\u0026gt; /dev/null)\u0026#39;) inoremap \u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . $(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#39;) ]]) end, }, } Make sure you have fzf installed with lazy.nvim. cmd and keys are lazy loading config, but I find it really useless, as I have say that I rarely open and close vim in very shorttime, I don\u0026rsquo;t care too much StartupTime, those line config are just for fun, when I switch from vim-plug to lazy.nvim.\ninoremap \u0026lt;expr\u0026gt; \u0026lt;C-l\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . $(git rev-parse --show-cdup 2\u0026gt; /dev/null)\u0026#39;) inoremap \u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . $(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#39;) This first line will insert relative path to file within the root directory that contain .git/.\nThis first line will insert full path to file within the root directory that contain .git/.\nI recently use this short vimscript snippets instead of the autocompletion obsidian reference link provided by obsidian.nvim, see autocompletion in markdown with vim\nfile explorer Although fzf is powerful, sometimes I don\u0026rsquo;t remember what is the name of the file. I will use file explorer to navigate to the file I want. I use the plugin fern.\nFern (furn) is a general purpose asynchronous tree viewer written in pure Vim script.\nIt is very simple by default, some feature can be extended with extension/plugins, like preview file or jump to root directory(directory that contain .git/). It support mosue mapping, you can use mouse to open or expand file/directory as you would expect to do in another GUI editor.\ninoremap \u0026lt;C-e\u0026gt; \u0026lt;Esc\u0026gt;:Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;= nnoremap \u0026lt;C-e\u0026gt; :Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;= I can toggle the file explorer with Ctrl-e\ndemo: If you don\u0026rsquo;t like the default key bindings, you can change it in ~/.config/nvim/ftplugin/fern.vim. For exmaple I have change some of them. Fern have many API you can interact with, You can delete, rename files and directories like other GUI file finder. I don\u0026rsquo;t make move file key bindings, because I regard it is easier to do with my shell.\nPreview file when navigate files using jk is helpful when sometimes I don\u0026rsquo;t remember what is the content inside, I can toggle this with p in file explorer buffer. In orde to have this function you hvae to install fere plugin for preview.\ndemo: Another keymapping I use often are R, it will jump to the root of current directory(directory contain .git/), you will need to install this fern plugin.\nfern full config -- ~/.config/nvim/lua/plugins/fern.lua return { { \u0026#39;lambdalisue/fern.vim\u0026#39;, dependencies = { { \u0026#39;lambdalisue/fern-hijack.vim\u0026#39;, }, { \u0026#34;lambdalisue/fern-mapping-project-top.vim\u0026#34;, }, { \u0026#34;sokinpui/my-fern-preview.vim\u0026#34;, }, }, config = function() -- Set the Fern plugin configuration options in Lua vim.g[\u0026#34;fern#mark_symbol\u0026#34;] = \u0026#39;●\u0026#39; vim.g[\u0026#34;fern#renderer#default#collapsed_symbol\u0026#34;] = \u0026#39;▷ \u0026#39; vim.g[\u0026#34;fern#renderer#default#expanded_symbol\u0026#34;] = \u0026#39;▼ \u0026#39; vim.g[\u0026#34;fern#renderer#default#leading\u0026#34;] = \u0026#39; \u0026#39; vim.g[\u0026#34;fern#renderer#default#leaf_symbol\u0026#34;] = \u0026#39; \u0026#39; vim.g[\u0026#34;fern#renderer#default#root_symbol\u0026#34;] = \u0026#39;~ \u0026#39; vim.g[\u0026#34;fern#disable_default_mappings\u0026#34;] = 1 vim.g[\u0026#34;fern#disable_drawer_auto_quit\u0026#34;] = 0 vim.g[\u0026#34;fern#disable_viewer_hide_cursor\u0026#34;] = 1 -- Define the key mappings vim.api.nvim_set_keymap(\u0026#39;i\u0026#39;, \u0026#39;\u0026lt;C-e\u0026gt;\u0026#39;, \u0026#39;\u0026lt;Esc\u0026gt;:Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;=\u0026#39;, { noremap = true, silent = true }) vim.api.nvim_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;C-e\u0026gt;\u0026#39;, \u0026#39;:Fern . -drawer -reveal=% -width=35 -toggle\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;=\u0026#39;, { noremap = true, silent = true }) end, }, } The above snippet install the plugins and change the symbol for displying in directory tree\n\u0026#34; ~/.config/nvim/ftplugin/fern.vim nmap \u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \\ \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) \\ fern#smart#leaf( \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-open:select)\u0026#34;, \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-expand)\u0026#34;, \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-collapse)\u0026#34;, \\ ) nmap \u0026lt;buffer\u0026gt; \u0026lt;Plug\u0026gt;(fern-new-and-edit) \\ \u0026lt;Plug\u0026gt;(fern-action-new-file) \\ \u0026lt;Plug\u0026gt;(fern-action-open:select) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;CR\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;TAB\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) \u0026#34;nnoremap \u0026lt;buffer\u0026gt; h \u0026lt;Plug\u0026gt;(fern-action-collapse) \u0026#34;nnoremap \u0026lt;buffer\u0026gt; l \u0026lt;Plug\u0026gt;(fern-action-expand) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;2-LeftMouse\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) nnoremap \u0026lt;buffer\u0026gt; o \u0026lt;Plug\u0026gt;(fern-new-and-edit) nnoremap \u0026lt;buffer\u0026gt; nd \u0026lt;Plug\u0026gt;(fern-action-new-dir) nnoremap \u0026lt;buffer\u0026gt; D \u0026lt;Plug\u0026gt;(fern-action-remove) nnoremap \u0026lt;buffer\u0026gt; rn \u0026lt;Plug\u0026gt;(fern-action-rename)l nnoremap \u0026lt;buffer\u0026gt; s \u0026lt;Plug\u0026gt;(fern-action-open:split) nnoremap \u0026lt;buffer\u0026gt; v \u0026lt;Plug\u0026gt;(fern-action-open:vsplit) \u0026#34;nnoremap \u0026lt;buffer\u0026gt; r \u0026lt;Plug\u0026gt;(fern-action-reload) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; d \u0026lt;Plug\u0026gt;(fern-action-hidden:toggle) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; h \u0026lt;Plug\u0026gt;(fern-action-leave) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; l \u0026lt;Plug\u0026gt;(fern-action-enter) \u0026#34;enter project root, contain .git nnoremap \u0026lt;buffer\u0026gt; R \u0026lt;Plug\u0026gt;(fern-action-project-top) \u0026#34; preview file nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; p \u0026lt;Plug\u0026gt;(fern-action-preview:auto:toggle) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;C-d\u0026gt; \u0026lt;Plug\u0026gt;(fern-action-preview:scroll:down:half) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;C-u\u0026gt; \u0026lt;Plug\u0026gt;(fern-action-preview:scroll:up:half) \u0026#34;smart [q]uit nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;expr\u0026gt; \u0026lt;Plug\u0026gt;(fern-quit-or-close-preview) fern_preview#smart_preview(\u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-preview:close)\u0026#34;, \u0026#34;:q\\\u0026lt;CR\u0026gt;\u0026#34;) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; q \u0026lt;Plug\u0026gt;(fern-quit-or-close-preview) setlocal norelativenumber setlocal nonumber The above snippets change the keymap in fern file explorer buffer. \u0026lt;cr\u0026gt;, doubel-click, and tab will expand the directory or open the file.\no will creat new file\nnd will create new directory\nD will delete file or directory\nrn will rename the file or directory\ns will open file in split horizontial vim window\nv will open file in split vertical vim window\nd will show toggle hidden file\nh will navigate directory one level up at the directory cursor at\nl will navigate directory one level down at the directory cursor at\nR will navigate to the root of current directory( contain .git/ ), you need to install this plugin\np will toggle file preview, recently rich contents seems to be out of support.\n\u0026lt;c-u\u0026gt; and \u0026lt;c-d\u0026gt; scroll the preview file up and down respectively.\nq will close fern buffer or close the preview float window.\nSynatx highlight Markdown syntax is very simple, even without syntax highlight won\u0026rsquo;t effect writing flow. However, a beautiful syntax highlight just make those special symbol standout, so less mental burden when searching sytnax with eyes. Moreover, you will have beautiful syntax highlihgt in code block.\nI use nvim-treesitter and vim-markdown together to provide full syntax highlihgt. vim-markdown for $Latex$ and nvim-treesitter for code block. vim-markdown has option\nlet g:vim_markdown_math = 1 to enable syntax highlight for math block in $$ or $$ $$. Install treesitter parser markdown with command :TSInstall markown. In order to use treesitter highlight, your color scheme need to support treesitter. I use onedark.nvim. nvim-treesitter full config -- ~/.config/nvim/lua/plugins/treesitter.lua return { { \u0026#34;nvim-treesitter/nvim-treesitter\u0026#34;, build = \u0026#34;:TSUpdate\u0026#34;, config = function () local configs = require(\u0026#34;nvim-treesitter.configs\u0026#34;) configs.setup({ -- 安装 language parser -- :TSInstallInfo 命令查看支持的语言 ensure_installed = { \u0026#34;html\u0026#34;, \u0026#34;css\u0026#34;, \u0026#34;vim\u0026#34;, \u0026#34;lua\u0026#34;, \u0026#34;javascript\u0026#34;, \u0026#34;typescript\u0026#34;, \u0026#34;python\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;java\u0026#34;, \u0026#34;julia\u0026#34;, \u0026#34;query\u0026#34;, \u0026#34;markdown\u0026#34;, --\u0026#34;markdown_inline\u0026#34;, \u0026#34;bash\u0026#34;, }, -- 启用代码高亮功能 highlight = { enable = true, --additional_vim_regex_highlighting = false additional_vim_regex_highlighting = { \u0026#34;markdown\u0026#34; }, }, -- 启用增量选择 incremental_selection = { enable = true, keymaps = { --- init_selection = \u0026#39;\u0026lt;TAB\u0026gt;\u0026#39;, node_incremental = \u0026#39;\u0026lt;TAB\u0026gt;\u0026#39;, node_decremental = \u0026#39;\u0026lt;S-TAB\u0026gt;\u0026#39;, --- scope_incremental = \u0026#39;\u0026lt;TAB\u0026gt;\u0026#39;, } }, -- 启用基于Treesitter的代码格式化(=) . NOTE: This is an experimental feature. indent = { enable = false }, playground = { enable = true, disable = {}, updatetime = 25, -- Debounced time for highlighting nodes in the playground from source code persist_queries = false, -- Whether the query persists across vim sessions keybindings = { toggle_query_editor = \u0026#39;o\u0026#39;, toggle_hl_groups = \u0026#39;i\u0026#39;, toggle_injected_languages = \u0026#39;t\u0026#39;, toggle_anonymous_nodes = \u0026#39;a\u0026#39;, toggle_language_display = \u0026#39;I\u0026#39;, focus_language = \u0026#39;f\u0026#39;, unfocus_language = \u0026#39;F\u0026#39;, update = \u0026#39;R\u0026#39;, goto_node = \u0026#39;\u0026lt;cr\u0026gt;\u0026#39;, show_help = \u0026#39;?\u0026#39;, }, }, query_linter = { enable = true, use_virtual_text = true, lint_events = {\u0026#34;BufWrite\u0026#34;, \u0026#34;CursorHold\u0026#34;}, }, }) vim.wo.foldmethod = \u0026#39;expr\u0026#39; vim.wo.foldexpr = \u0026#39;nvim_treesitter#foldexpr()\u0026#39; -- 默认不要折叠 -- https://stackoverflow.com/questions/8316139/how-to-set-the-default-to-unfolded-when-you-open-a-file vim.wo.foldlevel = 99 end }, { \u0026#34;nvim-treesitter/playground\u0026#34;, cmd = \u0026#34;TSPlaygroundToggle\u0026#34;, }, } incremental_selection is increat the selected region in visual mode according to treesitter filetype parser. This config is copied from an chinese article here\ndemo: header jumps vim-markdown provide mapping [[ jump to last header above cursor, and ]] jump to next header above cursor. Or you prefer a sidebar header TOC, you can use the command Toc to generate a sidebar TOC, you can jump to the header by double click it or press enter.\nDemo: Markdown preview By me again:\nmarkdown syntax is so simple that you can preview it in your brain.\nMostly the preview is for Math expression, image, video and gif. I will either open browser with markown-preivew.nvim or Obsidian (Obsidian is the best markdown viewer ever!) to see how my file will be rendered. Obsidian file explorer will show rich content like *.gif, *.png or *.mp4. typora hide them!\nNew plugin found at Wed Aug 16 07:34:40 PM CST 2023, I now totally dropped markown-preivew.nvim, and use this plugin: open-in-obsidian.nvim. You can open the file using command Obsidian to \u0026ldquo;preview\u0026rdquo; current file in obsidian! why would I need a browser if the file I am editing is already a file inside obsidian vault?\nImage clipboard insertion Paste image from image clipboard to current buffer. Before I know this plugin, whenever I need to paste image, I will open Obsidian, because I find their is extension help me. But now I find this plugin, leaving Obsidian merely a markdown reader. vim-markdown, markown-preivew, and image-clipboard full config return { { \u0026#34;iamcco/markdown-preview.nvim\u0026#34;, build = \u0026#34;cd app \u0026amp;\u0026amp; npm install\u0026#34;, ft = \u0026#34;markdown\u0026#34;, cmd = \u0026#34;MarkdownPreview\u0026#34;, config = function() vim.g.mkdp_auto_close = false vim.g.mkdp_open_to_the_world = false vim.g.mkdp_open_ip = \u0026#34;127.0.0.1\u0026#34; vim.g.mkdp_port = \u0026#34;8888\u0026#34; vim.g.mkdp_browser = \u0026#34;chromium-browser\u0026#34; vim.g.mkdp_echo_preview_url = true vim.g.mkdp_page_title = \u0026#34;${name}\u0026#34; end, }, { \u0026#34;preservim/vim-markdown\u0026#34;, ft = \u0026#34;markdown\u0026#34;, config = function() vim.g.vim_markdown_folding_disabled = 1 vim.g.vim_markdown_no_default_key_mappings = 0 vim.g.vim_markdown_conceal_code_blocks = 0 vim.g.vim_markdown_math = 1 vim.g.tex_conceal = \u0026#34;abmgs\u0026#34; vim.g.vim_markdown_conceal = 1 vim.g.vim_markdown_toc_autofit = 1 vim.g.vim_markdown_follow_anchor = 0 vim.g.vim_markdown_toml_frontmatter = 1 vim.g.vim_markdown_strikethrough = 1 end, }, { \u0026#34;postfen/clipboard-image.nvim\u0026#34;, keys = { { \u0026#34;\u0026lt;leader\u0026gt;i\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;PasteImg\u0026lt;CR\u0026gt;\u0026#34;}, }, config = function() require\u0026#39;clipboard-image\u0026#39;.setup { -- Default configuration for all filetype default = { img_dir = {\u0026#34;%:p:h\u0026#34;, \u0026#34;img\u0026#34;}, -- Use table for nested dir (New feature form PR #20) img_name = function () vim.fn.inputsave() local name = vim.fn.input(\u0026#39;Name: \u0026#39;) vim.fn.inputrestore() return name end, affix = \u0026#34;\u0026lt;\\n %s\\n\u0026gt;\u0026#34; -- Multi lines affix }, -- You can create configuration for ceartain filetype by creating another field (markdown, in this case) -- If you\u0026#39;re uncertain what to name your field to, you can run `lua print(vim.bo.filetype)` -- Missing options from `markdown` field will be replaced by options from `default` field markdown = { img_dir = {\u0026#34;%:p:h\u0026#34;, \u0026#34;img\u0026#34;}, -- Use table for nested dir (New feature form PR #20) img_name = function () vim.fn.inputsave() local name = vim.fn.input(\u0026#39;Name: \u0026#39;) vim.fn.inputrestore() return name end, img_handler = function(img) vim.cmd(\u0026#34;normal! f[\u0026#34;) -- go to [ vim.cmd(\u0026#34;normal! a\u0026#34; .. img.name) -- append text with image name end, affix = \u0026#34;![](%s)\u0026#34;, } } end }, { \u0026#34;lervag/lists.vim\u0026#34;, ft = \u0026#34;markdown\u0026#34;, config = function() vim.cmd(\u0026#34;ListsEnable\u0026#34;) end } } image-clipboard will insert image from clipboard when if you press \u0026lt;leader\u0026gt;i in normal mode,\nThose line will prompt the name before paste\nimg_name = function () vim.fn.inputsave() local name = vim.fn.input(\u0026#39;Name: \u0026#39;) vim.fn.inputrestore() return name end Those line keep the alt-text same as the image\nimg_handler = function(img) vim.cmd(\u0026#34;normal! f[\u0026#34;) -- go to [ vim.cmd(\u0026#34;normal! a\u0026#34; .. img.name) -- append text with image name end, This line will store the image in the subfolder img/ at the directory current file at. If img/ don\u0026rsquo;t exist, it will be created\nimg_dir = {\u0026#34;%:p:h\u0026#34;, \u0026#34;img\u0026#34;}, -- Use table for nested dir (New feature form PR #20) Autocompletion The main reason I use an code editor for markdown editing even It don\u0026rsquo;t provide live preview.\nWorth to mention again:\nmarkdown syntax is so simple that you can preview it in your brain.\nThe cost of drop live preview compare to have autocompletion is nearly zero. With autocompletion, I can be lazy to type, complete the long words occur more than once. Use snippets to insert pre-defined contents. Recently, I have switch from coc.nvim to nvim-cmp for the plugin obsidian.nvim to insert reference link. BTW, I find it nearly useles\ndemo: autocompletion with nvim-cmp full config return { { \u0026#39;SirVer/ultisnips\u0026#39;, init = function() vim.g.UltiSnipsExpandTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpForwardTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpBackwardTrigger = \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34; end }, { \u0026#39;hrsh7th/nvim-cmp\u0026#39;, event = \u0026#34;InsertEnter\u0026#34;, dependencies = { \u0026#39;hrsh7th/cmp-buffer\u0026#39;, \u0026#39;FelipeLema/cmp-async-path\u0026#39;, \u0026#39;hrsh7th/cmp-nvim-lsp\u0026#39;, --\u0026#39;hrsh7th/cmp-cmdline\u0026#39;, \u0026#39;hrsh7th/cmp-calc\u0026#39;, \u0026#39;onsails/lspkind-nvim\u0026#39;, { \u0026#34;quangnguyen30192/cmp-nvim-ultisnips\u0026#34;, config = function() -- optional call to setup (see customization section) require(\u0026#34;cmp_nvim_ultisnips\u0026#34;).setup{} end, }, }, config = function() local t = function(str) return vim.api.nvim_replace_termcodes(str, true, true, true) end local has_words_before = function() local line, col = unpack(vim.api.nvim_win_get_cursor(0)) return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match(\u0026#34;%s\u0026#34;) == nil end local cmp = require \u0026#39;cmp\u0026#39; --local lspkind = require(\u0026#39;lspkind\u0026#39;) cmp.setup { snippet = { expand = function(args) vim.fn[\u0026#34;UltiSnips#Anon\u0026#34;](args.body) end, }, sources = { { name = \u0026#39;buffer\u0026#39;, keyword_length = 1, option = { keyword_length = 4, keyword_pattern = [[\\k\\+]], get_bufnrs = function() return vim.api.nvim_list_bufs() end } }, { name = \u0026#39;nvim_lsp\u0026#39; }, { name = \u0026#34;ultisnips\u0026#34; }, --{ name = \u0026#39;cmdline\u0026#39; }, { name = \u0026#39;async_path\u0026#39; }, { name = \u0026#39;calc\u0026#39; }, }, mapping = cmp.mapping.preset.insert({ [\u0026#39;\u0026lt;c-e\u0026gt;\u0026#39;] = cmp.mapping({ i = function(fallback) cmp.close() fallback() end }), [\u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert }) elseif has_words_before() then cmp.complete() else fallback() end end, }), [\u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert }) else fallback() end end, }), [\u0026#39;\u0026lt;C-n\u0026gt;\u0026#39;] = cmp.mapping({ c = function() if cmp.visible() then cmp.select_next_item({ behavior = cmp.SelectBehavior.Select }) else vim.api.nvim_feedkeys(t(\u0026#39;\u0026lt;Down\u0026gt;\u0026#39;), \u0026#39;n\u0026#39;, true) end end, i = function(fallback) if cmp.visible() then cmp.select_next_item({ behavior = cmp.SelectBehavior.Select }) else fallback() end end }), [\u0026#39;\u0026lt;C-p\u0026gt;\u0026#39;] = cmp.mapping({ c = function() if cmp.visible() then cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select }) else vim.api.nvim_feedkeys(t(\u0026#39;\u0026lt;Up\u0026gt;\u0026#39;), \u0026#39;n\u0026#39;, true) end end, i = function(fallback) if cmp.visible() then cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select }) else fallback() end end }), }), } cmp.setup.cmdline(\u0026#39;:\u0026#39;, { completion = { autocomplete = false }, sources = cmp.config.sources({ { name = \u0026#39;async_path\u0026#39; } }, { { name = \u0026#39;cmdline\u0026#39; } }) }) end }, } You can interrupt nvim-cmp as the front end, it only provide UI, the source for completion is the backend, where you have to install separately,\ncomplete words occured in buffer, the get_bufnrs function allows you complete words from all opened buffers.(by default only complete words from current buffer)\n{ name = \u0026#39;buffer\u0026#39;, keyword_length = 1, option = { keyword_length = 4, keyword_pattern = [[\\k\\+]], get_bufnrs = function() return vim.api.nvim_list_bufs() end } }, The source calc can handle some simple math calculation.\nasync_path will complete directory asynchronous, so won\u0026rsquo;t cause lag when the size of directory is too big.\n\u0026lt;Tab\u0026gt; and \u0026lt;S-Tab\u0026gt; will complete words on suggest menu, You don\u0026rsquo;t have to press \u0026lt;CR\u0026gt; to confirm.\n\u0026lt;C-j\u0026gt; will expand snippets and jump to next snippets cursor holder\n\u0026lt;C-k\u0026gt; will jump to previous snippets cursor holder\n\u0026lt;C-e\u0026gt; will close the menu\ntext object for markdown Extend text object in markdown, I found this plugin: text object for markdown, the code block text object provide by it is extremely useful. It use api from another plugin vim-textobj-user. demo text object plugin config return { { \u0026#34;coachshea/vim-textobj-markdown\u0026#34;, dependencies = { \u0026#34;kana/vim-textobj-user\u0026#34; }, ft = \u0026#34;markdown\u0026#34;, config = function() vim.g.textobj_markdown_no_default_key_mappings = 1 vim.cmd([[ onoremap ic \u0026lt;plug\u0026gt;(textobj-markdown-Bchunk-i) onoremap ac \u0026lt;plug\u0026gt;(textobj-markdown-Bchunk-a) vnoremap ic \u0026lt;plug\u0026gt;(textobj-markdown-Bchunk-i) vnoremap ac \u0026lt;plug\u0026gt;(textobj-markdown-Bchunk-a) ]]) end } } zsh Since using neovim in terminal, some shell hack is required to make writing even more comfortable. I don\u0026rsquo;t use Neovim terminal, its color never display same as my original terminal. Instead, I use tmux new window if I needed. I don\u0026rsquo;t do fancy file management with my Neovim file explorer because I prefer to manage them in shell.\nThe last required configuration of zsh are merely tab completion and remapping the fully sucked tmux default key bindings.\nFor zsh completion, I would recommend you read this blog detaily cover about zsh completion\nFor tmux configuration guide, I would recommend you read this blog detaily cover about configure tmux\nMay not helpful conceal Hide the syntax when cursor is not at the line, maybe helpful or not. Vim has this function built-in, you can set set conceallevel=2. vim-markdown also have options that control concealment for different group, they are:\nlet g:vim_markdown_math = 1 to enalbe concealment for $Latex$ syntax\nlet g:tex_conceal = \u0026quot;abmgs\u0026quot; to set the concealment options for tex object in both markdown and tex file, see :help tex_conceal to see details of options.\nlet g:vim_markdown_conceal_code_blocks = 1 to enalbe concealment for code block delimiter.\nlet g:vim_markdown_strikethrough = 1 to enable concealment for Strikethrough. This featuer don\u0026rsquo;t require conceallevel set in vim Demo Auto list in vim Since most of the GUI markdown editor support auto generate list when you hit enter. I found one plugin bullets.vim. It will auto insert list base on the list symbol last line used. Quite helpful when you insert orderlist. But it seems to break your \u0026lt;CR\u0026gt; in other plugins, but just fine with me, please see this discussion on reddit Demo: Searching I will open Obsidian and use its search box. Sometimes I will open new tmux windows and search with rg(ripgrep)\nAfter As you see, the markdown system built in this blog is totally offline, so that you can choose the tools for different task, like A code editor over in editing, a notes taking app over in reading rich content. I do use some cloud based notes app like notion, However, it often lag, and low in protability, the file is difficult to edit outside it. I am forced to use the function provided by single application. I prefer offline solution than cloud based for markdown writing.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim4-markdownwritingsetup/","summary":"update at Thu Aug 10 01:10:36 PM CST 2023, add plugin for text object\nupdate at Mon Aug 14 01:05:19 PM CST 2023, tex_conceal\nupdate at Wed Aug 16 07:33:25 PM CST 2023, Yet another solution to preview markdown file\nMainly Introduce Neovim plugins and share config that help markdown writing.\nThe Full config is here\nBefore A good markdown setup just make fun easier, though the most weighted thing in writing should be the content instead of the tools you use.","title":"Setup Markdown writing environment with zsh + Neovim"},{"content":"I have seen some post and issue on Vim github that want XDG base configuration become one of the runtimpath of Vim(not Neovim), actually a simple hack can done so.\nmkdir $HOME/.config/vim mkdir $HOME/.vim mv $HOME/.vimrc $HOME/.vim/vimrc mv $HOME/.vim $HOME/.config/vim ln -s $HOME/.config/vim $HOME/.vim Do you know there your vimrc can located at either $HOME/.vimrc or $HOME/.vim/vimrc, so you can move your whole runtimpath to $HOME/.config/vim, then create a symbolic link $HOME/.vim point to $HOME/.config/vim.\nAlthough I know XDG is more than just a directory, it may still be helpful for group all your configuration together.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim3-xdgforvim/","summary":"I have seen some post and issue on Vim github that want XDG base configuration become one of the runtimpath of Vim(not Neovim), actually a simple hack can done so.\nmkdir $HOME/.config/vim mkdir $HOME/.vim mv $HOME/.vimrc $HOME/.vim/vimrc mv $HOME/.vim $HOME/.config/vim ln -s $HOME/.config/vim $HOME/.vim Do you know there your vimrc can located at either $HOME/.vimrc or $HOME/.vim/vimrc, so you can move your whole runtimpath to $HOME/.config/vim, then create a symbolic link $HOME/.","title":"XDG base configuration for Vim"},{"content":"This blog is written for those how nothing about git. Just a quick start about what you can do with your command line tools git.\nWhat is git This picture describe what is git, imagine your working direction of your project, when you want to try something new and don\u0026rsquo;t want to break and manually merge new feature to your development, create a branch, like parallel universe, you can take another try in parallel universe, after that, you can merge those branch to your main branch or simply delete the branch. \u0026ldquo;Branch is cheap\u0026rdquo;.\nbasic usage convert current directory into git repo, all subdirectory will be managed by git\ngit init You can check which file is being changed\ngit status We say the chagne is state when you commit it, before commit, you have to add the change to git.\ngit add \u0026lt;file1\u0026gt; \u0026lt;directory1\u0026gt; \u0026lt;directory2\u0026gt; # add changed directory and file to git index git commit -m \u0026#34;commit message for this change \u0026#34; Usually the commit will not longer than 50 words as to summarize the change you have make, if you have additonal information about this change, you can add notes to commit\ngit notes add \u0026lt;commit\u0026gt; To have a overview of commit, you can check git log\ngit log \u0026lt;commit\u0026gt; Once you commit the change, the branch add a node, like check point of game, you can reset the change by reset the commit.\ngit reset \u0026lt;commit index\u0026gt; # reset the commit and unstate the change, working directory leave unchanged Use option --hard to apply revert the directory also\ngit reset --hard \u0026lt;commit index\u0026gt; # reset the commit and unstate the change, working directory change back to the state of that commit Be careful the change between HEAD and the commit going to revert by git reset will be lost, extremely careful to use with the flag --hard\nCreate new branch to test new feature. This branch\u0026rsquo;s working directory will same as the last state of current branch.\ngit branch \u0026lt;feature1\u0026gt; # create new branch Then main branch is called main. You can switch branch if there is not change unstated, otherwise, you have to commit the change first.\ngit switch \u0026lt;branch name\u0026gt; # git branch name You can merge branch to other branch. You need to first checkout the branch you want to merge to.\ngit checkout \u0026lt;branch merge to\u0026gt; Then you can merge two branches\ngit merge \u0026lt;branch going to be merged\u0026gt; Above git command is enough for version control your config, to get with git, it is best to try it, use it. If you afraid your config break, backup it before version control.\nUsage Neovim community often post some config that is fully configured in lua instead of vimscript, however, you have to make a lot of change, if you want to keep vimscript config separately, try to create a branch call \u0026ldquo;lua\u0026rdquo; and you don\u0026rsquo;t have to merge this branch if unnecessary.\nI want to try an plugins call obsidian.nvim, which use nvim-cmp as completion frontend, I use coc.nvim at that time, so I try to use nvim-cmp, you can find more in this blog\nIf you want to try new plugins without breaking your current config, you can create a branch call experiment, before apply change to main, test it in experiment branch first, later you can merge the change to from experiment to main. The benefits of this approach is that if you don\u0026rsquo;t want to fix the problem of new plugins now, you can still fallback to your stable, working config, fix the issue when you have free.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim2-gityourconfig/","summary":"This blog is written for those how nothing about git. Just a quick start about what you can do with your command line tools git.\nWhat is git This picture describe what is git, imagine your working direction of your project, when you want to try something new and don\u0026rsquo;t want to break and manually merge new feature to your development, create a branch, like parallel universe, you can take another try in parallel universe, after that, you can merge those branch to your main branch or simply delete the branch.","title":"Use git to version control your config"},{"content":"Do you still remember why you choose one editor, because it get the job done? Or its extenability? Or its plugins ecosystem? My first editor is VSCode, introduced by CS50, back to those day, I regard VSCode is the only tools exist on earth that can write code. But I am scared by its UI, there is too much button, too many options. In the future, I find VSCode is defintily one of the easiest get into and out of the box editor. \u0026ldquo;What does plugin means? What is auto pairs? What is completion?\u0026rdquo; I don\u0026rsquo;t understand those terms, I am too young to know manual exist and google for help.\nThe chance I know Vim is from university Unix talk, it is the first time I know one can navigation using hjkl instead of arrow key. I can\u0026rsquo;t describe how excited I was, since I can\u0026rsquo;t blindtype arrow key, everytime I press arrow I have to look at the keyboard and find them. Although I still use Vim now, I don\u0026rsquo;t feel their is significant productivity increment, since Vim modal editing is avalible many where, I keep using vim simply because changing behaviour of the editor just feel more natural on Vim/Neovim.\nThe myth of productivity about using Vim Many of user claims that full keyboard navigation is more efficient than mouse + keyboard hyper setup. I used to agree so, but the longer time I work with my computer, the more limitation I can feel of being full keyboard navigation. Actually it must be vary from people, one may live in terminal, another one may live in their browser. There is no same definition for productivity, we should not keep using full keyboard navigation as the biggest selling point of Vim. In my understanding, the reason Vim is over other editor only occur if you fully embrance its ecosystem, some Vim command, or some vimsciprt and lua plugin, that is petty but just make your experience different. When you familiar with your editor, you can easily make some change to fullfill you new requirement, this type of productivity is difficult to clone to other tools once you get into one deeply.\nSince I use Vim mostly for writing, or note taking. I have install many plugins that can help writing code, yes they do increase my productivity, but only when I use Vim to configure Vim.( It is my personal fault ) Like one of the plugin fzf.vim is only helpful when I navigate in lua config modual.( Of course it is my case ). However some do significantly increase my productivity. They are auto completion, I can\u0026rsquo;t leave them when writing anymore. By the way, it can done with any modern editor, not Vim stand out here.\nThe truth of using Vim Vim plugin is extremely useful when configure Vim, if I don\u0026rsquo;t config, restructure config, plugin become less useful, but if I don\u0026rsquo;t config Vim, Vim become less useful, If Vim is not useful, Why I still need to use Vim? Vim is actually time-sink, because you can explore so much function with vim. No matter plugins or built-in function, you have so much to tweak. So, why don\u0026rsquo;t take any attribute to use Vim, Vim as toy, make fun with it, don\u0026rsquo;t care about productivity!\nVim modal editing is about muscale memory, you have to put time to practice and try to work with this style of typing. I don\u0026rsquo;t think reading many tutorial will help you learn Vim. Walking though those long long Vim tutorial will only scare you. Instead, try to read the manual or google for help only when you need them.\nAs mentioned above, you don\u0026rsquo;t have to build a prefect vim config to work, vanilla vim already quite good only lacking personalized config. Vim distro may obsolute you to use vim for the first time, because you have too many concept need to understand, without the context and background of using Vim, you may find difficult when try to udnerstand terms, or ignore some powerful features, Those Vim distro is more than just editing, they emphasize config and plugins packed together.\n","permalink":"https://sokinpui.github.io/Blog/post/vim/vim1-usingvimintro/","summary":"Do you still remember why you choose one editor, because it get the job done? Or its extenability? Or its plugins ecosystem? My first editor is VSCode, introduced by CS50, back to those day, I regard VSCode is the only tools exist on earth that can write code. But I am scared by its UI, there is too much button, too many options. In the future, I find VSCode is defintily one of the easiest get into and out of the box editor.","title":"Another attribute to use Vim"},{"content":"Tips and issue I discovered during mergation. Hope to save someone\u0026rsquo;s time in the future.\nWhy lazy.nvim This is a long story, shall we start from another application obsidian. I use obsidian for notes taking. I want some faster, non-repeative and easier note editing tools, and therefor I use some editor as my obsidian editing engine, in my case, Neovim Setup autocompletion and snippets in Neovim is always easier than same setup on obsidian. In Neovim, we have coc.nvim, nvim-cmp and coq_nvim etc\u0026hellip; And you have many snippets source. However, I cannot easily insert link to files as well as link to header in Vim. Although coc.nvim already provide some source, lacking obsidian. Then I google for solution, I found obsidian.nvim, which say it provide link completion source for nvim-cmp Then I have look at nvim-cmp, It separate autocompletion front end and back end, user have too integrate them manually. In terms of personalization, it provide more free. It terms of out-of-box, it is bad. If only insert link to relative file, fzf.vim with some tweaks can do so.\n\u0026#34;find the root git repo, in case of obsidian, it is the vault \u0026#34; insert relative path inoremap \u0026lt;expr\u0026gt; \u0026lt;C-l\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . \\ $(git rev-parse --show-cdup 2\u0026gt; /dev/null)\u0026#39;) \u0026#34; insert full path inoremap \u0026lt;expr\u0026gt; \u0026lt;C-f\u0026gt; fzf#vim#complete#path(\u0026#39;fd --type=file . \\ $(git rev-parse --show-toplevel 2\u0026gt; /dev/null)\u0026#39;) But too much tweaks for insert header as smooth as obsidian.\nSo, I try nvim-cmp, I just find that many of Neovim specify plugins have to configurate in lua, it should be easier to manage those plugin with some Neovim plugin manager like lavy.nvim. (Many lua plugins provide snippets for installation and configuration at the same place, but require lazy.nvim or packer.nvim) Then, this is the beginning of this blog.\nissue can\u0026rsquo;t use pack anymore require dependency if this is some plugins of plugins.\nLazy.nvim will and need to manage all your plugin, see the description from lazy.nvim\nlazy.nvim does NOT use Neovim packages and even disables plugin loading completely (vim.go.loadplugins = false). It takes over the complete startup sequence for more flexibility and better performance. In practice this means that step 10 of Neovim Initialization is done by Lazy:\nAll the plugins\u0026rsquo; init() functions are executed All plugins with lazy=false are loaded. This includes sourcing /plugin and /ftdetect files. (/after will not be sourced yet) All files from /plugin and /ftdetect directories in you rtp are sourced (excluding /after) All /after/plugin files are sourced (this includes /after from plugins)\nFiles from runtime directories are always sourced in alphabetical order. So all the plugins installed with vim built-in plugins will not be loaded, or you have to add extra options when you calling:\nreturn { {dir=\u0026#39;~/config/nvim/pack/*/start/Plugin\u0026#39;, config=true}, } when return the plugin table spec to lazy.nvim, if you use pack directory to manage personal scirpt or plugins like me, you have to consider move those plugins into your $NVIMRUNTIMPATH ~/.confg/nvim. I merge them with simple bash script:\nmoveToRtp(){ for plugindir in $*; do cd $plugindir for file in $(find . -type f) rtp=$(echo $(echo $file | sed \u0026#34;s/\\.\\///\u0026#34;) | sed \u0026#34;s/\\/.*$//\u0026#34;) cp file \u0026#34;~/.config/nvim/$rtp\u0026#34; cd .. } moveToRtp Plugin1 Plugin2 Plugin3 ... This simple script will can move plugins don\u0026rsquo;t contain /after/*. I just merge /after/* manually.\nplugins need to take extra care durig mergation Some plugins configuration need special care when configure with lazy.nvim. Most of the case I found related to plugins\u0026rsquo; compability with lua, I would recommend if the confiuration is already in vimscript, keep going with vimscript if you don\u0026rsquo;t care performance loss(actually I don\u0026rsquo;t know how much loss, maybe it is ignorable)\nreturn { \u0026#34;some/plugin\u0026#34;, config = function() vim.cmd([[ let g:plguinSettings = \u0026#34;...\u0026#34; noremap \u0026lt;C-j\u0026gt; \u0026lt;Plug\u0026gt;(plugin-do-something) ]]) end } It should solve most of the problem and save time during mergation because you can avoid rewrite all configuration in lua when vim plugins usually provide vimscript api for configuration. Due to the difference between data structure of vimscript and lua, vim.g.setttingAPI = \u0026quot;...\u0026quot; may not always work.\n1. fern.vim Fern (furn) is a general purpose asynchronous tree viewer written in pure Vim script. If you use fern with some external plugins, you should remember add them as dependency of fern.vim:\nreturn { { \u0026#39;lambdalisue/fern.vim\u0026#39;, dependencies = { \u0026#39;lambdalisue/fern-hijack.vim\u0026#39;, \u0026#34;lambdalisue/fern-mapping-project-top.vim\u0026#34;, \u0026#34;sokinpui/my-fern-preview.vim\u0026#34;, }, } Otherwise, you may see error like: 2. fzf.vim If install fzf.vim with vim-plug, I don\u0026rsquo;t have to install fzf if I have install fzf locally outside vim. However, you should do so in lazy.nvim\nreturn { { \u0026#39;junegunn/fzf.vim\u0026#39;, build = \u0026#34;./install --all\u0026#34;, }, \u0026#39;junegunn/fzf\u0026#39;, } Otherwise, error again: 3. visual-multi It is a mulit cursor plugin for Vim. If you remap key like me, I remap s to c in multi-cursor mode. In lua, you should use\nreturn { { \u0026#34;mg979/vim-visual-multi\u0026#34;, branch = \u0026#34;master\u0026#34;, config = function() vim.g.VM_custom_remaps = { s = \u0026#39;c\u0026#39; } end }, } instead of let g:VM_custom_remaps = { 's' = 'c' } in vimscript.\n4. auto-pairs return { { \u0026#34;LunarWatcher/auto-pairs\u0026#34;, config = function() vim.g.AutoPairs = { [\u0026#39;(\u0026#39;] = \u0026#39;)\u0026#39;, [\u0026#39;[\u0026#39;] = \u0026#39;]\u0026#39;, [\u0026#39;{\u0026#39;] = \u0026#39;}\u0026#39;, [\u0026#39;\u0026#39;\u0026#39;] = \u0026#39;\u0026#39;\u0026#39;, [\u0026#39;\u0026#34;\u0026#39;] = \u0026#39;\u0026#34;\u0026#39;, [\u0026#39;`\u0026#39;] = \u0026#39;`\u0026#39;, [\u0026#39;\u0026lt;!--\u0026#39;] = \u0026#39;--\u0026gt;\u0026#39;, [\u0026#39;/*\u0026#39;] = \u0026#39;*/\u0026#39;, [\u0026#39;```\u0026#39;] = \u0026#39;```\u0026#39;, [\u0026#39;\u0026#34;\u0026#34;\u0026#34;\u0026#39;] = \u0026#39;\u0026#34;\u0026#34;\u0026#34;\u0026#39;, [\u0026#34;\u0026#39;\u0026#39;\u0026#39;\u0026#34;] = \u0026#34;\u0026#39;\u0026#39;\u0026#39;\u0026#34; } end, }, } Since offical version in vimscript is:\nlet g:AutoPairs = {\u0026#39;(\u0026#39;:\u0026#39;)\u0026#39;, \u0026#39;[\u0026#39;:\u0026#39;]\u0026#39;, \u0026#39;{\u0026#39;:\u0026#39;}\u0026#39;,\u0026#34;\u0026#39;\u0026#34;:\u0026#34;\u0026#39;\u0026#34;,\u0026#39;\u0026#34;\u0026#39;:\u0026#39;\u0026#34;\u0026#39;, \u0026#34;`\u0026#34;:\u0026#34;`\u0026#34;, \u0026#39;\u0026lt;!--\u0026#39;:\u0026#39;--\u0026gt;\u0026#39;, \u0026#39;/*\u0026#39;:\u0026#39;*/\u0026#39;, \u0026#39;```\u0026#39;:\u0026#39;```\u0026#39;, \u0026#39;\u0026#34;\u0026#34;\u0026#34;\u0026#39;:\u0026#39;\u0026#34;\u0026#34;\u0026#34;\u0026#39;, \u0026#34;\u0026#39;\u0026#39;\u0026#39;\u0026#34;:\u0026#34;\u0026#39;\u0026#39;\u0026#39;\u0026#34;} 5. sandwich-vim I don\u0026rsquo;t know why g:sandwich_no_default_key_mappings cannnot set via Lazy.nvim with lua. I have to do so to take configuration work\nlocal M = {} M.config = { { \u0026#34;machakann/vim-sandwich\u0026#34;, }, } vim.cmd([[ let g:sandwich_no_default_key_mappings = 1 \u0026#34; my mapping ... ... ]]) return M and then in init.lua, I should call this block with.config\nrequire(\u0026#34;lazy\u0026#34;).setup({ require(\u0026#34;plugins.sandwich\u0026#34;).config, },{}) 6. Ultisnips x nvim-cmp The tab will sucks if you have setting wrong, this part is the most time-consumming part to debug, I nearly give up with nvim-cmp because of its bad properties.\nIn Ultisnips, you can change the key for expand and jump, since I don\u0026rsquo;t like press \u0026lt;CR\u0026gt; to confirm completion selection, I use \u0026lt;C-j\u0026gt; to expand and jump forward in snips, \u0026lt;C-k\u0026gt; to jump backward.\nAt the beginning, I try follow plugin table spec for nvim-cmp:\nlocal M = {} M.config = { { \u0026#39;SirVer/ultisnips\u0026#39;, }, { \u0026#39;hrsh7th/nvim-cmp\u0026#39;, dependencies = { \u0026#39;hrsh7th/cmp-buffer\u0026#39;, \u0026#39;FelipeLema/cmp-async-path\u0026#39;, \u0026#39;hrsh7th/cmp-nvim-lsp\u0026#39;, --\u0026#39;hrsh7th/cmp-cmdline\u0026#39;, \u0026#39;hrsh7th/cmp-calc\u0026#39;, \u0026#39;onsails/lspkind-nvim\u0026#39;, { \u0026#34;quangnguyen30192/cmp-nvim-ultisnips\u0026#34;, config = function() -- optional call to setup (see customization section) require(\u0026#34;cmp_nvim_ultisnips\u0026#34;).setup{} end, }, }, after = \u0026#34;SirVer/ultisnips\u0026#34;, config = function() local has_words_before = function() local line, col = unpack(vim.api.nvim_win_get_cursor(0)) return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match(\u0026#34;%s\u0026#34;) == nil end vim.g.UltiSnipsExpandTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpForwardTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpBackwardTrigger = \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34; local cmp = require \u0026#39;cmp\u0026#39; --local lspkind = require(\u0026#39;lspkind\u0026#39;) cmp.setup { snippet = { expand = function(args) vim.fn[\u0026#34;UltiSnips#Anon\u0026#34;](args.body) end, }, sources = { {name = \u0026#39;buffer\u0026#39; , keyword_length = 0}, { name = \u0026#39;nvim_lsp\u0026#39; }, { name = \u0026#34;ultisnips\u0026#34; }, --{ name = \u0026#39;cmdline\u0026#39; }, { name = \u0026#39;async_path\u0026#39; }, { name = \u0026#39;calc\u0026#39; }, }, mapping = cmp.mapping.preset.insert({ [\u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert }) elseif has_words_before() then cmp.complete() else fallback() end end, }), [\u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert }) else fallback() end end, }), } end }, } return M Pay attention with this three line\nvim.g.UltiSnipsExpandTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpForwardTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpBackwardTrigger = \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34; No matter in lua or in vimscript\nlet g:UltiSnipsExpandTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; let g:UltiSnipsJumpForwardTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; let g:UltiSnipsJumpBackwardTrigger = \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34; The tab will break, I don\u0026rsquo;t know why, with above three lines, tab will act like: However, if those three line is out of management of lazy.nvim, the tab just work!\nlocal M = {} M.config = { { \u0026#39;SirVer/ultisnips\u0026#39;, }, { \u0026#39;hrsh7th/nvim-cmp\u0026#39;, dependencies = { \u0026#39;hrsh7th/cmp-buffer\u0026#39;, \u0026#39;FelipeLema/cmp-async-path\u0026#39;, \u0026#39;hrsh7th/cmp-nvim-lsp\u0026#39;, --\u0026#39;hrsh7th/cmp-cmdline\u0026#39;, \u0026#39;hrsh7th/cmp-calc\u0026#39;, \u0026#39;onsails/lspkind-nvim\u0026#39;, { \u0026#34;quangnguyen30192/cmp-nvim-ultisnips\u0026#34;, config = function() -- optional call to setup (see customization section) require(\u0026#34;cmp_nvim_ultisnips\u0026#34;).setup{} end, }, }, after = \u0026#34;SirVer/ultisnips\u0026#34;, config = function() local has_words_before = function() local line, col = unpack(vim.api.nvim_win_get_cursor(0)) return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match(\u0026#34;%s\u0026#34;) == nil end local cmp = require \u0026#39;cmp\u0026#39; --local lspkind = require(\u0026#39;lspkind\u0026#39;) cmp.setup { snippet = { expand = function(args) vim.fn[\u0026#34;UltiSnips#Anon\u0026#34;](args.body) end, }, sources = { {name = \u0026#39;buffer\u0026#39; , keyword_length = 0}, { name = \u0026#39;nvim_lsp\u0026#39; }, { name = \u0026#34;ultisnips\u0026#34; }, --{ name = \u0026#39;cmdline\u0026#39; }, { name = \u0026#39;async_path\u0026#39; }, { name = \u0026#39;calc\u0026#39; }, }, mapping = cmp.mapping.preset.insert({ [\u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert }) elseif has_words_before() then cmp.complete() else fallback() end end, }), [\u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;] = cmp.mapping({ i = function(fallback) if cmp.visible() then cmp.select_prev_item({ behavior = cmp.SelectBehavior.Insert }) else fallback() end end, }), } end }, } vim.g.UltiSnipsExpandTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpForwardTrigger = \u0026#34;\u0026lt;C-j\u0026gt;\u0026#34; vim.g.UltiSnipsJumpBackwardTrigger = \u0026#34;\u0026lt;C-k\u0026gt;\u0026#34; return M Everythin just work! benefits The plugins is more structured, so navigation and group plugins is easier than vim-plug, with some plugin like fzf.vim, I can easily jump to file I want, and separate plugin config into different files according to their purpose. Before using lazy.nvim all plugins config are store in the same file call plugins.vim, now modualize like:\n├── config │ └── lualine.lua ├── lazy-init.lua └── plugins ├── autocompletion.lua ├── cleverf.lua ├── colorscheme.lua ├── fern.lua ├── fzf.lua ├── lsp.lua ├── markdown.lua ├── multi_cursor.lua ├── nerdfont.lua ├── pairs.lua ├── sandwich.lua └── treesitter.lua Finall thoughts As most of plugin I used are written for both Vim and Neovim, most of them are still providing vimscript api to config, there are only some little surprise issue from prefect.\n","permalink":"https://sokinpui.github.io/Blog/post/vim-4/","summary":"Tips and issue I discovered during mergation. Hope to save someone\u0026rsquo;s time in the future.\nWhy lazy.nvim This is a long story, shall we start from another application obsidian. I use obsidian for notes taking. I want some faster, non-repeative and easier note editing tools, and therefor I use some editor as my obsidian editing engine, in my case, Neovim Setup autocompletion and snippets in Neovim is always easier than same setup on obsidian.","title":"Tips for merging from vim-plug to lazy.nvim"},{"content":"Some Vim plugins may save your time. You can use any plugins manager, even the built-in pack.\nFile explorer: fern Not too helpful, but I find it is more eye-candy than built-in explorer netrw. Also, fern is an asynchronous tree viewer, so it should be smoother than netrw in theory. fern allow you change the icon to whatever you like.\nlet g:fern#mark_symbol = \u0026#39;●\u0026#39; let g:fern#renderer#default#collapsed_symbol = \u0026#39;▷ \u0026#39; let g:fern#renderer#default#expanded_symbol = \u0026#39;▼ \u0026#39; let g:fern#renderer#default#leading = \u0026#39; \u0026#39; let g:fern#renderer#default#leaf_symbol = \u0026#39; \u0026#39; let g:fern#renderer#default#root_symbol = \u0026#39;~ \u0026#39; Will look like this: Fern have some plugins extend its functionality, like this fern plugin replace netrw when you open directory using vim. preview file in float window. This plugin allow you map key jump to the root of project (by default is ^). You can find more fern plugin here\nnmap \u0026lt;buffer\u0026gt;\u0026lt;expr\u0026gt; \\ \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) \\ fern#smart#leaf( \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-open:select)\u0026#34;, \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-expand)\u0026#34;, \\ \u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-collapse)\u0026#34;, \\ ) nmap \u0026lt;buffer\u0026gt; \u0026lt;Plug\u0026gt;(fern-new-and-edit) \\ \u0026lt;Plug\u0026gt;(fern-action-new-file) \\ \u0026lt;Plug\u0026gt;(fern-action-open:select) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;CR\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;TAB\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) nnoremap \u0026lt;buffer\u0026gt; h \u0026lt;Plug\u0026gt;(fern-action-collapse) nnoremap \u0026lt;buffer\u0026gt; l \u0026lt;Plug\u0026gt;(fern-action-expand) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;2-LeftMouse\u0026gt; \u0026lt;Plug\u0026gt;(fern-my-open-expand-collapse) nnoremap \u0026lt;buffer\u0026gt; o \u0026lt;Plug\u0026gt;(fern-new-and-edit) nnoremap \u0026lt;buffer\u0026gt; nd \u0026lt;Plug\u0026gt;(fern-action-new-dir) nnoremap \u0026lt;buffer\u0026gt; D \u0026lt;Plug\u0026gt;(fern-action-remove) nnoremap \u0026lt;buffer\u0026gt; rn \u0026lt;Plug\u0026gt;(fern-action-rename)l nnoremap \u0026lt;buffer\u0026gt; s \u0026lt;Plug\u0026gt;(fern-action-open:split) nnoremap \u0026lt;buffer\u0026gt; v \u0026lt;Plug\u0026gt;(fern-action-open:vsplit) nnoremap \u0026lt;buffer\u0026gt; r \u0026lt;Plug\u0026gt;(fern-action-reload) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; . \u0026lt;Plug\u0026gt;(fern-action-hidden:toggle) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; \u0026lt; \u0026lt;Plug\u0026gt;(fern-action-leave) nnoremap \u0026lt;buffer\u0026gt; \u0026lt;nowait\u0026gt; \u0026gt; \u0026lt;Plug\u0026gt;(fern-action-enter) \u0026#34;enter project root, find the toppest directory contain .git nnoremap \u0026lt;buffer\u0026gt; ^ \u0026lt;Plug\u0026gt;(fern-action-project-top) \u0026#34; preview file \u0026#34;nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; p \u0026lt;Plug\u0026gt;(fern-action-preview:toggle) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;C-p\u0026gt; \u0026lt;Plug\u0026gt;(fern-action-preview:auto:toggle) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;C-d\u0026gt; \u0026lt;Plug\u0026gt;(fern-action-preview:scroll:down:half) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;C-u\u0026gt; \u0026lt;Plug\u0026gt;(fern-action-preview:scroll:up:half) \u0026#34;smart [q]uit nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; \u0026lt;expr\u0026gt; \u0026lt;Plug\u0026gt;(fern-quit-or-close-preview) fern_preview#smart_preview(\u0026#34;\\\u0026lt;Plug\u0026gt;(fern-action-preview:close)\u0026#34;, \u0026#34;:q\\\u0026lt;CR\u0026gt;\u0026#34;) nnoremap \u0026lt;silent\u0026gt; \u0026lt;buffer\u0026gt; q \u0026lt;Plug\u0026gt;(fern-quit-or-close-preview) Horizontal motion: clever-f clever-f extend the Vim\u0026rsquo;s f, F, t and T function, you can press f to jump instead ;, similarly, use F to jump backward like ,. clever-f allow you jump multi lines by default, super convenient when dfn cross line.\nSince many symbol ({, (, \u0026ldquo;, and so on) keys are hard to press. clever-f by default map f; to match any symbol, super clever!. (I map to ) let g:clever_f_smart_case = 1 let g:clever_f_across_no_line = 0 let g:clever_f_chars_match_any_signs = \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; let g:clever_f_repeat_last_char_inputs = [ \u0026#34;\\\u0026lt;CR\u0026gt;\u0026#34; ] multi cursor: vim-visual-multi vim-visual-multi bring this common feature from others editor to Vim. Sometimes it is convenient and more intuitive than :s/pattern/changes/\u0026lt;opt\u0026gt; or visual block mode.\nUse a, A, i, O, to insert text like in Vim normal mode. Use x to delete selection. Use r to replace all text in selection like r in Vim visual mode. Press n/N to get next/previous occurrence. Press q to skip current and get next occurrence. Press Q to remove current cursor/selection.\nBy default, it start multi cursor by pressing \u0026lt;C-n\u0026gt;.(I map it to \u0026lt;leader\u0026gt;n) The most exciting of this plugins is, it has integrated with auto-completion like coc.nvim! fzf x vim: fzf.vim fzf.vim is the comand line tools fzf wrapper for vim. Fuzzy finder result will display in Vim float windows. Powerful tools to jumps and navigate project and files within Vim. From official website, fzf.vim can fuzzy find all of them:\nCommand List :Files [PATH] Files (runs $FZF_DEFAULT_COMMAND if defined) :GFiles [OPTS] Git files (git ls-files) :GFiles? Git files (git status) :Buffers Open buffers :Colors Color schemes :Ag [PATTERN] [ag][ag] search result (ALT-A to select all, ALT-D to deselect all) :Rg [PATTERN] [rg][rg] search result (ALT-A to select all, ALT-D to deselect all) :RG [PATTERN] [rg][rg] search result; relaunch ripgrep on every keystroke :Lines [QUERY] Lines in loaded buffers :BLines [QUERY] Lines in the current buffer :Tags [QUERY] Tags in the project (ctags -R) :BTags [QUERY] Tags in the current buffer :Marks Marks :Jumps Jumps :Windows Windows :Locate PATTERN locate command output :History v:oldfiles and open buffers :History: Command history :History/ Search history :Snippets Snippets ([UltiSnips][us]) :Commits [LOG_OPTS] Git commits (requires [fugitive.vim][f]) :BCommits [LOG_OPTS] Git commits for the current buffer; visual-select lines to track changes in the range :Commands Commands :Maps Normal mode mappings :Helptags Help tags 1 :Filetypes File types You can map any of above commands to your faviour key bindings.\nnnoremap \u0026lt;leader\u0026gt;ff :Files\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fb :Buffers\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fs :Lines\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fp :Rg\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f/ :History/\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f: :History:\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fh :Helptags\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fa :Files $HOME\u0026lt;cr\u0026gt; If you want to change the size of float window, you can change the value of height and width.\nlet g:fzf_preview_window = [\u0026#39;right,50%\u0026#39;, \u0026#39;ctrl-/\u0026#39;] let g:fzf_layout = {\u0026#39;window\u0026#39;: { \u0026#39;width\u0026#39;: 0.9, \u0026#39;height\u0026#39;: 1 }} let g:fzf_buffers_jump = 1 If you don\u0026rsquo;t like float window but want a side peek, just modifiy the code.\n\u0026#34; use tmux float window let g:fzf_layout = { \u0026#39;tmux\u0026#39;: \u0026#39;-p90%,100%\u0026#39; } \u0026#34; down, up, right, left let g:fzf_layout = { \u0026#39;down\u0026#39;: \u0026#39;~40%\u0026#39; } Find vim help manual with fzf.vim: ","permalink":"https://sokinpui.github.io/Blog/post/vim-3/","summary":"Some Vim plugins may save your time. You can use any plugins manager, even the built-in pack.\nFile explorer: fern Not too helpful, but I find it is more eye-candy than built-in explorer netrw. Also, fern is an asynchronous tree viewer, so it should be smoother than netrw in theory. fern allow you change the icon to whatever you like.\nlet g:fern#mark_symbol = \u0026#39;●\u0026#39; let g:fern#renderer#default#collapsed_symbol = \u0026#39;▷ \u0026#39; let g:fern#renderer#default#expanded_symbol = \u0026#39;▼ \u0026#39; let g:fern#renderer#default#leading = \u0026#39; \u0026#39; let g:fern#renderer#default#leaf_symbol = \u0026#39; \u0026#39; let g:fern#renderer#default#root_symbol = \u0026#39;~ \u0026#39; Will look like this: Fern have some plugins extend its functionality, like this fern plugin replace netrw when you open directory using vim.","title":"Vim Plugins introduction"},{"content":"Aims to less pain when using vim, if you find other plugins perform the same functionality, I would say use that plugin instead, because plugins usually provide broader function and easier for management compare to discrete vimscript.\nHighlight in search Want Highlight when searching? Dirty but workable solution can map search key into:\nnnoremap / :set hlsearch\u0026lt;cr\u0026gt;/ nnoremap ? :set hlsearch\u0026lt;cr\u0026gt;? nnoremap n :set hlsearch\u0026lt;cr\u0026gt;n nnoremap N :set hlsearch\u0026lt;cr\u0026gt;N nnoremap * :set hlsearch\u0026lt;cr\u0026gt;* nnoremap # :set hlsearch\u0026lt;cr\u0026gt;# vnoremap * *:set hlsearch\u0026lt;cr\u0026gt; vnoremap # #:set hlsearch\u0026lt;cr\u0026gt; Delete highlight after search:\nautocmd insertenter * set nohlsearch autocmd textchanged * set nohlsearch Clear highlight when enter insert mode, clear highlight when any text being edited.\nHide Cursorline in inactive window Do you find inactive window still have cursorline shown? Hack with following code:\naugroup CursorLine autocmd! autocmd VimEnter * setlocal cursorline autocmd WinEnter * setlocal cursorline autocmd BufWinEnter * setlocal cursorline autocmd WinLeave * setlocal nocursorline augroup END Open help page in split window augroup Init_buffer autocmd! autocmd BufEnter *.txt if \u0026amp;buftype == \u0026#39;help\u0026#39; \\ | if winnr(\u0026#39;$\u0026#39;) \u0026lt;= 2 | wincmd H \\ | endif | endif augroup END Since I seldom use vim split window in vim, if I really need to split window, I will first use tmux split window. When I need Vim manual, I also want to know what is happening on my current buffer.\nCursor back to last position au BufReadPost * if line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026gt; 1 \u0026amp;\u0026amp; line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026lt;= line(\u0026#34;$\u0026#34;) \\ | exe \u0026#34;normal! g\u0026#39;\\\u0026#34;\u0026#34; | endif find digital nnoremap \u0026lt;Leader\u0026gt;n /\\d\\+\u0026lt;cr\u0026gt; A simple Vim regular expression hacking.\nPaste in visual mode without pollute register Since paste in visual mode will first delete content, if you don\u0026rsquo;t want to pollute your register and keep p the same content, following code may help you.\nxnoremap \u0026lt;leader\u0026gt;p \u0026#34;_dP Number of search items in status line give more information when searching, you can know numbers of item you search, and the location. This simple hacking is provided by Vim manual, see :help searchcount.\nfunction! s:update_searchcount(timer) abort if a:timer ==# s:searchcount_timer call searchcount(#{ \\ recompute: 1, maxcount: 0, timeout: 100}) redrawstatus endif endfunction function! statusline#LastSearchCount() abort let result = searchcount(#{recompute: 1}) if empty(result) return \u0026#39;\u0026#39; endif if result.incomplete ==# 1 \u0026#34; timed out return printf(\u0026#39; [%s] [?/??]\u0026#39;, @/) elseif result.incomplete ==# 2 \u0026#34; max count exceeded if result.total \u0026gt; result.maxcount \u0026amp;\u0026amp; \\ result.current \u0026gt; result.maxcount return printf(\u0026#39; [%s] [\u0026gt;%d/\u0026gt;%d]\u0026#39;, @/, \\ result.current, result.total) elseif result.total \u0026gt; result.maxcount return printf(\u0026#39; [%s] [%d/\u0026gt;%d]\u0026#39;, @/, \\ result.current, result.total) endif endif return printf(\u0026#39; [%s] [%d/%d]\u0026#39;, @/, \\ result.current, result.total) endfunction let \u0026amp;statusline ..= \u0026#39;%=%-5.{statusline#LastSearchCount()} \\ %(%l,%c-%v%) %p%%\u0026#39; autocmd CursorMoved,CursorMovedI * \\ let s:searchcount_timer = timer_start( \\ 200, function(\u0026#39;s:update_searchcount\u0026#39;)) ","permalink":"https://sokinpui.github.io/Blog/post/vim-2/","summary":"Aims to less pain when using vim, if you find other plugins perform the same functionality, I would say use that plugin instead, because plugins usually provide broader function and easier for management compare to discrete vimscript.\nHighlight in search Want Highlight when searching? Dirty but workable solution can map search key into:\nnnoremap / :set hlsearch\u0026lt;cr\u0026gt;/ nnoremap ? :set hlsearch\u0026lt;cr\u0026gt;? nnoremap n :set hlsearch\u0026lt;cr\u0026gt;n nnoremap N :set hlsearch\u0026lt;cr\u0026gt;N nnoremap * :set hlsearch\u0026lt;cr\u0026gt;* nnoremap # :set hlsearch\u0026lt;cr\u0026gt;# vnoremap * *:set hlsearch\u0026lt;cr\u0026gt; vnoremap # #:set hlsearch\u0026lt;cr\u0026gt; Delete highlight after search:","title":"Simple hacking and tips to reduce pain in Vim"},{"content":"Some setting you may google for it after you have started using vim. Add those line to you .vimrc\nIf you use Neovim, it by default has some better setting than vim, save you some time from google.\nDiabled by default 1. search, and match set ignorecase, ignorecase during matching\nset smartcase, smart match, match Talk and talk when you search talk, but only match Talk, when you search Talk.\n2. scrolling set scrolloff=5, leave 5 lines between top and bottom when scrolling.\nset mousescroll=ver:5,hor:5, scrolling 5 lines when using mouse.\n3. Formating: line wrapping and indention. 3.1 Indention \u0026#34; 1 tab = 8 space to avoid confuse your computer set tabstop=8 \u0026#34; convert tab into space when you insert tab set expandtab \u0026#34; you can insert \u0026#39;tab\u0026#39; which is 4 space long, like the python formating set shiftwidth=4 \u0026#34; set to -1 to use the value set above in shiftwidth set softtabstop=-1 set autoindent set smartindent set expandtab is recommend as space is more accruate than tab, as one may set tabstop=2, if your system don\u0026rsquo;t convert it to space, other user on their system may see a two space lenght tab. Which maybe confusion.\n3.2 Line wrapping There is hard wrapping and soft wrapping, former one will insert real newline \u0026ldquo;\\n\u0026rdquo; when line width is longer than boundary, latter one will not insret newline, only visually like separate line, actually a very long line.\n3.2.1 hard wrapping set textwidth=80 set formatoptions+=aw According to vim help page, formatoptions a:\nAutomatic formatting of paragraphs. Every time text is inserted or\tdeleted the paragraph will be reformatted\nThis feature make your vim look like normal markdown editor but hard wrapping\nAccording to vim help page, formatoptions w:\nTrailing white space indicates a paragraph continues in the next line.\tA line that ends in a non-white character ends a paragraph\nWithout set formatoptions+=aw: Without set formatoptions+=aw: Usually \u0026ldquo;aw\u0026rdquo; combination is better than single one.\n3.2.2 Soft wrapping set textwidth=0 set wrap set linebreak set wrap allow you to wrapping long line with the window edge. textwidth=0, so that long line will not be broken. set linebreak allow line wrap by words instead of characters.\nWithout set linebreak: With set linebreak: In soft wrapping, you can still make it wrapping at certain number of characters instead of window edge, you can append\nset columns=80 But it is rather ugly than helpful, you can resize window to get the same effect.\n4. Vim $RUNTIMEPATH filetype plugin on filetype plugin indent on Allow you to put script under $RUNTIMEPATH/ftplugin/ and $RUNTIMEPATH/ftplugin/indent\n4.1 undo file set undofile set unfo set directory=~/.local/state/nvim/undo// // means the file will stored in full path, so that files having the same name will not confict. With above setting, you can \u0026ldquo;undo\u0026rdquo; with u and \u0026lt;C-r\u0026gt; even you reopen the file.\n5. Shell directory set autochir Chagne the directory accoring to the file you edit. When you run Shell command via :!, your location depend on the file you editing. After you exit vim, directory will return to the status where you enter vim.\nset path=$PWD/** This make your autocomplete in command line mode will complete all subdirectory. Especially useful when adding file in subdirectory as buffer.\n6. Editing set conceallevel=2 Can conceal syntax when possible, quite helpful when editing markdown file, link or latex syntax will be concealled. Make your raw markdown file less messy. ","permalink":"https://sokinpui.github.io/Blog/post/vim-1/","summary":"Some setting you may google for it after you have started using vim. Add those line to you .vimrc\nIf you use Neovim, it by default has some better setting than vim, save you some time from google.\nDiabled by default 1. search, and match set ignorecase, ignorecase during matching\nset smartcase, smart match, match Talk and talk when you search talk, but only match Talk, when you search Talk.","title":"Vim less pain, setting you will google"},{"content":"Toy Editor Editor, is for editing text, to get the job done, editing code, notes, configuration file. Some editor have the ultimatly extenability or customizability, like neovim, Emacs or vscode. Often we prepare too much to make our editor prefect, making our editor more than just an editor, convert it into something like git client, terminal, even a social recognition. The idea of hackable editor is great, many of us can get benefits from the scriptability to automation or add handy features. However, extenability come with cost. Emacs, the most extenable editor which come with the powerful extention language, Lisp, with Lisp everything related to text is possible to be implemented. You can, however, the biggest pain is you need to know how to, which involve time and practice to know the api and the language itself.\nDon\u0026rsquo;t be the one who use their editor only for editing their configuration file.\nToy note system Note system is another time sink, because building a note system is much more complex than build a prefect editor. Note system including editor, viewer, a clipper to collect some snippets, the bridge that integrate all your tools, or a all-in-one workspace. Since building note system is much more interesting than writing, review and organize notes, time is easy go to build a superficially clever system that input and output nothing.\nThe truth of configuration Yes, one can build their prefect system that will suit their workflow, if their workflow never change, it is not the truth, right? The best note system should always be the next. Your information system will evolve as you behaviour and workflow change.\nImplement the change only when you need it, don\u0026rsquo;t even try to make you system prefect, it won\u0026rsquo;t.\n","permalink":"https://sokinpui.github.io/Blog/post/11-toyeditor/","summary":"Toy Editor Editor, is for editing text, to get the job done, editing code, notes, configuration file. Some editor have the ultimatly extenability or customizability, like neovim, Emacs or vscode. Often we prepare too much to make our editor prefect, making our editor more than just an editor, convert it into something like git client, terminal, even a social recognition. The idea of hackable editor is great, many of us can get benefits from the scriptability to automation or add handy features.","title":"The productivity of 'workflow'"},{"content":"Do you use tmux? Do you think the default key bndings of tmux unacceptalbe? Here are some tips I have collected.\nTIPS 1: Skip prefix After change some key bndings like prefix from C-b to something like C-space, you may still find annoying to press prefix for some handy shortcut like switching windows. To skips the needs of prefix, you may add the option -n before the command To switch windows without prefix using M-n bind -n M-n select-window -t :+ 2: Keyboard Macros Macros are collection of keys sequence, you may find some key on your keyboard is less used like right alt, then you can convert this key as tmux specify modifier key, press this key will do a sequence of shortcut. To achieve this, you may need a key mappings application, on Linux I recommand kmonad; on Macos, I recommand Karabiner elements. If you use karabiner elements, use goku to configure Karabiner elements JSON file easier, life saver!\n3: open new window under current directory It is especially great working on small screen laptop, if you spawn new pane, then you are in the same directory, however, if you spawn a new window, you will by default at $HOME. You can use bind -n M-o new-window -c \u0026#34;#{pane_current_path}\u0026#34; to map Alt-o to open new window udner current directory.\n","permalink":"https://sokinpui.github.io/Blog/post/10/","summary":"Do you use tmux? Do you think the default key bndings of tmux unacceptalbe? Here are some tips I have collected.\nTIPS 1: Skip prefix After change some key bndings like prefix from C-b to something like C-space, you may still find annoying to press prefix for some handy shortcut like switching windows. To skips the needs of prefix, you may add the option -n before the command To switch windows without prefix using M-n bind -n M-n select-window -t :+ 2: Keyboard Macros Macros are collection of keys sequence, you may find some key on your keyboard is less used like right alt, then you can convert this key as tmux specify modifier key, press this key will do a sequence of shortcut.","title":"Tmux key bndings less suffer"},{"content":"Obsidian is a local note-taking apps, all the files are saved as .md or .pdf format. Vim or Neovim are great editors that allow you config all days without writing any real code\nObsidian has vim-mode, which support Vim modal editing out of the box. However, due to the font size is not unqiue in obsidian, Like the heading has bigger size, the code block is not at the beginning of the line. Sometimes got confused when using jk to move up and down, you move up may not be where you want to go. Vim modal editing editing works better with mono font, regardly, mono font has less readibility than non-mono font where obsidian used by default. What\u0026rsquo;s more, obsidian vim-mode is not clone of vim, still implement as a vim emulation. You may have obsidian vimrc support plugin, so to unlock the power of mapping in obsidian, but you still got a lot limitation. In terms of editing, a real Vim should be better than any vim-emulation, and in terms of notes-taking, any note-taking app should work better than Vim+shell, you don\u0026rsquo;t have notes structure visualization without some extra tweaks.\nEditing in Vim With Vim, you can have those convenience over obsidian:\nsnippets completion The best \u0026ldquo;Vim\u0026rdquo; mode The last one should have no doubt. The reason I use snippets and completion in note-taking because I am lazy. Retype the same works again and again are really boring and meangless. Obsidian does have some plugins related to snippets and completion, but setup snippets and completion is just easier and more consisent on Vim. In Vim you can have same UI interface and consisent keyblindings. The plugins I use for snippets and completion are coc.nvim + Ultisnips + coc.snippets, choosing coc.nvim simply because it have provided solution for snippets together with completion out of the box. Of course, there is so much alternatives avalible. The only missing is the backlink completion. But it is fine, insert backlink in obsidian let me have a look of filenames, so that I won\u0026rsquo;t forget the filename and suck typing.\nExample configuration for snippets and completion:\nPlug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} \u0026#34; coc.nvim inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; coc#pum#visible() \\ ? coc#pum#next(1) : \\ cocfunc#CheckBackspace() \\ ? \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; : coc#refresh() inoremap \u0026lt;expr\u0026gt;\u0026lt;S-TAB\u0026gt; coc#pum#visible() \\ ? coc#pum#prev(1) : \u0026#34;\\\u0026lt;S-TAB\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;CR\u0026gt; coc#pum#visible() \\ ? \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#pum#close()\\\u0026lt;CR\u0026gt;\u0026#34; \\ : \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#on_enter()\\\u0026lt;CR\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;space\u0026gt; coc#pum#visible() \\ ? \u0026#34;\u0026lt;esc\u0026gt;a\u0026lt;space\u0026gt;\u0026#34; : \u0026#34;\u0026lt;space\u0026gt;\u0026#34; \u0026#34; coc.snippets inoremap \u0026lt;C-j\u0026gt; \u0026lt;Plug\u0026gt;(coc-snippets-expand-jump) vnoremap \u0026lt;C-j\u0026gt; \u0026lt;Plug\u0026gt;(coc-snippets-select) let g:coc_snippet_next = \u0026#39;\u0026lt;C-j\u0026gt;\u0026#39; let g:coc_snippet_prev = \u0026#39;\u0026lt;C-k\u0026gt;\u0026#39; coc.snippets need to be installed separately, after install coc.nvim, run the command :CocInstall coc-snippets\nObsidian, the markdown viewer Insert image in markdown with plugins image resizer and imager inserter is supar convenient, no doubt better than vim.\nNavigation in wrapped line Since hard wrapped line will make paragraph look ugly in Obsidian, use soft wrapped line instead, which means one paragraph is actually a long long line. Some mapping will be handy to avoid keep using prefix g again in Vim.\nExample configuration, in ~/.vim/ftplugin/markdown.vim:\nsetlocal textwidth=0 wrap formatoptions=tc2n linebreak noremap \u0026lt;buffer\u0026gt; j gj noremap \u0026lt;buffer\u0026gt; k gk noremap \u0026lt;buffer\u0026gt; $ g$ noremap \u0026lt;buffer\u0026gt; ^ g^ noremap \u0026lt;buffer\u0026gt; 0 g0 nnoremap \u0026lt;buffer\u0026gt; dd g0vg$D nnoremap \u0026lt;buffer\u0026gt; D g0vg$D nnoremap \u0026lt;buffer\u0026gt; V g0vg$ nnoremap \u0026lt;buffer\u0026gt; I g^i function! IsBlank() normal! g$ var char = getline(\u0026#34;.\u0026#34;)[col(\u0026#34;.\u0026#34;) - 1] if char == \u0026#34;\\t\u0026#34; || char == \u0026#34; \u0026#34; normal! gel startinsert else startinsert! endif deffunction nnoremap \u0026lt;buffer\u0026gt; A :call IsBlank()\u0026lt;cr\u0026gt; The last one help you stop at the last non-blank character in wrapped line, the normal behavior of g$a will stop at the last character including space and tab, sometimes inconvenient.\nPsudo WYSIWYG WYSIWYG, what you see is what you get, is one of the highlight of markdown syntax, very simple. To get half experience in Vim, oen can be turn on concealment. set conceallevel=2 to convert highlight syntax into unicode character.\nJust let better tools takes the jobs. For text editing, take Vim; For notes managment, take Obsidian; For complex data representaion like chart, embedded image and website page, just take any other tools like Notion.\n","permalink":"https://sokinpui.github.io/Blog/post/9-prettyvim/","summary":"Obsidian is a local note-taking apps, all the files are saved as .md or .pdf format. Vim or Neovim are great editors that allow you config all days without writing any real code\nObsidian has vim-mode, which support Vim modal editing out of the box. However, due to the font size is not unqiue in obsidian, Like the heading has bigger size, the code block is not at the beginning of the line.","title":"Markdown writing, Obsidian + Vim, not vim-mode"},{"content":"Vacillate vim are really good, after remember some vim command keyblindings, you can start editing or writing immediately. The main benefits of using plugins can avoid use our poor vimscript. Use some great plugin avoid you to rebuild the wheel. Before you are able to write plugin yourself, trust me, any exist plugins is better than yours.\nPlugins recommendation 1. vim-plug vim-plug, a plugin manager that help you install, update and manage your plugins. Vim come with built-in package manger pack, a subdirectory under .vim/, if don\u0026rsquo;t exist, create it. I usually use build-in pack only for some personal little script, so that I don\u0026rsquo;t have to move forth and back in vim runtime path.\nVim plug syntax is easy, to add random plugins, add those line in your .vimrc:\ncall plug#begin() \u0026#34; list plugins herer Plug \u0026#39;junegunn/vim-easy-align\u0026#39; call plug#end() Any github repo can be installed, for example, you have write your plugin and push to github at https://github.com/username/plugin-name, you can add this plugin by adding those line in your .vimrc:\ncall plug#begin() \u0026#34; list plugins herer Plug \u0026#39;username/plugin-name\u0026#39; call plug#end() After that, save your file by :w, source your .vimrc or leave then reopen your .vimrc, run the command :PlugInstall. Plugins will be installed at ~/.vim/plugged by default.\nTo save my little pinky finger, I have those mapping for convenience:\nnnoremap \\i :w\u0026lt;cr\u0026gt;:source ~/.vim/vimrc\u0026lt;cr\u0026gt;:PlugInstall\u0026lt;cr\u0026gt; nnoremap \\c :w\u0026lt;cr\u0026gt;:source ~/.vim/vimrc\u0026lt;cr\u0026gt;:PlugClean\u0026lt;cr\u0026gt; nnoremap \\u :w\u0026lt;cr\u0026gt;:source ~/.vim/vimrc\u0026lt;cr\u0026gt;:PlugUpdate\u0026lt;cr\u0026gt; 2. vim-sandwich vim-sandwich help you to change the surround of text. What is surround? Surround means the pairs that surround text object, like \u0026quot; and (. It is handy to let program do for us, instead of change manually.\nvim-sandwich is an alternative of vim-surround, which provide texthighligh, auto-selection, and repeat with . out-of the box. It use less keys than vim-surround, just navigate to the current parenthesis object position and chagne the surround! No need to select the object before change. surround style of changing surround:\ncs \u0026lt;surround to be changed\u0026gt; \u0026lt;surround to replace\u0026gt; sandwich style of changing surround(auto replace):\nsrb \u0026lt;surround to be changed\u0026gt; \u0026lt;surround to replace\u0026gt; I though it is a more intutitive than to surround style of change, as symbol like {, [ and ( is more difficult to type than navigate to the right position with f, t, F and T.\nThe auto-selection of vim-sandwich is highlight of this plugin, I have use this feaatur for all surround editing including add, delete and replace surrounds. I have the following setting so that I can use \u0026lt;leader\u0026gt;+symbols to add surround for one words or selected region\nnmap \u0026lt;leader\u0026gt;( saiw(E nmap \u0026lt;leader\u0026gt;) saiw)E nmap \u0026lt;leader\u0026gt;[ saiw[E nmap \u0026lt;leader\u0026gt;] saiw]E nmap \u0026lt;leader\u0026gt;{ saiw{E nmap \u0026lt;leader\u0026gt;} saiw}E nmap \u0026lt;leader\u0026gt;\u0026#34; saiw\u0026#34;E nmap \u0026lt;leader\u0026gt;\u0026#39; saiw\u0026#39;E nmap \u0026lt;leader\u0026gt;\u0026lt; saiw\u0026lt;E nmap \u0026lt;leader\u0026gt;\u0026gt; saiw\u0026gt;E nmap \u0026lt;leader\u0026gt;` saiw`E nmap \u0026lt;leader\u0026gt;$ saiw$E nmap \u0026lt;leader\u0026gt;* saiw*.E nmap \u0026lt;leader\u0026gt;~ saiw~.E \u0026#34; visual vmap \u0026lt;leader\u0026gt;( sa( vmap \u0026lt;leader\u0026gt;) sa) vmap \u0026lt;leader\u0026gt;[ sa[ vmap \u0026lt;leader\u0026gt;] sa] vmap \u0026lt;leader\u0026gt;{ sa{ vmap \u0026lt;leader\u0026gt;} sa} vmap \u0026lt;leader\u0026gt;\u0026#34; sa\u0026#34; vmap \u0026lt;leader\u0026gt;\u0026#39; sa\u0026#39; vmap \u0026lt;leader\u0026gt;\u0026lt; sa\u0026lt; vmap \u0026lt;leader\u0026gt;\u0026gt; sa\u0026gt; vmap \u0026lt;leader\u0026gt;` sa` vmap \u0026lt;leader\u0026gt;$ sa$ vmap \u0026lt;leader\u0026gt;_ ca_ vmap \u0026lt;leader\u0026gt;* sa*. vmap \u0026lt;leader\u0026gt;~ sa~. However, it is a bad habits to make a keyboard macros, the better way would be calling the plugin\u0026rsquo;s function. Coz I am lazy and nothing happen till now, I keep those lines.\n3. clever-f clever-f is a plugin that improve the smoothness and consisent when navigation with f, t, F and T. You can use f to navigate to next f search, or use F to navigate backwards, instead of using ; and ,. What\u0026rsquo;s more, you can remap ; and , for other purpose. When you press f to navigate f search, you can cross the line, and you can have smart case searching!\nAfter using this plugin, I won\u0026rsquo;t claim it is more efficient than ; and ,, but it must be more comfortable.\nYou can change the behaviour of the plugins by adding those line to your .vimrc.\n\u0026#34; ignore case unless you specify Upper case let g:clever_f_smart_case = 1 \u0026#34; allow cross line, set to 1 if you don\u0026#39;t let g:clever_f_across_no_line = 0 like it \u0026#34; f; will searhc for all symbols let g:clever_f_chars_match_any_signs = \u0026#39;;\u0026#39; \u0026#34; f. will repeat you last search let g:clever_f_repeat_last_char_inputs = [ \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; ] 4. coc.nvim coc.nvim make completion in vim like vscode.\ncoc.nvim is a plugins framework, so you may find coc-XXX plugin written in Javascript or Typescript. Some of them is unique, some of them is alternative to the existing vim plugins to compatilbe with coc.nvim. One is coc.snippets, which aims to replace Ultisnips when you use coc.nvim. coc.nvim use is written Javascript and Typescript, you will configure the popup window in JSON file.\nBy default, coc.nvim don\u0026rsquo;t come with any keyblindings, you have to configure yourself.\nFor example, you can:\n\u0026#34; coc.nvim inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; coc#pum#visible() ? coc#pum#next(1) : \\ cocfunc#CheckBackspace() ? \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; : coc#refresh() inoremap \u0026lt;expr\u0026gt;\u0026lt;S-TAB\u0026gt; coc#pum#visible() ? coc#pum#prev(1) : \u0026#34;\\\u0026lt;S-TAB\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;CR\u0026gt; coc#pum#visible() ? \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#pum#close()\\\u0026lt;CR\u0026gt;\u0026#34; \\: \u0026#34;\\\u0026lt;C-g\u0026gt;u\\\u0026lt;CR\u0026gt;\\\u0026lt;c-r\u0026gt;=coc#on_enter()\\\u0026lt;CR\u0026gt;\u0026#34; inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;space\u0026gt; coc#pum#visible() ? \u0026#34;\u0026lt;esc\u0026gt;a\u0026lt;space\u0026gt;\u0026#34; \\: \u0026#34;\u0026lt;space\u0026gt;\u0026#34; \u0026#34; coc.snippets inoremap \u0026lt;C-j\u0026gt; \u0026lt;Plug\u0026gt;(coc-snippets-expand-jump) vnoremap \u0026lt;C-j\u0026gt; \u0026lt;Plug\u0026gt;(coc-snippets-select) let g:coc_snippet_next = \u0026#39;\u0026lt;C-j\u0026gt;\u0026#39; let g:coc_snippet_prev = \u0026#39;\u0026lt;C-k\u0026gt;\u0026#39; The above example don\u0026rsquo;t require selection, you use \u0026lt;TAB\u0026gt; and \u0026lt;S-TAB\u0026gt; to navigate to the suggestion you want, after that, you can press \u0026lt;space\u0026gt; and \u0026lt;cr\u0026gt; to move and start a new line respectively.\n5. fzf.vim fzf.vim $\\times$ vim, a command line tools fzf vim warpper. You can unlock the power of fuzzy finder in vim nearly anything.\nThe syntax of fzf.vim is simple: :Files [PATH] search file in current directory by default :Buffers search opened buffers :Ag [PATTERN] use ag to search pattern :Rg [PATTERN] use rg to search pattern :Lines [QUERY] search lines in loaded buffers :Marks search marks and jump to :History serach for opened files :History: search fo Command history :History/ Search for searching history wiht / :Commands search for avalible Commands :Maps serahc for Normal mode mappings :Helptags fzf for :help XXX, open help buffer you can make your own shortcut like\nlet g:fzf_preview_window = [\u0026#39;right,50%\u0026#39;, \u0026#39;ctrl-/\u0026#39;] let g:fzf_layout = {\u0026#39;window\u0026#39;: { \u0026#39;width\u0026#39;: 0.9, \u0026#39;height\u0026#39;: 0.9 }} let g:fzf_buffers_jump = 1 nnoremap \u0026lt;leader\u0026gt;ff :Files\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fb :Buffers\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fs :Lines\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fp :Rg\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f/ :History/\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;f: :History:\u0026lt;cr\u0026gt; nnoremap \u0026lt;leader\u0026gt;fh :Helptags\u0026lt;cr\u0026gt; The first line config the location of preview windows, you can have right, left, up, and down. The second line control the size of the popup windows\n","permalink":"https://sokinpui.github.io/Blog/post/8-vimpluginrecommend/","summary":"Vacillate vim are really good, after remember some vim command keyblindings, you can start editing or writing immediately. The main benefits of using plugins can avoid use our poor vimscript. Use some great plugin avoid you to rebuild the wheel. Before you are able to write plugin yourself, trust me, any exist plugins is better than yours.\nPlugins recommendation 1. vim-plug vim-plug, a plugin manager that help you install, update and manage your plugins.","title":"Vim plugin recommendation"},{"content":"(Edited date: 2023-06-23T11:24:42+08:00)\nEmacs Evil mode, a Vi layer on top of Emacs, in my understanding, Evil is a collection of keys remapping that blinds Emacs function to vi style keys. I love elisp, its powerful expression, the robust ecosystem built on top of elisp, tones of API that help writing my own plugins. I thought it is the most apporach Vim emluation I have tried, if Emacs is start as emacs -nw, it will successly pretend Vim TUI!\nVscode-Neovim, it uses a fully embedded Neovim instance, so Vscode-Neovim can read the init.vim and init.lua. Which is really cool, don\u0026rsquo;t have to google the API before configuraion.\nHowever, I feel the gap when using them. They are great emluation of Vim modal editing, however, other than editing, some important values are still not able to copy, like the integration with shell, and relay on third parity plugin on their ecosystem. Moreoever, I don\u0026rsquo;t feel over advantage to use an emluation than native Vim.\nEmluation can\u0026rsquo;t Q to enter ex mode in Evil. q:, q?, q/in Vscode-Neovim(extremely useful!) sh in both.(sometimes I want to copy the previous command output) term in Vscode-Neovim to popup an termianl :help in Evil.\n(edited at Mon Jun 26 12:49:55 PM CST 2023)\nGravity Merge to new editor is harder than I thought, I have tried Vscode and Emacs, while they are great editor, but just required sometimes to copy the workflow from my old editor to new editor. Even copied all the keyblindings, some minor but unacceptable difference keep consumming my time to google a solution. For example, the Tab completion style difference between Vscode, Emacs and Vim, I like the popup window of Vim, the tab YouCompleteMe style tab cycling, to get the same setup on Emacs and Vscode are terrible.\nAlso, the greatest gravity fallback to the original editor is no productivity gain from switching. If finally I endup with the same writing and editing experience on other editors, I still reach the same level of speed and productivity, then so what? The core of those editor hasn\u0026rsquo;t changed, editing text, maybe Emacs can extand more than editing text.\nAfter giving a try to those editors, I finally satisify with my current editor. Just be reason when switching tools that have the same functionality in terms of your workflows, especially there is no issue with the current one.\n","permalink":"https://sokinpui.github.io/Blog/post/7-tryevil/","summary":"(Edited date: 2023-06-23T11:24:42+08:00)\nEmacs Evil mode, a Vi layer on top of Emacs, in my understanding, Evil is a collection of keys remapping that blinds Emacs function to vi style keys. I love elisp, its powerful expression, the robust ecosystem built on top of elisp, tones of API that help writing my own plugins. I thought it is the most apporach Vim emluation I have tried, if Emacs is start as emacs -nw, it will successly pretend Vim TUI!","title":"Vim emluation on Emacs and Vscode"},{"content":"From Mac to Thinkpad 2020 Macbook Air with M1 chips, my first computer used in univserity. There is three reasons I brought it, light weight, no fans and long battery life. But surprisingly, I discover that they are no gaming changer when I get into univserity.\nThere is charger everywhere in univserity library, I don\u0026rsquo;t often move my computer, and I don\u0026rsquo;t have heavier work on my computer.\nSwitching is not correct in my situation, I don\u0026rsquo;t sold my Macbook, instead I brough a second hand Thinkpad x1 carbon 6th 2019. Nevertheless, I haven\u0026rsquo;t used my Macbook three month ago.\nThe reason I starting using thinkpad is so silly. After using Macbook for 9 months at univserity, I start to play with my keyboard, try different keyboard layout, also designed my own keyboard layout, I use Karabiner-Elements and Goku to config Karabiner Elements JSON file. Still there are some limitations on mac when remapping keys. Then, I discovered kmonad, which seems to be more powerful, more free, and more structured syntax when compare to terrible JSON indention. Sadly, I found kmonad do not work on my Macbook, and it seems to work better on Linux(I still don\u0026rsquo;t know the answer until now)?\nAfter the x1 carbon reached, I install Linux distribution and then kmonad immediately, Kmonad work perfect on linux! The silly fact is I have stopped tweaking my keyboard layout, I drop all the complex layer after using kmoand for a whole.\nSwitching gap No gap exist when switching, because I sedomly use Mac specified application, most of my favourite applications are cross platform, or have web version. Some application like mail and pdf editor are quite different on Linux and Macos, nevertheless, there is full documeted guide availible on univserity website. They are not an issue. Moreoever, most of the time I found myself living in browser, there will not be any significant difference in sense of user experience between Linux and Macos, instead of switching From Chrome to firefox. Google Chrome look like second class on linux, while Firefox have gesture supporting and smooth scrolling out of the box, Google Chrome haven\u0026rsquo;t come with gesture on my Linux distribution. But still, they are all fine.\nHabbits Change after on Thinkpad Switching has helped me discovering and changein my daily computer using habbits and my philosophy of desktop environment.\nFrom messay virtual desktop to organized workspace I had one bad habbit on Macos, I give every application a single virtual desktop, making switching application difficult. Suffering from sliding between virtual desktop or type the names of applications on spotlight search. Because of the implmentaton difference on GNOME and Macos, the workspace(equivalent to Macos virtual desktop) icon is so small, forcing me not to give one workspace per application. Since often I can\u0026rsquo;t memorize where are the applications, and it is difficult to look for the application on the tiny workspace icon. Nevertheless, I finally found the right usage of workspace, group related windows in the same workspace. I cannot count how much energy have been waste on finding the right location of the wanted applications.\nFrom tilling windows fans to floating windows fans Before doing meaningful stuff on computer, we first make ourself look cool, where 99% of time tweaking the desktop environment, remaining 1% doing real stuff.Tilling windows look cool, like hacker sitting in front of multiple screens. I use yabai on mac, before I try linux I have seen a lot of tilling windows manager screenshots sharing. They are really cool. But, most of the tilling windows manager are keyboard oriented, while the keyboard size of laptop are usually small, which mean I have to press keys with modifiers together, at the beginning, I am fine, but after a while, my little pinky finger suffer. I have rarely at the situation that have to switch between windows, of course no need for dynamic management of windows. I find floating windows is a more intuitive way to manage windows, and pinky-friendly.\nFrom 40% keyboard fans to 87% to 100% to 200%? 40% keyboard look cool, it hold you hand in four main rows, so it is more efficient. Um\u0026hellip;, that how I used to be thought about 40% keyboard, while saving thousand of miles finger move, I have to press every special symbols and numbers by modifiers, hold many key together, untypable if I move to new keyboard or new laptop. Currently I don\u0026rsquo;t get the philosophy of low profile keyboard, instead I prefer double keyboard now. Literaly high profile keyboard, 180% keyboard. Those extra keys are used as marcos. I saved those handy shortcut combination into single keys, like I have map \u0026ldquo;7\u0026rdquo; on numpad as \u0026ldquo;C-c C-t C-v enter\u0026rdquo;, \u0026ldquo;4\u0026rdquo; on numpad as my univserity mail address. I am so naive that I have implmented a 40% keyboard on Macbook keyboard, leaving the number rows unused HAHA. (Wombat 200% keyboard)\n","permalink":"https://sokinpui.github.io/Blog/post/6-frommactothinkpad/","summary":"From Mac to Thinkpad 2020 Macbook Air with M1 chips, my first computer used in univserity. There is three reasons I brought it, light weight, no fans and long battery life. But surprisingly, I discover that they are no gaming changer when I get into univserity.\nThere is charger everywhere in univserity library, I don\u0026rsquo;t often move my computer, and I don\u0026rsquo;t have heavier work on my computer.\nSwitching is not correct in my situation, I don\u0026rsquo;t sold my Macbook, instead I brough a second hand Thinkpad x1 carbon 6th 2019.","title":"From Macbook to Thinkpad"},{"content":"There are too much time spend on configure my tools, replace a more efficiently tool with the less efficient one. It takes me so long to understand those apps doesn\u0026rsquo;t matter if just want to take a notes\nTime spending on notes taking app Effie When I have to take notes, I fisrt using Effie, but then I find it don\u0026rsquo;t have good image insert support, give up. Their idea is great, notes or writing apps should be clean enough and later I find every notes app say they are clean.\nNotion The next app is notion, it is great, the markdown blocks and integration of app make notion eye-cream, but then regarding the loading time take decade long, no offline support, and most of my time are dragging blocks make my workspace more pretty. \u0026ldquo;Um\u0026hellip; A good notes should look like this.\u0026rdquo;, regarding my terrible sense of beauty, the \u0026ldquo;design\u0026rdquo; never fit my imagination of prefect notes. Notion maybe too capable for a note taking app, the database function make them customizable, I want writing notes, but not build website. Nevertheelss, Notion now becoming my todo list, and event recorder, how great it support syncing across all devices, and can be access with browser.\nOneNote, CollaNote, Goodnotes, Remarkable All of them used to be kept my handwriting notes, among them, OneNotes is canva, CollaNote is vertical scrolling canva, Goodnotes is a good handwriting notes app but neet to pay. Remarkable is an accidient, I never understand why I think it can take a notes with high writing delay and slow responding time. All of them have been used on 2018 Ipad with 20.7 grams Apple Pencil (1st Generation). This gen pencil is too heavy, compare to Samsung 8 grams S Pen, it is like holding a sticker stamp on glass. I remember I have spend so much time finding free alternative on Ipad since good software and hardware are expensive, and finally stay with second hand Samsung tab S7.\nObsidian Before trying Obsidian, I have finally realize that note is simple as markdown, no need of those notion blocks or Effie cards. basiclly supporting tree directories selection and image insertion is a must. Obsidian do quite well, and finally I realize how much time is wasted on making my own notion note space. No database and todo list is needed, and therefore Obsidian is enough to write and manager notes.\nWhen tinkering a customizalbe tools, I always try to make the tools part of mine, try to complish all the tasks with the lovest tools. When there exist a better tools, still I have to use my lovely tools try to accomplish the task, if not, then google way to implement it. Most of the time tinkering the tools, losting the initial goal, turn into making my tools super powerful and multi-funcional. Therefore, never love your tools, getting the job done in efficient way is much more elegant than done the jobs with the specify tools, if the initial goal is getting the task done.\nEditor Editor is another time sink source. Vim is the first editor I know it is a editor, I have use vscode before but I don\u0026rsquo;t know it is a editor, back to the day using vscode, I am scaring of those UI, I don\u0026rsquo;t know what will happen if I turn on/off some of thems. Vim is clean, simple and elegant. However, it is like a mindset trap, the more I know Vim, the stronger will to do all in vim way. Vim bring me to shell, shell bring me to plain text operation. A mindset form, command line and plain text are efficient, GUI and mouse are evil. At that time, I have read many article of how to navigate laptop with only keyboard and vim like motion. Most of the time spend on google \u0026ldquo;how to do XXX in vim\u0026rdquo; and \u0026ldquo;how to do XXX in cli\u0026rdquo;. Still worse, I have imaged many situation that never happen, prepare a function or shortcut to overcome the problem never happen in future.\nAny customizalbe editor can be time sink to configure, they becoming toies insteat of tools, I am adding too much unnecessary function before applied in real context. All those function and shortcut should only solved and implment in fly or they are repetitive to give a handy marco. When some special case rise, I am aware if it can be handle in \u0026ldquo;simpler\u0026rdquo; way, the real is they seldom occur in the future. However, time is wasted already.\nProblems of upgrading productivity through changing tools. Replacing the current tools with a more productivity one is often handy and attactive, imaging better functionalility of newer tools and get the job more efficient and elegant. However most of the time is spent on move data and rebuild working flow. When I merge my notes from Effie to notion, it take me one day to do so, it is repeative and boring to copy all the structure of the notes.\nMy current strategy are of merging notes are don\u0026rsquo;t touch the notes unless necessary, most of my old notes are still keeping on notion instead merging them into obsidian, although it may feel statisfy too see a deep direcotry of notes on Obsidian side bar. It just too time consumming, no real benefit to merge all the notes into single place, whatever the notes still appear in both apps, it is really not difference to merge from one to one and separate them.\nChanging tools I always want to try new tools, like emacs, vscode, Obsidian open source alternative, Mac built-in preview.app \u0026ldquo;better alternative\u0026rdquo;. Try them like playing new toy, fun but no real gain. I try them under the name of learning, and end up with tinkering configure.\n","permalink":"https://sokinpui.github.io/Blog/post/4-choose-of-tools/","summary":"There are too much time spend on configure my tools, replace a more efficiently tool with the less efficient one. It takes me so long to understand those apps doesn\u0026rsquo;t matter if just want to take a notes\nTime spending on notes taking app Effie When I have to take notes, I fisrt using Effie, but then I find it don\u0026rsquo;t have good image insert support, give up. Their idea is great, notes or writing apps should be clean enough and later I find every notes app say they are clean.","title":"Waste too much time to upgrade productivity"},{"content":"Abstraction Provide a way to dynamic swap numbers and symbols in vim according to current mode.\nHow this idea come When I write code or writing, I often find the symbols should be easily type as single key stroke, while in vim normal mode I find I would like to press number in single mode instead of pressing with shift. At first, I searched online for solution, many of them suggested to swap numbers and symbols, and I agree it may convient while coding. However, I am not coding all day, even during coding, in vim normal mode something it is handy to use number for [count] and command together. So swapping force you to choose one of them for more convenience typing. Another solution is to use number pad layer, I would say it is same as swapping, since I have to press with another key to use numbers, the problem havn\u0026rsquo;t been solved.\nOne day, When I was editing code, the idea of toggling nubmer-symbol row come in my mind, then I implement it, and find it solve the problem quite well regarding not prefect.\nNumber-symbols toggle Well, it is actually a dead key leader, when I press the toggle key which is equal sign of my keyboard. The nubmer row will swap to symbol row, press again, back to number.\nDynamic Number-symbols row in vim Since vim is modual, when insert mode, I prefer using symbols over numbers, when normal mode, I prefer the opposite. Then I add some rules for the toggle keys.\nBack to normal mode, which is equivalent to press the esc key, so when press esc key, define nst to False. It means toggle number rows.\n[:escape :left_control nil {:alone [ [\u0026#34;nst\u0026#34; 0] [\u0026#34;n-layer\u0026#34; 0] :escape ]} ] The above snippets is goku code, a config layer on top of Download Karabiner Elements, which is a tools for Mac to remap keyboard layouts.\nEnter insert mode, is equivalent to a, i, s, A, I, S, o, O, c, C. Then turn nst to True when type those key.\n[:i [:i [\u0026#34;nst\u0026#34; 1]]] [:a [:a [\u0026#34;nst\u0026#34; 1]]] [:s [:s [\u0026#34;nst\u0026#34; 1]]] [:c [:c [\u0026#34;nst\u0026#34; 1]]] [:o [:o [\u0026#34;nst\u0026#34; 1]]] The above code define nst to True when type i ( not I ).\nFurthur more, there is a few more situation I would prefer symbols over number, they are searching and command mode. Then I add those lines also.\n[:semicolon [:semicolon [\u0026#34;nst\u0026#34; 1]]] [:slash [:slash [\u0026#34;nst\u0026#34; 1]] ] Inprefect Since the layer is define outside vim, it can not avoid symbols row toggle during normal mode, when I type yip in normal mode, the symbol row toggle. Although I can have some line like inoremap 1 ! and cnoremap 2 @, I don\u0026rsquo;t want to pollute my mapping to much, I give up to implement this in pure vim way. I am interesting to find how to let karabiner know that I am in vim normal mode, so that avoid toggle symbol row accidently.\nI have remap equal sign to the caps lock, so it is possible for me to have one dead key, if you want to implement also, you may find your own.\n","permalink":"https://sokinpui.github.io/Blog/post/kmonad/3-dyn-num-sym/","summary":"Abstraction Provide a way to dynamic swap numbers and symbols in vim according to current mode.\nHow this idea come When I write code or writing, I often find the symbols should be easily type as single key stroke, while in vim normal mode I find I would like to press number in single mode instead of pressing with shift. At first, I searched online for solution, many of them suggested to swap numbers and symbols, and I agree it may convient while coding.","title":"Dynamic number-symbol row in vim"},{"content":"If you don\u0026rsquo;t know the basic syntax of Goku, please see the offical tutorial.\nWhat is Karabiner Elements? Karabiner Elements is a keyboard modifier on MacOS, which support key blindings remap and define layer, or in another form, complex modification. Download Karabiner Elements.\nWhat is Goku? Goku is a config file that ease the configuration in Karabiner Elements. In Karabiner Elements, if you want to implement complex modification, you will need to edit the json file, which is wired, it is very likely loss for beginners who don\u0026rsquo;t know the sturcture of modification of Karabiner Elements. Also, time is limited, why don\u0026rsquo;t use an easier tools that already on top of Karabiner Elements to make life easier? Goku on github\nDefine your customized layer 1. Why define layer The functionality of keyboard can be exteneded, one way is to define your own layers. With layers, you can shorten the key blindings in some \u0026ldquo;shortcut\u0026rdquo; usually require pressing three to four keys together. Or build an symbols layer if you stuck in the current number + shift way.\n2. Different types of layers Traditional layers Traditional layers like the layers of QMK mod-tap feature, a key\u0026rsquo;s function is divide into two, when you held down, it is modifier, and you loss its tap\u0026rsquo;s function, and vice verse.\nSimlayers In Goku, simlayer(simultianeous-layer) differ from traditional layers which you would not loss key\u0026rsquo;s original fucniton. For example, if you define f as your simlayer, if you held down f, stream of f will be inserted. Conversely, if you define f as tranditional layers, no f is insertd even you held it down.\nIn the tutorial of goku, author states the problems of traditional layers. But to me, they are the benefits, since simalayer have delayed display and require really fast right key followed. So, in this page, I would suggest you to use traditional layers.\nImplement layers with Goku 1. define variables. Variable help karabiner element know the state of your keyboard to act in performs different events in each states.\n[\u0026#34;name of variable\u0026#34; 0/1] It is a sturcture of variable, doble quoted name, 0 or 1 state.\n[:fookey [\u0026#34;foovar-set\u0026#34; 0/1] [\u0026#34;foovar-cd\u0026#34; 0/1]] It is conditional event, the last one is the condition, the middle one is to event, which set foovar-set to 0 or 1 if the condition is met.\n[:fookey [[\u0026#34;foovar1\u0026#34; 0/1] [\u0026#34;foovar2\u0026#34; 0/1]] [\u0026#34;foovar\u0026#34; 0/1]] It is same strcture of above but with extended to event, which set two variable in sequence, the condition part can also be extened in vector [[\u0026quot;foo1\u0026quot; 1] [\u0026quot;foo2\u0026quot; 1]], vector can expand as much as you want.\n2. mod-tap Layers This type of layer active if you held down fookey. inactive if you release.\n[:w [\u0026#34;tap_fookey\u0026#34; 1] nil { :alone [:w] :afterup [\u0026#34;tap_fookey\u0026#34; 0] :tap_fookey [:period :1 ] The first [\u0026quot;tap_fookey\u0026quot; 1] is the key event if you held down, alone is the key event if you tap single. :afterup is after key up event. The last line :tap_fookey tells karabiner to perform the following events if \u0026quot;tap_fookey\u0026quot; is met, In this example, it is w+. -\u0026gt; 1 it is like the conditions.\n3. dead keys This type of layer active if you press fookeys, inactive if you press the fooleavekey.\n[:fookey [\u0026#34;dead_foo\u0026#34; 1]] [:fooleavekey [\u0026#34;dead_foo\u0026#34; 0]] :dead_foo [:foo_from [:foo_to [\u0026#34;dead_foo\u0026#34; 0]]] [:foo_from :foo_to ] Dead key is actually a simple layer checked with variales state, the first event in dead_foo will leave layer after press the foo_from, while the second won\u0026rsquo;t. If you wish to leave the layer with the same keys you can:\n[:comma [\u0026#34;taped\u0026#34; 0] [\u0026#34;taped\u0026#34; 1 ] ] [:comma [\u0026#34;taped\u0026#34; 1] [\u0026#34;taped\u0026#34; 0 ] ] :taped [:period :1 ] double tap layer ;; check double tap [:right_shift [\u0026#34;two\u0026#34; 1] [\u0026#34;one\u0026#34; 1]] ;; chekc single tap [:right_shift :right_shift nil {:alone [:right_shift [\u0026#34;one\u0026#34; 1]] :delayed {:invoked [\u0026#34;one\u0026#34; 0] :canceled [\u0026#34;one\u0026#34; 0]} :params {:delay 1000}}] :two [:period :1 ] This layer keep the function of right shift, but I don\u0026rsquo;t know why it fail to use right shift to escape. The single tap check is a little bit complicate, nil is introduced in mod-tap layer which extended the to event, new :delayed control the behaviour after the key tapped, :invoked and :canceled work as their name. :params {:delay 1000} denote the time for the accepted delay time, invoked event trigger before that time, canceled event trigger after that time. The double tap check should be put before single tap check. To escape the layer use the same key use the follow snippet instead:\n;; check double tap [:right_shift [\u0026#34;two\u0026#34; 1] [\u0026#34;one\u0026#34; 1]] ;; chekc single tap [:right_shift [:right_shift [\u0026#34;one\u0026#34; 1]] [\u0026#34;two\u0026#34; 0] {:delayed {:invoked [\u0026#34;one\u0026#34; 0] :canceled [\u0026#34;one\u0026#34; 0]} :params {:delay 1000}}] :two [:right_shift [\u0026#34;two\u0026#34; 0]] [:period :1 ] It first check that if right_shift is tap twice and once, and leave if tap twice already. But this cannot perserve the function of right shift, so it cannnot be act like modifier anymore, to be noted, the last example that perserve right shift can replace by othey with variables, so as mod-tap layer and double tapped layer at the same time.\nMarco This is actually not a layer, but a collection of keys. I have defined a layer to shorten repetitive keys sequence into single press.\n[:i [:i :n :s :e :r :t :spacebar :a :spacebar :j :o :k :e]] Which will insert insert a joke with space if you press i.\nMy karabier.edn Here is a reference for your own implementation.\n","permalink":"https://sokinpui.github.io/Blog/post/2-goku/","summary":"If you don\u0026rsquo;t know the basic syntax of Goku, please see the offical tutorial.\nWhat is Karabiner Elements? Karabiner Elements is a keyboard modifier on MacOS, which support key blindings remap and define layer, or in another form, complex modification. Download Karabiner Elements.\nWhat is Goku? Goku is a config file that ease the configuration in Karabiner Elements. In Karabiner Elements, if you want to implement complex modification, you will need to edit the json file, which is wired, it is very likely loss for beginners who don\u0026rsquo;t know the sturcture of modification of Karabiner Elements.","title":"Define layer using Karabiner Elements togther with Goku"},{"content":"Abstruct 2023 is a start of AI era, with more strong AI tools explore to our life, typing maybe replaced by voice input one day, where natural language programming become true. But until now, typing is still not replacable. From daily usage to programming, the location of the keys may significantly effect the comfortable of long time typing. Here is a brief solution that hope to enhance the experience when typing on standard 78% keyboard.\nReason to redesign. I use Macbook Air as my main machine, stick to it and cannot use an customizable keyboard like planck\u0026rsquo;s keyboard and hhkb keyboard for the desire of protable. The plain of using standard 78% keyboard on Macbook is the overusage of pinky, Backspace, [, ], -, = and Enter are all handled by right pinky. As my right pinky is much weaker than left, which make typing long time a difficult, inefficient and tired task. I believe it is true for other user who programming a lot with Macbook.\nThere are so many plans and existing well designed layouts on the Internet, while they are mainly for one who use a external non-standard keyboards instead of standard. So I hope there will be more disscusion about configuration of trivail standard keyboard.\nChoose of base layer, Qwerty Not Colemak, Dvoark and any non-Qwerty. I have tried Colemak and Dvoark, but the musale memory of Qwerty is too strong that make me feel more natural and comfortalbe typing on Qwerty. Moreover, the change of layout may not bring significant advantages and comfor for typing, 10 keys on homerow is never enough, whatever layouts, your fingers still need to move along three rows to type characters. The analysis of those Qwerty alternative always be to ideal, without mention of muscale memory and symbols make such change not really solve the plain. Another reason is that the time cost is too high and the improvement is not that big, there is not need to explain why the time cost is high as it is well explained by those Qwetrty touch typer how share their experience of switching to non-Qwerty.\nAnalysis before design Except the function row, all row is easier to reach even for number rows. I don\u0026rsquo;t touch type numbers rows using pinky fingers. Instead, I use ring fingers which are much longers then pinky fingers. So the keyboard layout don\u0026rsquo;t need to relay on layers heavily like 40% planck\u0026rsquo;s keyboard.\nLet counts the key we need:\n30 characters on the main area of the keyboard including ,, ., / and ;. 13 keys on numbers 8 modifier keys, capslock, left right option, left right command, left shift, control, fn I don\u0026rsquo;t count right shift since I never use it. 4 special keys, including space, reutrn, tab and delete. 4 arrow keys, I don\u0026rsquo;t want to use home row arrow keys, since I seldom use them, there is no need to prepare a layer for them. 61 keys is already sweat enough for daily used, for those shortcut, I usually reduce them from three or above keys into two keys by define a customizing layer.\nLayers There are two types of layers, dead keys and modifers\nDead keys The layout of keyboard is chagned permanently untill you press other keys or the inactive keys. One of the exmaple are the comma of workman-dead.\nmodifers The layout is changed temporary, the layout return to default after release. One of the example is shift.\nMy solution There are some keys that is underused, like space, tab and return. There are much space that can be leveraged. They should perform tap-mode, which provide two funciton when tap and held them down.\nRemap space to space when tap, shift when held. It is much comfortable compare to use pinky finger to press shift. Remap left shift to escape when tap, control when held. I use vim. swap numbers and symbols for programming. remap caps lock to = when tap, switch layer when held. swap quote ' and double quote ', and locate at the original position of open bracket. move hyphen and underscore to the original position of quote. move backslash and pipe to the original position of hyphen. Layers: caps lock layers(held down caps lock): u: ] i: [ j: } k: {\nMacro sequences You can define a simple key that perform a sequence of key. It is better put them in a layer to avoid error when typing. I have defined some in the caps lock layer. d: -\u0026gt; f: != :: @:\nImplementation You may wonder how to implement those change on Mac, you may use Karabiner Elements together with Goku to define your own keyboard layout.\nConclusion There are lots of method to increase comfortable and efficiency to get the job done, before typing to modify your keyboard, make sure you have tried to use good tools like Vim, IDE, auto compeletion, snippets and scritping to reduece typing. Single modification of keyboard won\u0026rsquo;t make you a better typer.\nWith the help of snippets and auto completion, I now write code with less demand to type all the symbols manually, therefor a entire symbols layers on homerow is no needed(Previously I have one, use space to active, convert home row into common used symbols.)\n","permalink":"https://sokinpui.github.io/Blog/post/1-layout/","summary":"Abstruct 2023 is a start of AI era, with more strong AI tools explore to our life, typing maybe replaced by voice input one day, where natural language programming become true. But until now, typing is still not replacable. From daily usage to programming, the location of the keys may significantly effect the comfortable of long time typing. Here is a brief solution that hope to enhance the experience when typing on standard 78% keyboard.","title":"Programmer MacBook Keyboard layout"},{"content":" Find me on: Github: sokinpui Mail: sokinpui\n","permalink":"https://sokinpui.github.io/Blog/about/","summary":"Find me on: Github: sokinpui Mail: sokinpui","title":"About"}]